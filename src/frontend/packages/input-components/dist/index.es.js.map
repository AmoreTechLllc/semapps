{"version":3,"file":"index.es.js","sources":["../src/ImageInput.js","../src/OptionRenderer.js","../src/MultiServerAutocompleteArrayInput.js","../src/MultiServerAutocompleteInput.js","../src/MultiLinesInput.js","../src/ReferenceArrayInput.js","../src/ReferenceInput.js"],"sourcesContent":["import React from 'react';\nimport { ImageInput as RaImageInput } from 'react-admin';\n\nconst ImageInput = (props) => (\n  <RaImageInput {...props} format={v => typeof v === 'string' ? { src: v } : v} />\n);\n\nexport default ImageInput;\n","import React from 'react';\nimport { useRecordContext } from 'react-admin';\n\nconst OptionRenderer = ({ optionText, dataServers }) => {\n  const record = useRecordContext();    \n  const server = dataServers && Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n  return (\n    <span>\n      {record[optionText]}\n      {server && (\n        <em className=\"serverName\" style={{ color: 'grey' }}>\n          &nbsp;({server.name})\n        </em>\n      )}\n    </span>\n  );\n};\n\nexport default OptionRenderer;\n","import React, { useCallback } from 'react';\nimport { AutocompleteArrayInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\nimport OptionRenderer from './OptionRenderer';\n\nconst MultiServerAutocompleteArrayInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  const matchSuggestion = useCallback(\n    (filterValue, choice) => choice[optionText].toLowerCase().match(filterValue.toLowerCase()),\n    [optionText]\n  );\n  return (\n    <AutocompleteArrayInput\n      matchSuggestion={matchSuggestion}\n      optionText={<OptionRenderer optionText={optionText} dataServers={dataServers} />}\n      inputText={choice => choice[optionText]}\n      {...rest}\n    />\n  );\n};\n\nexport default MultiServerAutocompleteArrayInput;\n","import React, { useCallback } from 'react';\nimport { AutocompleteInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\n\nconst MultiServerAutocompleteInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  // We cannot use OptionRenderer like MultiServerAutocompleteArrayInput because there is a bug with AutocompleteInput\n  const optionTextWithServerName = useCallback(\n    record => {\n      if (record && dataServers) {\n        const server = Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n        return record[optionText] + (server ? ` (${server.name})` : '');\n      }\n    },\n    [optionText, dataServers]\n  );\n  return <AutocompleteInput optionText={optionTextWithServerName} {...rest} />;\n};\n\nexport default MultiServerAutocompleteInput;\n","import React from 'react';\nimport { TextInput } from 'react-admin';\n\nconst MultiLinesInput = props => (\n  <TextInput\n    multiline\n    minRows={2}\n    format={value => (value ? (Array.isArray(value) ? value.join('\\n') : value) : '')}\n    parse={value => value.split(/\\r?\\n/)}\n    {...props}\n  />\n);\n\nexport default MultiLinesInput;\n","import React, { useEffect } from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput } from 'react-admin';\nimport { useController } from 'react-hook-form';\n\nconst ReferenceArrayInput = props => {\n  const { field: { value, onChange }} = useController({ name: props.source });\n\n  useEffect(() => {\n    if (value && !Array.isArray(value)) {\n      onChange([value]);\n    }\n  }, [value, onChange]);\n\n  // Wait for change to be effective before rendering component\n  // Otherwise it will be wrongly initialized and it won't work\n  if (value && !Array.isArray(value)) return null;\n\n  return <RaReferenceArrayInput {...props} />;\n};\n\nexport default ReferenceArrayInput;","import React from 'react';\nimport { ReferenceInput as RaReferenceInput } from 'react-admin';\n\nconst format = value => {\n  // If there is no value, return immediately\n  if (!value) return value;\n  // If the value is an object with an @id field, return the uri\n  return typeof value === 'object' ? value.id || value['@id'] : value;\n};\n\nconst ReferenceInput = ({ children, ...rest }) => {\n  const child = React.Children.only(children);\n  return (\n    <RaReferenceInput {...rest}>\n      {React.cloneElement(child, { format })}\n    </RaReferenceInput>\n  );\n};\n\nexport default ReferenceInput;\n"],"names":["ImageInput","props","React","createElement","RaImageInput","_extends","format","v","src","OptionRenderer","_ref","optionText","dataServers","record","useRecordContext","server","Object","values","find","id","startsWith","baseUrl","className","style","color","name","MultiServerAutocompleteArrayInput","rest","_objectWithoutProperties","_excluded","useDataServers","matchSuggestion","useCallback","filterValue","choice","toLowerCase","match","AutocompleteArrayInput","inputText","MultiServerAutocompleteInput","optionTextWithServerName","AutocompleteInput","MultiLinesInput","TextInput","multiline","minRows","value","Array","isArray","join","parse","split","ReferenceArrayInput","_useController$field","useController","source","field","onChange","useEffect","RaReferenceArrayInput","_typeof","ReferenceInput","children","child","Children","only","RaReferenceInput","cloneElement"],"mappings":"ipCAGA,IAAMA,EAAa,SAACC,GAAD,OACjBC,EAAAC,cAACC,EAADC,EAAA,GAAkBJ,EAAlB,CAAyBK,OAAQ,SAAAC,GAAC,MAAiB,iBAANA,EAAiB,CAAEC,IAAKD,GAAMA,OCDvEE,EAAiB,SAAiCC,GAAA,IAA9BC,IAAAA,WAAYC,IAAAA,YAC9BC,EAASC,IACTC,EAASH,GAAeI,OAAOC,OAAOL,GAAaM,MAAK,SAAAH,GAAM,OAAIF,EAAOM,GAAGC,WAAWL,EAAOM,YACpG,OACEnB,4BACGW,EAAOF,GACPI,GACCb,EAAAC,cAAA,KAAA,CAAImB,UAAU,aAAaC,MAAO,CAAEC,MAAO,SAA3C,KACUT,EAAOU,KADjB,wBCLFC,EAAoC,SAA6BhB,GAAA,IAA1BC,IAAAA,WAAegB,EAAWC,EAAAlB,EAAAmB,GAC/DjB,EAAckB,IACdC,EAAkBC,GACtB,SAACC,EAAaC,GAAd,OAAyBA,EAAOvB,GAAYwB,cAAcC,MAAMH,EAAYE,iBAC5E,CAACxB,IAEH,OACET,gBAACmC,EAADhC,EAAA,CACE0B,gBAAiBA,EACjBpB,WAAYT,gBAACO,EAAD,CAAgBE,WAAYA,EAAYC,YAAaA,IACjE0B,UAAW,SAAAJ,GAAM,OAAIA,EAAOvB,KACxBgB,sBCZJY,EAA+B,SAA6B7B,GAAA,IAA1BC,IAAAA,WAAegB,EAAWC,EAAAlB,EAAAmB,GAC1DjB,EAAckB,IAEdU,EAA2BR,GAC/B,SAAAnB,GACE,GAAIA,GAAUD,EAAa,CACzB,IAAMG,EAASC,OAAOC,OAAOL,GAAaM,MAAK,SAAAH,GAAM,OAAIF,EAAOM,GAAGC,WAAWL,EAAOM,YACrF,OAAOR,EAAOF,IAAeI,EAAcA,KAAAA,OAAAA,EAAOU,KAAU,KAAA,OAGhE,CAACd,EAAYC,IAEf,OAAOV,gBAACuC,EAADpC,EAAA,CAAmBM,WAAY6B,GAA8Bb,KCbhEe,EAAkB,SAAAzC,GAAK,OAC3BC,gBAACyC,EAADtC,EAAA,CACEuC,WADF,EAEEC,QAAS,EACTvC,OAAQ,SAAAwC,GAAK,OAAKA,EAASC,MAAMC,QAAQF,GAASA,EAAMG,KAAK,MAAQH,EAAS,IAC9EI,MAAO,SAAAJ,GAAK,OAAIA,EAAMK,MAAM,WACxBlD,KCLFmD,EAAsB,SAAAnD,GAC1B,IAAAoD,EAAsCC,EAAc,CAAE7B,KAAMxB,EAAMsD,SAA1DC,MAASV,IAAAA,MAAOW,IAAAA,SAUxB,OARAC,GAAU,WACJZ,IAAUC,MAAMC,QAAQF,IAC1BW,EAAS,CAACX,MAEX,CAACA,EAAOW,IAIPX,IAAUC,MAAMC,QAAQF,GAAe,KAEpC5C,EAACC,cAAAwD,EAA0B1D,mBCd9BK,EAAS,SAAAwC,GAEb,OAAKA,GAEmB,WAAjBc,EAAOd,GAAqBA,EAAM3B,IAAM2B,EAAM,OAFlCA,GAKfe,EAAiB,SAA2BnD,GAAA,IAAxBoD,IAAAA,SAAanC,EAAWC,EAAAlB,EAAAmB,GAC1CkC,EAAQ7D,EAAM8D,SAASC,KAAKH,GAClC,OACE5D,EAAAC,cAAC+D,EAAqBvC,EACnBzB,EAAMiE,aAAaJ,EAAO,CAAEzD,OAAAA"}