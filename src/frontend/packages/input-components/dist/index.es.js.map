{"version":3,"file":"index.es.js","sources":["../src/OptionRenderer.js","../src/MultiServerAutocompleteArrayInput.js","../src/MultiServerAutocompleteInput.js","../src/MultiLinesInput.js","../src/ReferenceArrayInput.js","../src/ReferenceInput.js"],"sourcesContent":["import React from 'react';\nimport { useRecordContext } from 'react-admin';\n\nconst OptionRenderer = ({ optionText, dataServers }) => {\n  const record = useRecordContext();    \n  const server = dataServers && Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n  return (\n    <span>\n      {record[optionText]}\n      {server && (\n        <em className=\"serverName\" style={{ color: 'grey' }}>\n          &nbsp;({server.name})\n        </em>\n      )}\n    </span>\n  );\n};\n\nexport default OptionRenderer;\n","import React, { useCallback } from 'react';\nimport { AutocompleteArrayInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\nimport OptionRenderer from './OptionRenderer';\n\nconst MultiServerAutocompleteArrayInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  const matchSuggestion = useCallback(\n    (filterValue, choice) => choice[optionText].toLowerCase().match(filterValue.toLowerCase()),\n    [optionText]\n  );\n  return (\n    <AutocompleteArrayInput\n      matchSuggestion={matchSuggestion}\n      optionText={<OptionRenderer optionText={optionText} dataServers={dataServers} />}\n      inputText={choice => choice[optionText]}\n      {...rest}\n    />\n  );\n};\n\nexport default MultiServerAutocompleteArrayInput;\n","import React, { useCallback } from 'react';\nimport { AutocompleteInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\n\nconst MultiServerAutocompleteInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  // We cannot use OptionRenderer like MultiServerAutocompleteArrayInput because there is a bug with AutocompleteInput\n  const optionTextWithServerName = useCallback(\n    record => {\n      if (record && dataServers) {\n        const server = Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n        return record[optionText] + (server ? ` (${server.name})` : '');\n      }\n    },\n    [optionText, dataServers]\n  );\n  return <AutocompleteInput optionText={optionTextWithServerName} {...rest} />;\n};\n\nexport default MultiServerAutocompleteInput;\n","import React from 'react';\nimport { TextInput } from 'react-admin';\n\nconst MultiLinesInput = props => (\n  <TextInput\n    multiline\n    minRows={2}\n    format={value => (value ? (Array.isArray(value) ? value.join('\\n') : value) : '')}\n    parse={value => value.split(/\\r?\\n/)}\n    {...props}\n  />\n);\n\nexport default MultiLinesInput;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext, useRecordContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  let record = useRecordContext();\n  if (record && record[props.source]) {\n    let value = record[props.source];\n    // if the linked field value is not an array, turns it into an array.\n    // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n    // and the ReferenceArrayInput component only accept arrays\n    if (!Array.isArray(value)) value = [value];\n    // If a format prop was defined, apply it to the array\n    if (props.format) value = props.format(value);\n    // If the values are objects with @id field, turn it to a simple string\n    value = value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n    record[props.source] = value;\n  }\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      record={record}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n"],"names":["OptionRenderer","_ref","optionText","dataServers","record","useRecordContext","server","Object","values","find","id","startsWith","baseUrl","React","createElement","className","style","color","name","MultiServerAutocompleteArrayInput","rest","_objectWithoutProperties","_excluded","useDataServers","matchSuggestion","useCallback","filterValue","choice","toLowerCase","match","AutocompleteArrayInput","_extends","inputText","MultiServerAutocompleteInput","optionTextWithServerName","AutocompleteInput","MultiLinesInput","props","TextInput","multiline","minRows","format","value","Array","isArray","join","parse","split","ReferenceArrayInput","resource","useResourceContext","source","map","v","_typeof","RaReferenceArrayInput","ReferenceInput","RaReferenceInput"],"mappings":"0lCAGA,IAAMA,EAAiB,SAAiCC,GAAA,IAA9BC,IAAAA,WAAYC,IAAAA,YAC9BC,EAASC,IACTC,EAASH,GAAeI,OAAOC,OAAOL,GAAaM,MAAK,SAAAH,GAAM,OAAIF,EAAOM,GAAGC,WAAWL,EAAOM,YACpG,OACEC,4BACGT,EAAOF,GACPI,GACCO,EAAAC,cAAA,KAAA,CAAIC,UAAU,aAAaC,MAAO,CAAEC,MAAO,SAA3C,KACUX,EAAOY,KADjB,wBCLFC,EAAoC,SAA6BlB,GAAA,IAA1BC,IAAAA,WAAekB,EAAWC,EAAApB,EAAAqB,GAC/DnB,EAAcoB,IACdC,EAAkBC,GACtB,SAACC,EAAaC,GAAd,OAAyBA,EAAOzB,GAAY0B,cAAcC,MAAMH,EAAYE,iBAC5E,CAAC1B,IAEH,OACEW,gBAACiB,EAADC,EAAA,CACEP,gBAAiBA,EACjBtB,WAAYW,gBAACb,EAAD,CAAgBE,WAAYA,EAAYC,YAAaA,IACjE6B,UAAW,SAAAL,GAAM,OAAIA,EAAOzB,KACxBkB,sBCZJa,EAA+B,SAA6BhC,GAAA,IAA1BC,IAAAA,WAAekB,EAAWC,EAAApB,EAAAqB,GAC1DnB,EAAcoB,IAEdW,EAA2BT,GAC/B,SAAArB,GACE,GAAIA,GAAUD,EAAa,CACzB,IAAMG,EAASC,OAAOC,OAAOL,GAAaM,MAAK,SAAAH,GAAM,OAAIF,EAAOM,GAAGC,WAAWL,EAAOM,YACrF,OAAOR,EAAOF,IAAeI,EAAcA,KAAAA,OAAAA,EAAOY,KAAU,KAAA,OAGhE,CAAChB,EAAYC,IAEf,OAAOU,gBAACsB,EAADJ,EAAA,CAAmB7B,WAAYgC,GAA8Bd,KCbhEgB,EAAkB,SAAAC,GAAK,OAC3BxB,gBAACyB,EAADP,EAAA,CACEQ,WADF,EAEEC,QAAS,EACTC,OAAQ,SAAAC,GAAK,OAAKA,EAASC,MAAMC,QAAQF,GAASA,EAAMG,KAAK,MAAQH,EAAS,IAC9EI,MAAO,SAAAJ,GAAK,OAAIA,EAAMK,MAAM,WACxBV,KCNFW,EAAsB,SAAAX,GAC1B,IAAMY,EAAWC,EAAmB,IAChC9C,EAASC,IACb,GAAID,GAAUA,EAAOiC,EAAMc,QAAS,CAClC,IAAIT,EAAQtC,EAAOiC,EAAMc,QAIpBR,MAAMC,QAAQF,KAAQA,EAAQ,CAACA,IAEhCL,EAAMI,SAAQC,EAAQL,EAAMI,OAAOC,IAEvCA,EAAQA,EAAMU,KAAI,SAAAC,GAAC,MAAkB,WAAbC,EAAOD,GAAiBA,EAAE3C,IAAM2C,EAAE,OAASA,KACnEjD,EAAOiC,EAAMc,QAAUT,EAEzB,OACE7B,EAAAC,cAACyC,EAADxB,EAAA,GACMM,EADN,CAEEY,SAAUA,EACV7C,OAAQA,MCnBRoD,EAAiB,SAAAnB,GACrB,IAAMY,EAAWC,EAAmB,IACpC,OACErC,EAAAC,cAAC2C,EAAD1B,EAAA,GACMM,EADN,CAEEY,SAAUA,EACVR,OAAQ,SAAAC,GAEN,OAAKA,GAEDL,EAAMI,SAAQC,EAAQL,EAAMI,OAAOC,IAEf,WAAjBY,EAAOZ,GAAqBA,EAAMhC,IAAMgC,EAAM,OAASA,GAJ3CA"}