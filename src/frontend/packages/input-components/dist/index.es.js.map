{"version":3,"file":"index.es.js","sources":["../src/OptionRenderer.js","../src/MultiServerAutocompleteArrayInput.js","../src/MultiServerAutocompleteInput.js","../src/MultiLinesInput.js"],"sourcesContent":["import React from 'react';\n\nconst OptionRenderer = ({ record, optionText, dataServers }) => {\n  const server = dataServers && Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n  return (\n    <span>\n      {record[optionText]}\n      {server && (\n        <em className=\"serverName\" style={{ color: 'grey' }}>\n          &nbsp;({server.name})\n        </em>\n      )}\n    </span>\n  );\n};\n\nexport default OptionRenderer;\n","import React, { useCallback } from 'react';\nimport { AutocompleteArrayInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\nimport OptionRenderer from './OptionRenderer';\n\nconst MultiServerAutocompleteArrayInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  const matchSuggestion = useCallback(\n    (filterValue, choice) => choice[optionText].toLowerCase().match(filterValue.toLowerCase()),\n    [optionText]\n  );\n  return (\n    <AutocompleteArrayInput\n      matchSuggestion={matchSuggestion}\n      optionText={<OptionRenderer optionText={optionText} dataServers={dataServers} />}\n      {...rest}\n    />\n  );\n};\n\nexport default MultiServerAutocompleteArrayInput;\n","import React, { useCallback } from 'react';\nimport { AutocompleteInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\n\nconst MultiServerAutocompleteInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  // We cannot use OptionRenderer like MultiServerAutocompleteArrayInput because there is a bug with AutocompleteInput\n  const optionTextWithServerName = useCallback(\n    record => {\n      if (record && dataServers) {\n        const server = Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n        return record[optionText] + (server ? ` (${server.name})` : '');\n      }\n    },\n    [optionText, dataServers]\n  );\n  return <AutocompleteInput optionText={optionTextWithServerName} {...rest} />;\n};\n\nexport default MultiServerAutocompleteInput;\n","import React from 'react';\nimport { TextInput } from 'react-admin';\n\nconst MultiLinesInput = props => (\n  <TextInput\n    multiline\n    minRows={2}\n    format={value => (value ? (Array.isArray(value) ? value.join('\\n') : value) : '')}\n    parse={value => value.split(/\\r?\\n/)}\n    {...props}\n  />\n);\n\nexport default MultiLinesInput;\n"],"names":["OptionRenderer","record","optionText","dataServers","server","Object","values","find","id","startsWith","baseUrl","React","className","style","color","name","MultiServerAutocompleteArrayInput","rest","useDataServers","matchSuggestion","useCallback","filterValue","choice","toLowerCase","match","AutocompleteArrayInput","MultiServerAutocompleteInput","optionTextWithServerName","AutocompleteInput","MultiLinesInput","props","TextInput","multiline","minRows","format","value","Array","isArray","join","parse","split"],"mappings":"swBAEA,IAAMA,EAAiB,gBAAGC,IAAAA,OAAQC,IAAAA,WAAYC,IAAAA,YACtCC,EAASD,GAAeE,OAAOC,OAAOH,GAAaI,MAAK,SAAAH,UAAUH,EAAOO,GAAGC,WAAWL,EAAOM,mBAElGC,4BACGV,EAAOC,GACPE,GACCO,sBAAIC,UAAU,aAAaC,MAAO,CAAEC,MAAO,cACjCV,EAAOW,6BCJnBC,EAAoC,gBAAGd,IAAAA,WAAee,SACpDd,EAAce,IACdC,EAAkBC,GACtB,SAACC,EAAaC,UAAWA,EAAOpB,GAAYqB,cAAcC,MAAMH,EAAYE,iBAC5E,CAACrB,WAGDS,gBAACc,KACCN,gBAAiBA,EACjBjB,WAAYS,gBAACX,GAAeE,WAAYA,EAAYC,YAAaA,KAC7Dc,sBCXJS,EAA+B,gBAAGxB,IAAAA,WAAee,SAC/Cd,EAAce,IAEdS,EAA2BP,GAC/B,SAAAnB,MACMA,GAAUE,EAAa,KACnBC,EAASC,OAAOC,OAAOH,GAAaI,MAAK,SAAAH,UAAUH,EAAOO,GAAGC,WAAWL,EAAOM,mBAC9ET,EAAOC,IAAeE,cAAcA,EAAOW,UAAU,OAGhE,CAACb,EAAYC,WAERQ,gBAACiB,KAAkB1B,WAAYyB,GAA8BV,KCbhEY,EAAkB,SAAAC,UACtBnB,gBAACoB,KACCC,aACAC,QAAS,EACTC,OAAQ,SAAAC,UAAUA,EAASC,MAAMC,QAAQF,GAASA,EAAMG,KAAK,MAAQH,EAAS,IAC9EI,MAAO,SAAAJ,UAASA,EAAMK,MAAM,WACxBV"}