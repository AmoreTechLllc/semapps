{"version":3,"file":"index.es.js","sources":["../src/ImageInput.js","../src/OptionRenderer.js","../src/MultiServerAutocompleteArrayInput.js","../src/MultiServerAutocompleteInput.js","../src/MultiLinesInput.js","../src/ReferenceArrayInput.js","../src/ReferenceInput.js"],"sourcesContent":["import React from 'react';\nimport { ImageInput as RaImageInput } from 'react-admin';\n\nconst ImageInput = ({ source, ...rest }) => {\n  const record = useRecordContext();\n  const modifiedRecord = record[source] && typeof record[source] === 'string' \n    ? { ...record, [source]: { src: record[source] } }\n    : record;\n\n  return (\n    <RecordContextProvider value={modifiedRecord}>\n      <RaImageInput source={source} {...rest} />\n    </RecordContextProvider>\n  );\n};\n\nexport default ImageInput;\n","import React from 'react';\nimport { useRecordContext } from 'react-admin';\n\nconst OptionRenderer = ({ optionText, dataServers }) => {\n  const record = useRecordContext();    \n  const server = dataServers && Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n  return (\n    <span>\n      {record[optionText]}\n      {server && (\n        <em className=\"serverName\" style={{ color: 'grey' }}>\n          &nbsp;({server.name})\n        </em>\n      )}\n    </span>\n  );\n};\n\nexport default OptionRenderer;\n","import React, { useCallback } from 'react';\nimport { AutocompleteArrayInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\nimport OptionRenderer from './OptionRenderer';\n\nconst MultiServerAutocompleteArrayInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  const matchSuggestion = useCallback(\n    (filterValue, choice) => choice[optionText].toLowerCase().match(filterValue.toLowerCase()),\n    [optionText]\n  );\n  return (\n    <AutocompleteArrayInput\n      matchSuggestion={matchSuggestion}\n      optionText={<OptionRenderer optionText={optionText} dataServers={dataServers} />}\n      inputText={choice => choice[optionText]}\n      {...rest}\n    />\n  );\n};\n\nexport default MultiServerAutocompleteArrayInput;\n","import React, { useCallback } from 'react';\nimport { AutocompleteInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\n\nconst MultiServerAutocompleteInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  // We cannot use OptionRenderer like MultiServerAutocompleteArrayInput because there is a bug with AutocompleteInput\n  const optionTextWithServerName = useCallback(\n    record => {\n      if (record && dataServers) {\n        const server = Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n        return record[optionText] + (server ? ` (${server.name})` : '');\n      }\n    },\n    [optionText, dataServers]\n  );\n  return <AutocompleteInput optionText={optionTextWithServerName} {...rest} />;\n};\n\nexport default MultiServerAutocompleteInput;\n","import React from 'react';\nimport { TextInput } from 'react-admin';\n\nconst MultiLinesInput = props => (\n  <TextInput\n    multiline\n    minRows={2}\n    format={value => (value ? (Array.isArray(value) ? value.join('\\n') : value) : '')}\n    parse={value => value.split(/\\r?\\n/)}\n    {...props}\n  />\n);\n\nexport default MultiLinesInput;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext, useRecordContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  let record = useRecordContext();\n  if (record && record[props.source]) {\n    let value = record[props.source];\n    // if the linked field value is not an array, turns it into an array.\n    // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n    // and the ReferenceArrayInput component only accept arrays\n    if (!Array.isArray(value)) value = [value];\n    // If a format prop was defined, apply it to the array\n    if (props.format) value = props.format(value);\n    // If the values are objects with @id field, turn it to a simple string\n    value = value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n    record[props.source] = value;\n  }\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      record={record}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n"],"names":["ImageInput","_ref","source","rest","_objectWithoutProperties","_excluded","record","useRecordContext","modifiedRecord","_defineProperty","src","React","RecordContextProvider","value","RaImageInput","_extends","OptionRenderer","optionText","dataServers","server","Object","values","find","id","startsWith","baseUrl","createElement","className","style","color","name","MultiServerAutocompleteArrayInput","useDataServers","matchSuggestion","useCallback","filterValue","choice","toLowerCase","match","AutocompleteArrayInput","inputText","MultiServerAutocompleteInput","optionTextWithServerName","AutocompleteInput","MultiLinesInput","props","TextInput","multiline","minRows","format","Array","isArray","join","parse","split","ReferenceArrayInput","resource","useResourceContext","map","v","_typeof","RaReferenceArrayInput","ReferenceInput","RaReferenceInput"],"mappings":"kzDAGMA,EAAa,SAAyBC,GAAA,IAAtBC,IAAAA,OAAWC,EAAWC,EAAAH,EAAAI,GACpCC,EAASC,mBACTC,EAAiBF,EAAOJ,IAAqC,iBAAnBI,EAAOJ,UAC9CI,GADc,GAAAG,EAAA,GACLP,EAAS,CAAEQ,IAAKJ,EAAOJ,MACrCI,EAEJ,OACEK,gBAACC,sBAAD,CAAuBC,MAAOL,GAC5BG,gBAACG,EAADC,EAAA,CAAcb,OAAQA,GAAYC,MCRlCa,EAAiB,SAAiCf,GAAA,IAA9BgB,IAAAA,WAAYC,IAAAA,YAC9BZ,EAASC,IACTY,EAASD,GAAeE,OAAOC,OAAOH,GAAaI,MAAK,SAAAH,GAAM,OAAIb,EAAOiB,GAAGC,WAAWL,EAAOM,YACpG,OACEd,4BACGL,EAAOW,GACPE,GACCR,EAAAe,cAAA,KAAA,CAAIC,UAAU,aAAaC,MAAO,CAAEC,MAAO,SAA3C,KACUV,EAAOW,KADjB,wBCLFC,EAAoC,SAA6B9B,GAAA,IAA1BgB,IAAAA,WAAed,EAAWC,EAAAH,EAAAI,GAC/Da,EAAcc,IACdC,EAAkBC,GACtB,SAACC,EAAaC,GAAd,OAAyBA,EAAOnB,GAAYoB,cAAcC,MAAMH,EAAYE,iBAC5E,CAACpB,IAEH,OACEN,gBAAC4B,EAADxB,EAAA,CACEkB,gBAAiBA,EACjBhB,WAAYN,gBAACK,EAAD,CAAgBC,WAAYA,EAAYC,YAAaA,IACjEsB,UAAW,SAAAJ,GAAM,OAAIA,EAAOnB,KACxBd,sBCZJsC,EAA+B,SAA6BxC,GAAA,IAA1BgB,IAAAA,WAAed,EAAWC,EAAAH,EAAAI,GAC1Da,EAAcc,IAEdU,EAA2BR,GAC/B,SAAA5B,GACE,GAAIA,GAAUY,EAAa,CACzB,IAAMC,EAASC,OAAOC,OAAOH,GAAaI,MAAK,SAAAH,GAAM,OAAIb,EAAOiB,GAAGC,WAAWL,EAAOM,YACrF,OAAOnB,EAAOW,IAAeE,EAAcA,KAAAA,OAAAA,EAAOW,KAAU,KAAA,OAGhE,CAACb,EAAYC,IAEf,OAAOP,gBAACgC,EAAD5B,EAAA,CAAmBE,WAAYyB,GAA8BvC,KCbhEyC,EAAkB,SAAAC,GAAK,OAC3BlC,gBAACmC,EAAD/B,EAAA,CACEgC,WADF,EAEEC,QAAS,EACTC,OAAQ,SAAApC,GAAK,OAAKA,EAASqC,MAAMC,QAAQtC,GAASA,EAAMuC,KAAK,MAAQvC,EAAS,IAC9EwC,MAAO,SAAAxC,GAAK,OAAIA,EAAMyC,MAAM,WACxBT,KCNFU,EAAsB,SAAAV,GAC1B,IAAMW,EAAWC,EAAmB,IAChCnD,EAASC,IACb,GAAID,GAAUA,EAAOuC,EAAM3C,QAAS,CAClC,IAAIW,EAAQP,EAAOuC,EAAM3C,QAIpBgD,MAAMC,QAAQtC,KAAQA,EAAQ,CAACA,IAEhCgC,EAAMI,SAAQpC,EAAQgC,EAAMI,OAAOpC,IAEvCA,EAAQA,EAAM6C,KAAI,SAAAC,GAAC,MAAkB,WAAbC,EAAOD,GAAiBA,EAAEpC,IAAMoC,EAAE,OAASA,KACnErD,EAAOuC,EAAM3C,QAAUW,EAEzB,OACEF,EAAAe,cAACmC,EAAD9C,EAAA,GACM8B,EADN,CAEEW,SAAUA,EACVlD,OAAQA,MCnBRwD,EAAiB,SAAAjB,GACrB,IAAMW,EAAWC,EAAmB,IACpC,OACE9C,EAAAe,cAACqC,EAADhD,EAAA,GACM8B,EADN,CAEEW,SAAUA,EACVP,OAAQ,SAAApC,GAEN,OAAKA,GAEDgC,EAAMI,SAAQpC,EAAQgC,EAAMI,OAAOpC,IAEf,WAAjB+C,EAAO/C,GAAqBA,EAAMU,IAAMV,EAAM,OAASA,GAJ3CA"}