{"version":3,"file":"index.es.js","sources":["../src/ChipList.js","../src/GridList.js","../src/MasonryList.js","../src/ReferenceFilter.js","../src/MultiViewsList/ListViewContext.js","../src/MultiViewsList/ViewsButtons.js","../src/MultiViewsList/ListActionsWithViews.js","../src/MultiViewsList/MultiViewsList.js"],"sourcesContent":["import React from 'react';\nimport {\n  ChipField,\n  useCreatePath,\n  useListContext,\n  sanitizeListRestProps,\n  RecordContextProvider,\n  Link\n} from 'react-admin';\nimport { LinearProgress } from '@mui/material';\nimport makeStyles from '@mui/styles/makeStyles';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport LaunchIcon from '@mui/icons-material/Launch';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  link: {\n    textDecoration: 'none',\n    maxWidth: '100%'\n  },\n  chipField: {\n    maxWidth: '100%'\n  },\n  addIcon: {\n    cursor: 'pointer',\n    fontSize: 35,\n    position: 'relative',\n    top: -2,\n    left: -2\n  },\n  launchIcon: {\n    width: 16,\n    paddingRight: 6,\n    marginLeft: -10\n  }\n}));\n\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst ChipList = props => {\n  const {\n    classes: classesOverride,\n    className,\n    children,\n    linkType = 'edit',\n    component = 'div',\n    primaryText,\n    appendLink,\n    externalLinks = false,\n    ...rest\n  } = props;\n  const { data, isLoading } = useListContext(props);\n  const getExternalLink = useGetExternalLink(externalLinks);\n  const createPath = useCreatePath();\n\n  const classes = useStyles(props);\n  const Component = component;\n\n  if (isLoading) return <LinearProgress />;\n\n  return (\n    <Component className={classes.root} {...sanitizeListRestProps(rest)}>\n      {data.map(record => {\n        if (!record || record['_error']) return null;\n        const externalLink = getExternalLink(record);\n        if (externalLink) {\n          return (\n            <RecordContextProvider value={record} key={record.id}>\n              <a\n                href={externalLink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className={classes.link}\n                onClick={stopPropagation}\n              >\n                <ChipField\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  deleteIcon={<LaunchIcon className={classes.launchIcon} />}\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                  // Required to display the delete icon\n                  onDelete={handleClick}\n                />\n              </a>\n            </RecordContextProvider>\n          );\n        } else if (linkType) {\n          return (\n            <RecordContextProvider value={record} key={record.id}>\n              <Link className={classes.link} to={createPath({ record, id: record.id, type: linkType })} onClick={stopPropagation}>\n                <ChipField\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                />\n              </Link>\n            </RecordContextProvider>\n          );\n        } else {\n          return (\n            <RecordContextProvider value={record} key={record.id}>\n              <ChipField\n                source={primaryText}\n                className={classes.chipField}\n                color=\"secondary\"\n                // Workaround to force ChipField to be clickable\n                onClick={handleClick}\n              />\n            </RecordContextProvider>\n          );\n        }\n      })}\n      {appendLink && <AddCircleIcon color=\"primary\" className={classes.addIcon} onClick={appendLink} />}\n    </Component>\n  );\n};\n\nexport default ChipList;\n","import * as React from 'react';\nimport { useListContext, useCreatePath, Link, RecordContextProvider } from 'react-admin';\nimport { Grid } from '@mui/material';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst GridList = ({ children, linkType, externalLinks, spacing, xs, sm, md, lg, xl }) => {\n  const { data, resource, isLoading } = useListContext();\n  const getExternalLink = useGetExternalLink(externalLinks);\n  const createPath = useCreatePath();\n  if (isLoading) return null;\n  return (\n    <Grid container spacing={spacing}>\n      {data.map(record => {\n        if (!record || record['_error']) return null;\n        const externalLink = getExternalLink(record);\n        let child;\n\n        if (externalLink) {\n          child = (\n            <a href={externalLink} target=\"_blank\" rel=\"noopener noreferrer\" onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                externalLink: true,\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </a>\n          );\n        } else if (linkType) {\n          child = (\n            <Link to={createPath({ resource, id: record.id, type: linkType })} onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </Link>\n          );\n        } else {\n          child = children;\n        }\n\n        return (\n          <Grid item key={record.id} xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\n            <RecordContextProvider value={record}>\n              {child}\n            </RecordContextProvider>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nGridList.defaultProps = {\n  xs: 6,\n  spacing: 3,\n  linkType: 'edit',\n  externalLinks: false\n};\n\nexport default GridList;\n","import React from 'react';\nimport { useListContext, Link, useCreatePath, RecordContextProvider } from 'react-admin';\nimport { Card, CardActionArea, CardMedia, CardContent, CardActions } from '@mui/material';\nimport makeStyles from '@mui/styles/makeStyles';\nimport Masonry from 'react-masonry-css';\n\nconst useStyles = makeStyles(() => ({\n  grid: {\n    display: 'flex',\n    marginLeft: -20,\n    marginBottom: -20,\n    width: 'auto'\n  },\n  column: {\n    paddingLeft: 20,\n    backgroundClip: 'padding-box'\n  },\n  card: {\n    marginBottom: 20\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n  }\n}));\n\n/**\n * @example\n * <List component=\"div\" perPage={50} {...props}>\n *   <MasonryList\n *     image={record => record.image}\n *     content={record => (\n *       <>\n *         <Typography variant=\"subtitle1\">{record.title}</Typography>\n *         <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{record.description}</Typography>\n *       </>\n *     )}\n *     linkType=\"show\"\n *   />\n * </List>\n */\nconst MasonryList = ({ image, content, actions, breakpointCols, linkType }) => {\n  const classes = useStyles();\n  const { data, resource } = useListContext();\n  const createPath = useCreatePath();\n  return (\n    <Masonry breakpointCols={breakpointCols} className={classes.grid} columnClassName={classes.column}>\n      {data.map(record => {\n        if (!record || record['_error']) return null;\n        const imageUrl = typeof image === 'function' ? image(record) : image;\n        return (\n          <RecordContextProvider value={record}>\n            <Card key={record.id} className={classes.card}>\n              <Link to={createPath({ resource, id: record.id, type: linkType })}>\n                <CardActionArea>\n                  {imageUrl && <CardMedia className={classes.media} image={imageUrl} />}\n                  {content && <CardContent>{content(record)}</CardContent>}\n                </CardActionArea>\n              </Link>\n              {actions && (\n                <CardActions>\n                  {actions.map(action => React.createElement(action))}\n                </CardActions>\n              )}\n            </Card>\n          </RecordContextProvider>\n        );\n      })}\n    </Masonry>\n  );\n};\n\nMasonryList.defaultProps = {\n  breakpointCols: { default: 3, 1050: 2, 700: 1 },\n  linkType: 'edit'\n};\n\nexport default MasonryList;\n","import React, { useEffect } from 'react';\nimport { FilterList, FilterListItem, useGetList, useResourceContext, useListContext, useResourceDefinition } from 'react-admin';\nimport { useContainers, useDataModel } from '@semapps/semantic-data-provider';\n\n/**\n * @example\n * const FilterAside = () => (\n *   <Card>\n *     <CardContent>\n *       <FilterLiveSearch source=\"pair:label\" />\n *       <ReferenceFilter reference=\"Theme\" source=\"pair:hasTopic\" inverseSource=\"pair:topicOf\" />\n *       <ReferenceFilter reference=\"Skill\" source=\"pair:offers\" inverseSource=\"pair:offeredBy\" />\n *     </CardContent>\n *   </Card>\n * );\n */\n\nconst ReferenceFilterCounter = ({ source, id }) => {\n  const resourceContext = useResourceContext();\n  const { data, isLoading } = useGetList(resourceContext);\n  return (\n    <>\n      &nbsp;\n      { ! isLoading &&\n        <span className=\"filter-count\">{'(' + Object.values(data).filter(d => ([].concat(d[source])).includes(id)).length + ')'}</span>\n      }\n    </>\n  );\n};\n\nconst ReferenceFilter = ({ reference, source, inverseSource, limit, sort, filter, label, icon, showCounters }) => {\n  const { data, isLoading } = useGetList(reference, { page: 1, perPage: limit }, sort, filter);\n  const currentResource = useResourceDefinition({resource: reference});\n  const resourceContext = useResourceContext();\n  const resourceContextDataModel = useDataModel(resourceContext);\n  const resourceContextContainers = useContainers(resourceContext);\n\n  const {\n    displayedFilters,\n    filterValues,\n    setFilters,\n    hideFilter\n  } = useListContext();\n  useEffect(() => {\n    // Needed when filter item is active and its last relation is removed\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n    if (! params.filter && ! isLoading) {\n      setFilters({});\n    }\n  }, []);\n  \n  const itemIsUsed = (itemData) => {\n    if (!inverseSource) {\n      return true;\n    }\n    if (!resourceContextContainers || !itemData) {\n      return false;\n    }\n    let itemIsUsed = false;\n    Object.values(resourceContextContainers).forEach(value => {\n      value.forEach(containerUrl => {\n        [].concat(itemData[inverseSource]).forEach(inverseSourceData => {\n          if (inverseSourceData?.startsWith(containerUrl)) {\n            itemIsUsed = true;\n          }\n        })\n      })\n    });\n    return itemIsUsed;\n  }\n  \n  return (\n    <FilterList\n      label={label || currentResource?.options?.label || ''}\n      icon={icon || currentResource?.icon ? React.createElement(currentResource.icon) : undefined}\n    >\n      {data && data\n        .filter(itemData => itemIsUsed(itemData))\n        .map(itemData => (\n          <FilterListItem\n            key={itemData.id}\n            label={\n              <span className=\"filter-label\">\n                {itemData['pair:label']}\n                {showCounters && <ReferenceFilterCounter source={source} id={itemData.id} />}\n              </span>\n            }\n            value={{ [source]: itemData.id }}\n          />\n        ))}\n    </FilterList>\n  );\n};\n\nReferenceFilter.defaultProps = {\n  limit: 25,\n  showCounters: true\n};\n\nexport default ReferenceFilter;\n","import React from 'react';\n\nconst ListViewContext = React.createContext({ views: null, currentView: null, setView: () => null });\n\nexport default ListViewContext;\n","import React from 'react';\nimport { Button, Link } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport ListViewContext from './ListViewContext';\n\nconst ViewsButtons = () => {\n  const query = new URLSearchParams(useLocation().search);\n  const { views, currentView, setView } = React.useContext(ListViewContext);\n  return views\n    ? Object.entries(views)\n        .filter(([key]) => key !== currentView)\n        .map(([key, view]) => {\n          query.set('view', key);\n          query.set('page', 1);\n          query.set('perPage', view.perPage);\n          if (view.sort) {\n            query.set('sort', view.sort.field);\n            query.set('order', view.sort.order);\n          }\n          return (\n            <Link key={key} to={'?' + query.toString()}>\n              <Button onClick={() => setView(key)} label={view.label}>\n                {React.createElement(view.icon)}\n              </Button>\n            </Link>\n          );\n        })\n    : null;\n};\n\nexport default ViewsButtons;\n","import React from 'react';\nimport { CreateButton, ExportButton, useResourceDefinition, TopToolbar } from 'react-admin';\nimport { useMediaQuery } from '@mui/material';\nimport ViewsButtons from './ViewsButtons';\nimport { useTheme } from 'react-admin';\n\nconst ListActionsWithViews = ({\n  bulkActions,\n  basePath,\n  sort,\n  displayedFilters,\n  exporter,\n  filters,\n  filterValues,\n  onUnselectItems,\n  resource,\n  selectedIds,\n  showFilter,\n  total,\n  ...rest\n}) => {\n  const [theme] = useTheme();\n  const xs = useMediaQuery(() => theme.breakpoints.down('sm'));\n  const resourceDefinition = useResourceDefinition(rest);\n  return (\n    <TopToolbar>\n      <ViewsButtons />\n      {filters &&\n        React.cloneElement(filters, {\n          resource,\n          showFilter,\n          displayedFilters,\n          filterValues,\n          context: 'button'\n        })}\n      {resourceDefinition.hasCreate && <CreateButton basePath={basePath} />}\n      {!xs && exporter !== false && (\n        <ExportButton\n          disabled={total === 0}\n          resource={resource}\n          sort={sort}\n          filter={filterValues}\n          exporter={exporter}\n        />\n      )}\n      {bulkActions &&\n        React.cloneElement(bulkActions, {\n          basePath,\n          filterValues,\n          resource,\n          selectedIds,\n          onUnselectItems\n        })}\n    </TopToolbar>\n  );\n};\n\nexport default ListActionsWithViews;\n","import React, { useState } from 'react';\nimport { List } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport ListActionsWithViews from './ListActionsWithViews';\nimport ListViewContext from './ListViewContext';\n\nconst MultiViewsList = ({ children, actions, views, ListComponent, ...otherProps }) => {\n  const query = new URLSearchParams(useLocation().search);\n  const initialView = query.has('view') ? query.get('view') : Object.keys(views)[0];\n  const [currentView, setView] = useState(initialView);\n  return (\n    <ListViewContext.Provider value={{ views, currentView, setView }}>\n      <ListComponent\n        actions={actions}\n        pagination={views[currentView].pagination}\n        // Set initial values, but use the query string to change these values to avoid a complete refresh\n        perPage={views[initialView].perPage}\n        sort={views[initialView].sort}\n        {...otherProps}\n      >\n        {views[currentView].list}\n      </ListComponent>\n    </ListViewContext.Provider>\n  );\n};\n\nMultiViewsList.defaultProps = {\n  actions: <ListActionsWithViews />,\n  ListComponent: List\n};\n\nexport default MultiViewsList;\n"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","link","textDecoration","maxWidth","chipField","addIcon","cursor","fontSize","position","top","left","launchIcon","width","paddingRight","marginLeft","stopPropagation","e","handleClick","ChipList","props","classes","className","children","linkType","_props$linkType","component","_props$component","primaryText","appendLink","externalLinks","_props$externalLinks","rest","_excluded","useListContext","data","isLoading","getExternalLink","useGetExternalLink","createPath","useCreatePath","Component","React","createElement","LinearProgress","_extends","sanitizeListRestProps","map","record","externalLink","RecordContextProvider","value","key","id","href","target","rel","onClick","ChipField","source","color","deleteIcon","LaunchIcon","onDelete","Link","to","type","AddCircleIcon","GridList","_ref","spacing","xs","sm","md","lg","xl","_useListContext","resource","Grid","container","child","cloneElement","Children","only","item","defaultProps","grid","marginBottom","column","paddingLeft","backgroundClip","card","media","height","paddingTop","MasonryList","image","content","actions","breakpointCols","Masonry","columnClassName","imageUrl","Card","CardActionArea","CardMedia","CardContent","CardActions","action","default","1050","700","ReferenceFilterCounter","resourceContext","useResourceContext","useGetList","Fragment","Object","values","filter","d","concat","includes","length","ReferenceFilter","_ref2","_currentResource$opti","reference","inverseSource","limit","sort","label","icon","showCounters","page","perPage","currentResource","useResourceDefinition","useDataModel","resourceContextContainers","useContainers","displayedFilters","filterValues","setFilters","hideFilter","useEffect","urlSearchParams","URLSearchParams","window","location","search","fromEntries","entries","FilterList","options","undefined","itemData","itemIsUsed","forEach","containerUrl","inverseSourceData","startsWith","FilterListItem","ListViewContext","createContext","views","currentView","setView","ViewsButtons","query","useLocation","_React$useContext","useContext","_slicedToArray","_ref3","_ref4","view","set","field","order","toString","Button","ListActionsWithViews","bulkActions","basePath","exporter","filters","onUnselectItems","selectedIds","showFilter","total","_objectWithoutProperties","useTheme","useMediaQuery","breakpoints","down","resourceDefinition","TopToolbar","context","hasCreate","CreateButton","ExportButton","disabled","MultiViewsList","ListComponent","otherProps","initialView","has","get","keys","_useState2","useState","Provider","pagination","list","List"],"mappings":"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"}