{"version":3,"file":"index.es.js","sources":["../src/ChipList.js","../src/GridList.js"],"sourcesContent":["import React from 'react';\nimport {\n  ChipField,\n  useResourceContext,\n  useListContext,\n  sanitizeListRestProps,\n  linkToRecord,\n  RecordContextProvider,\n  Link\n} from 'react-admin';\nimport { makeStyles, LinearProgress } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  link: {\n    textDecoration: 'none',\n    maxWidth: '100%'\n  },\n  chipField: {\n    maxWidth: '100%'\n  },\n  addIcon: {\n    cursor: 'pointer',\n    fontSize: 35,\n    position: 'relative',\n    top: -2,\n    left: -2\n  },\n  launchIcon: {\n    width: 16,\n    paddingRight: 6,\n    marginLeft: -10\n  }\n}));\n\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst ChipList = props => {\n  const {\n    classes: classesOverride,\n    className,\n    children,\n    linkType = 'edit',\n    component = 'div',\n    primaryText,\n    appendLink,\n    externalLinks = false,\n    ...rest\n  } = props;\n  const { ids, data, loaded, basePath } = useListContext(props);\n  const resource = useResourceContext(props);\n  const getExternalLink = useGetExternalLink(externalLinks);\n\n  const classes = useStyles(props);\n  const Component = component;\n\n  if (loaded === false) {\n    return <LinearProgress />;\n  }\n\n  return (\n    <Component className={classes.root} {...sanitizeListRestProps(rest)}>\n      {ids.map(id => {\n        if (!data[id]) return null;\n        const externalLink = getExternalLink(data[id]);\n        if (externalLink) {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <a\n                href={externalLink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className={classes.link}\n                onClick={stopPropagation}\n              >\n                <ChipField\n                  record={data[id]}\n                  resource={resource}\n                  basePath={basePath}\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  deleteIcon={<LaunchIcon className={classes.launchIcon} />}\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                  // Required to display the delete icon\n                  onDelete={handleClick}\n                />\n              </a>\n            </RecordContextProvider>\n          );\n        } else if (linkType) {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <Link className={classes.link} to={linkToRecord(basePath, id, linkType)} onClick={stopPropagation}>\n                <ChipField\n                  record={data[id]}\n                  resource={resource}\n                  basePath={basePath}\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                />\n              </Link>\n            </RecordContextProvider>\n          );\n        } else {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <ChipField\n                record={data[id]}\n                resource={resource}\n                basePath={basePath}\n                source={primaryText}\n                className={classes.chipField}\n                color=\"secondary\"\n                // Workaround to force ChipField to be clickable\n                onClick={handleClick}\n              />\n            </RecordContextProvider>\n          );\n        }\n      })}\n      {appendLink && <AddCircleIcon color=\"primary\" className={classes.addIcon} onClick={appendLink} />}\n    </Component>\n  );\n};\n\nexport default ChipList;\n","import * as React from 'react';\nimport { useListContext, linkToRecord, Link } from 'react-admin';\nimport { Grid } from '@material-ui/core';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst GridList = ({ children, linkType, externalLinks, spacing, xs, sm, md, lg, xl }) => {\n  const { ids, data, basePath } = useListContext();\n  const getExternalLink = useGetExternalLink(externalLinks);\n  return (\n    <Grid container spacing={spacing}>\n      {ids.map(id => {\n        if (!data[id]) return null;\n        const externalLink = getExternalLink(data[id]);\n        let child;\n\n        if (externalLink) {\n          child = (\n            <a href={externalLink} target=\"_blank\" rel=\"noopener noreferrer\" onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                record: data[id],\n                basePath,\n                externalLink: true,\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </a>\n          );\n        } else if (linkType) {\n          child = (\n            <Link to={linkToRecord(basePath, id, linkType)} onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                record: data[id],\n                basePath,\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </Link>\n          );\n        } else {\n          child = React.cloneElement(React.Children.only(children), {\n            record: data[id],\n            basePath\n          });\n        }\n\n        return (\n          <Grid item key={id} xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\n            {child}\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nGridList.defaultProps = {\n  xs: 6,\n  spacing: 3,\n  linkType: 'edit',\n  externalLinks: false\n};\n\nexport default GridList;\n"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","link","textDecoration","maxWidth","chipField","addIcon","cursor","fontSize","position","top","left","launchIcon","width","paddingRight","marginLeft","stopPropagation","e","handleClick","ChipList","props","classes","className","children","linkType","component","primaryText","appendLink","externalLinks","rest","useListContext","ids","data","loaded","basePath","resource","useResourceContext","getExternalLink","useGetExternalLink","Component","React","LinearProgress","sanitizeListRestProps","map","id","externalLink","RecordContextProvider","value","key","href","target","rel","onClick","ChipField","record","source","color","deleteIcon","LaunchIcon","onDelete","Link","to","linkToRecord","AddCircleIcon","GridList","spacing","xs","sm","md","lg","xl","Grid","container","child","cloneElement","Children","only","item","defaultProps"],"mappings":"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"}