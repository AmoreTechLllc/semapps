{"version":3,"file":"index.cjs.js","sources":["../src/ChipList.js","../src/GridList.js","../src/MasonryList.js","../src/MultiViewsList/ListActionsWithViews.js","../src/MultiViewsList/MultiViewsList.js","../src/ReferenceFilter.js"],"sourcesContent":["import React from 'react';\nimport {\n  ChipField,\n  useResourceContext,\n  useListContext,\n  sanitizeListRestProps,\n  linkToRecord,\n  RecordContextProvider,\n  Link\n} from 'react-admin';\nimport { makeStyles, LinearProgress } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  link: {\n    textDecoration: 'none',\n    maxWidth: '100%'\n  },\n  chipField: {\n    maxWidth: '100%'\n  },\n  addIcon: {\n    cursor: 'pointer',\n    fontSize: 35,\n    position: 'relative',\n    top: -2,\n    left: -2\n  },\n  launchIcon: {\n    width: 16,\n    paddingRight: 6,\n    marginLeft: -10\n  }\n}));\n\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst ChipList = props => {\n  const {\n    classes: classesOverride,\n    className,\n    children,\n    linkType = 'edit',\n    component = 'div',\n    primaryText,\n    appendLink,\n    externalLinks = false,\n    ...rest\n  } = props;\n  const { ids, data, loaded, basePath } = useListContext(props);\n  const resource = useResourceContext(props);\n  const getExternalLink = useGetExternalLink(externalLinks);\n\n  const classes = useStyles(props);\n  const Component = component;\n\n  if (loaded === false) {\n    return <LinearProgress />;\n  }\n\n  return (\n    <Component className={classes.root} {...sanitizeListRestProps(rest)}>\n      {ids.map(id => {\n        if (!data[id]) return null;\n        const externalLink = getExternalLink(data[id]);\n        if (externalLink) {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <a\n                href={externalLink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className={classes.link}\n                onClick={stopPropagation}\n              >\n                <ChipField\n                  record={data[id]}\n                  resource={resource}\n                  basePath={basePath}\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  deleteIcon={<LaunchIcon className={classes.launchIcon} />}\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                  // Required to display the delete icon\n                  onDelete={handleClick}\n                />\n              </a>\n            </RecordContextProvider>\n          );\n        } else if (linkType) {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <Link className={classes.link} to={linkToRecord(basePath, id, linkType)} onClick={stopPropagation}>\n                <ChipField\n                  record={data[id]}\n                  resource={resource}\n                  basePath={basePath}\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                />\n              </Link>\n            </RecordContextProvider>\n          );\n        } else {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <ChipField\n                record={data[id]}\n                resource={resource}\n                basePath={basePath}\n                source={primaryText}\n                className={classes.chipField}\n                color=\"secondary\"\n                // Workaround to force ChipField to be clickable\n                onClick={handleClick}\n              />\n            </RecordContextProvider>\n          );\n        }\n      })}\n      {appendLink && <AddCircleIcon color=\"primary\" className={classes.addIcon} onClick={appendLink} />}\n    </Component>\n  );\n};\n\nexport default ChipList;\n","import * as React from 'react';\nimport { useListContext, linkToRecord, Link, RecordContextProvider } from 'react-admin';\nimport { Grid } from '@material-ui/core';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst GridList = ({ children, linkType, externalLinks, spacing, xs, sm, md, lg, xl }) => {\n  const { ids, data, basePath } = useListContext();\n  const getExternalLink = useGetExternalLink(externalLinks);\n  return (\n    <Grid container spacing={spacing}>\n      {ids.map(id => {\n        if (!data[id]) return null;\n        const externalLink = getExternalLink(data[id]);\n        let child;\n\n        if (externalLink) {\n          child = (\n            <a href={externalLink} target=\"_blank\" rel=\"noopener noreferrer\" onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                record: data[id],\n                basePath: children.props.basePath || basePath,\n                externalLink: true,\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </a>\n          );\n        } else if (linkType) {\n          child = (\n            <Link to={linkToRecord(basePath, id, linkType)} onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                record: data[id],\n                basePath: children.props.basePath || basePath,\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </Link>\n          );\n        } else {\n          child = React.cloneElement(React.Children.only(children), {\n            record: data[id],\n            basePath: children.props.basePath || basePath\n          });\n        }\n\n        return (\n          <Grid item key={id} xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\n            <RecordContextProvider value={data[id]} key={id}>\n              {child}\n            </RecordContextProvider>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nGridList.defaultProps = {\n  xs: 6,\n  spacing: 3,\n  linkType: 'edit',\n  externalLinks: false\n};\n\nexport default GridList;\n","import React from 'react';\nimport { useListContext, Link, linkToRecord } from 'react-admin';\nimport { makeStyles, Card, CardActionArea, CardMedia, CardContent, CardActions } from '@material-ui/core';\nimport Masonry from 'react-masonry-css';\n\nconst useStyles = makeStyles(() => ({\n  grid: {\n    display: 'flex',\n    marginLeft: -20,\n    marginBottom: -20,\n    width: 'auto'\n  },\n  column: {\n    paddingLeft: 20,\n    backgroundClip: 'padding-box'\n  },\n  card: {\n    marginBottom: 20\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n  }\n}));\n\n/**\n * @example\n * <List component=\"div\" perPage={50} {...props}>\n *   <MasonryList\n *     image={record => record.image}\n *     content={record => (\n *       <>\n *         <Typography variant=\"subtitle1\">{record.title}</Typography>\n *         <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{record.description}</Typography>\n *       </>\n *     )}\n *     linkType=\"show\"\n *   />\n * </List>\n */\nconst MasonryList = ({ image, content, actions, breakpointCols, linkType }) => {\n  const classes = useStyles();\n  const { ids, data, basePath } = useListContext();\n  return (\n    <Masonry breakpointCols={breakpointCols} className={classes.grid} columnClassName={classes.column}>\n      {ids.map(id => {\n        if (!data[id]) return null;\n        const imageUrl = typeof image === 'function' ? image(data[id]) : image;\n        return (\n          <Card key={id} className={classes.card}>\n            <Link to={linkToRecord(basePath, id) + '/' + linkType}>\n              <CardActionArea>\n                {imageUrl && <CardMedia className={classes.media} image={imageUrl} />}\n                {content && <CardContent>{content(data[id])}</CardContent>}\n              </CardActionArea>\n            </Link>\n            {actions && (\n              <CardActions>\n                {actions.map(action => React.createElement(action, { record: data[id], basePath }))}\n              </CardActions>\n            )}\n          </Card>\n        );\n      })}\n    </Masonry>\n  );\n};\n\nMasonryList.defaultProps = {\n  breakpointCols: { default: 3, 1050: 2, 700: 1 },\n  linkType: 'edit'\n};\n\nexport default MasonryList;\n","import React from 'react';\nimport { Button, CreateButton, ExportButton, useResourceDefinition, Link, TopToolbar } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport { useMediaQuery } from '@material-ui/core';\n\nconst ListActionsWithViews = ({\n  bulkActions,\n  basePath,\n  currentSort,\n  displayedFilters,\n  exporter,\n  filters,\n  filterValues,\n  onUnselectItems,\n  resource,\n  selectedIds,\n  showFilter,\n  total,\n  views,\n  currentView,\n  setView,\n  ...rest\n}) => {\n  const xs = useMediaQuery(theme => theme.breakpoints.down('xs'));\n  const resourceDefinition = useResourceDefinition(rest);\n  const query = new URLSearchParams(useLocation().search);\n  return (\n    <TopToolbar currentView={currentView}>\n      {views &&\n        Object.entries(views)\n          .filter(([key]) => key !== currentView)\n          .map(([key, view]) => {\n            query.set('view', key);\n            query.set('page', 1);\n            query.set('perPage', view.perPage);\n            if (view.sort) {\n              query.set('sort', view.sort.field);\n              query.set('order', view.sort.order);\n            }\n            return (\n              <Link key={key} to={'?' + query.toString()}>\n                <Button onClick={() => setView(key)} label={view.label}>\n                  {React.createElement(view.icon)}\n                </Button>\n              </Link>\n            );\n          })}\n      {filters &&\n        React.cloneElement(filters, {\n          resource,\n          showFilter,\n          displayedFilters,\n          filterValues,\n          context: 'button'\n        })}\n      {resourceDefinition.hasCreate && <CreateButton basePath={basePath} />}\n      {!xs && exporter !== false && (\n        <ExportButton\n          disabled={total === 0}\n          resource={resource}\n          sort={currentSort}\n          filter={filterValues}\n          exporter={exporter}\n        />\n      )}\n      {bulkActions &&\n        React.cloneElement(bulkActions, {\n          basePath,\n          filterValues,\n          resource,\n          selectedIds,\n          onUnselectItems\n        })}\n    </TopToolbar>\n  );\n};\n\nexport default ListActionsWithViews;\n","import React, { useState } from 'react';\nimport { List } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport ListActionsWithViews from './ListActionsWithViews';\n\nconst MultiViewsList = ({ children, actions, views, ListComponent, ...otherProps }) => {\n  const query = new URLSearchParams(useLocation().search);\n  const initialView = query.has('view') ? query.get('view') : Object.keys(views)[0];\n  const [currentView, setView] = useState(initialView);\n  return (\n    <ListComponent\n      actions={React.cloneElement(actions, { views, currentView, setView, ...otherProps })}\n      pagination={views[currentView].pagination}\n      // Set initial values, but use the query string to change these values to avoid a complete refresh\n      perPage={views[initialView].perPage}\n      sort={views[initialView].sort}\n      {...otherProps}\n    >\n      {views[currentView].list}\n    </ListComponent>\n  );\n};\n\nMultiViewsList.defaultProps = {\n  actions: <ListActionsWithViews />,\n  ListComponent: List\n};\n\nexport default MultiViewsList;\n","import React from 'react';\nimport { FilterList, FilterListItem, useGetList, getResources, useResourceContext } from 'react-admin';\nimport { shallowEqual, useSelector } from 'react-redux';\n\n/**\n * @example\n * const FilterAside = () => (\n *   <Card>\n *     <CardContent>\n *       <FilterLiveSearch source=\"pair:label\" />\n *       <ReferenceFilter reference=\"Theme\" source=\"pair:hasTopic\" inverseSource=\"pair:topicOf\" />\n *       <ReferenceFilter reference=\"Skill\" source=\"pair:offers\" inverseSource=\"pair:offeredBy\" />\n *     </CardContent>\n *   </Card>\n * );\n */\n\nconst ReferenceFilterCounter = ({ source, id }) => {\n  const resourceContext = useResourceContext();\n  const { data } = useGetList(resourceContext);\n  return (\n    <>\n      &nbsp;\n      <span className=\"filter-count\">{'(' + Object.values(data).filter(d => d[source] === id).length + ')'}</span>\n    </>\n  );\n};\n\nconst ReferenceFilter = ({ reference, source, inverseSource, limit, sort, filter, label, icon, showCounters }) => {\n  const { data, ids } = useGetList(reference, { page: 1, perPage: limit }, sort, filter);\n  const resources = useSelector(getResources, shallowEqual);\n  const currentResource = resources.filter(r => r?.name === reference)[0];\n  return (\n    <FilterList label={label || currentResource.options.label} icon={icon || React.createElement(currentResource.icon)}>\n      {ids\n        .filter(id => !inverseSource || data[id][inverseSource])\n        .map(id => (\n          <FilterListItem\n            key={id}\n            label={\n              <span className=\"filter-label\">\n                {data[id]['pair:label']}\n                {showCounters && <ReferenceFilterCounter source={source} id={id} />}\n              </span>\n            }\n            value={{ [source]: id }}\n          />\n        ))}\n    </FilterList>\n  );\n};\n\nReferenceFilter.defaultProps = {\n  limit: 25,\n  showCounters: true\n};\n\nexport default ReferenceFilter;\n"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","link","textDecoration","maxWidth","chipField","addIcon","cursor","fontSize","position","top","left","launchIcon","width","paddingRight","marginLeft","stopPropagation","e","handleClick","GridList","children","linkType","externalLinks","spacing","xs","sm","md","lg","xl","useListContext","ids","data","basePath","getExternalLink","useGetExternalLink","React","Grid","container","map","id","child","externalLink","href","target","rel","onClick","cloneElement","Children","only","record","props","Link","to","linkToRecord","item","key","RecordContextProvider","value","defaultProps","grid","marginBottom","column","paddingLeft","backgroundClip","card","media","height","paddingTop","MasonryList","image","content","actions","breakpointCols","classes","Masonry","className","columnClassName","imageUrl","Card","CardActionArea","CardMedia","CardContent","CardActions","action","createElement","ListActionsWithViews","bulkActions","currentSort","displayedFilters","exporter","filters","filterValues","onUnselectItems","resource","selectedIds","showFilter","total","views","currentView","setView","rest","useMediaQuery","breakpoints","down","resourceDefinition","useResourceDefinition","query","URLSearchParams","useLocation","search","TopToolbar","Object","entries","filter","view","set","perPage","sort","field","order","toString","Button","label","icon","context","hasCreate","CreateButton","ExportButton","disabled","MultiViewsList","ListComponent","otherProps","initialView","has","get","keys","useState","pagination","list","List","ReferenceFilterCounter","source","resourceContext","useResourceContext","useGetList","values","d","length","ReferenceFilter","reference","inverseSource","limit","showCounters","page","currentResource","useSelector","getResources","shallowEqual","r","name","FilterList","options","FilterListItem","component","primaryText","appendLink","loaded","Component","LinearProgress","sanitizeListRestProps","ChipField","color","deleteIcon","LaunchIcon","onDelete","AddCircleIcon"],"mappings":"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"}