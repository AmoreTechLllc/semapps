{"version":3,"file":"index.cjs.js","sources":["../src/ChipList.js","../src/GridList.js","../src/MasonryList.js","../src/ReferenceFilter.js","../src/MultiViewsList/ListViewContext.js","../src/MultiViewsList/ViewsButtons.js","../src/MultiViewsList/ListActionsWithViews.js","../src/MultiViewsList/MultiViewsList.js"],"sourcesContent":["import React from 'react';\nimport {\n  ChipField,\n  useResourceContext,\n  useListContext,\n  sanitizeListRestProps,\n  linkToRecord,\n  RecordContextProvider,\n  Link,\n  useTheme\n} from 'react-admin';\nimport { LinearProgress } from '@mui/material';\nimport makeStyles from '@mui/styles/makeStyles';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport LaunchIcon from '@mui/icons-material/Launch';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\nconst useStyles = makeStyles(() => { const [theme] = useTheme(); return ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  link: {\n    textDecoration: 'none',\n    maxWidth: '100%'\n  },\n  chipField: {\n    maxWidth: '100%'\n  },\n  addIcon: {\n    cursor: 'pointer',\n    fontSize: 35,\n    position: 'relative',\n    top: -2,\n    left: -2\n  },\n  launchIcon: {\n    width: 16,\n    paddingRight: 6,\n    marginLeft: -10\n  }\n})});\n\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst ChipList = props => {\n  const {\n    classes: classesOverride,\n    className,\n    children,\n    linkType = 'edit',\n    component = 'div',\n    primaryText,\n    appendLink,\n    externalLinks = false,\n    ...rest\n  } = props;\n  const { ids, data, isLoading, basePath } = useListContext(props);\n  const resource = useResourceContext(props);\n  const getExternalLink = useGetExternalLink(externalLinks);\n\n  const classes = useStyles(props);\n  const Component = component;\n\n  if (isLoading === true) {\n    return <LinearProgress />;\n  }\n\n  return (\n    <Component className={classes.root} {...sanitizeListRestProps(rest)}>\n      {ids.map(id => {\n        if (!data[id] || data[id]['_error']) return null;\n        const externalLink = getExternalLink(data[id]);\n        if (externalLink) {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <a\n                href={externalLink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className={classes.link}\n                onClick={stopPropagation}\n              >\n                <ChipField\n                  record={data[id]}\n                  resource={resource}\n                  basePath={basePath}\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  deleteIcon={<LaunchIcon className={classes.launchIcon} />}\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                  // Required to display the delete icon\n                  onDelete={handleClick}\n                />\n              </a>\n            </RecordContextProvider>\n          );\n        } else if (linkType) {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <Link className={classes.link} to={linkToRecord(basePath, id, linkType)} onClick={stopPropagation}>\n                <ChipField\n                  record={data[id]}\n                  resource={resource}\n                  basePath={basePath}\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                />\n              </Link>\n            </RecordContextProvider>\n          );\n        } else {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <ChipField\n                record={data[id]}\n                resource={resource}\n                basePath={basePath}\n                source={primaryText}\n                className={classes.chipField}\n                color=\"secondary\"\n                // Workaround to force ChipField to be clickable\n                onClick={handleClick}\n              />\n            </RecordContextProvider>\n          );\n        }\n      })}\n      {appendLink && <AddCircleIcon color=\"primary\" className={classes.addIcon} onClick={appendLink} />}\n    </Component>\n  );\n};\n\nexport default ChipList;\n","import * as React from 'react';\nimport { useListContext, linkToRecord, Link, RecordContextProvider } from 'react-admin';\nimport { Grid } from '@mui/material';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst GridList = ({ children, linkType, externalLinks, spacing, xs, sm, md, lg, xl }) => {\n  const { data, basePath } = useListContext();\n  const getExternalLink = useGetExternalLink(externalLinks);\n  return (\n    <Grid container spacing={spacing}>\n      {data.map(record => {\n        if (!record || record['_error']) return null;\n        const externalLink = getExternalLink(record);\n        let child;\n\n        if (externalLink) {\n          child = (\n            <a href={externalLink} target=\"_blank\" rel=\"noopener noreferrer\" onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                basePath: children.props.basePath || basePath,\n                externalLink: true,\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </a>\n          );\n        } else if (linkType) {\n          child = (\n            <Link to={linkToRecord(basePath, record.id, linkType)} onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                basePath: children.props.basePath || basePath,\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </Link>\n          );\n        } else {\n          child = React.cloneElement(React.Children.only(children), {\n            basePath: children.props.basePath || basePath\n          });\n        }\n\n        return (\n          <Grid item key={record.id} xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\n            <RecordContextProvider value={record}>\n              {child}\n            </RecordContextProvider>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nGridList.defaultProps = {\n  xs: 6,\n  spacing: 3,\n  linkType: 'edit',\n  externalLinks: false\n};\n\nexport default GridList;\n","import React from 'react';\nimport { useListContext, Link, linkToRecord } from 'react-admin';\nimport { Card, CardActionArea, CardMedia, CardContent, CardActions } from '@mui/material';\nimport makeStyles from '@mui/styles/makeStyles';\nimport Masonry from 'react-masonry-css';\n\nconst useStyles = makeStyles(() => ({\n  grid: {\n    display: 'flex',\n    marginLeft: -20,\n    marginBottom: -20,\n    width: 'auto'\n  },\n  column: {\n    paddingLeft: 20,\n    backgroundClip: 'padding-box'\n  },\n  card: {\n    marginBottom: 20\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n  }\n}));\n\n/**\n * @example\n * <List component=\"div\" perPage={50} {...props}>\n *   <MasonryList\n *     image={record => record.image}\n *     content={record => (\n *       <>\n *         <Typography variant=\"subtitle1\">{record.title}</Typography>\n *         <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{record.description}</Typography>\n *       </>\n *     )}\n *     linkType=\"show\"\n *   />\n * </List>\n */\nconst MasonryList = ({ image, content, actions, breakpointCols, linkType }) => {\n  const classes = useStyles();\n  const { ids, data, basePath } = useListContext();\n  return (\n    <Masonry breakpointCols={breakpointCols} className={classes.grid} columnClassName={classes.column}>\n      {ids.map(id => {\n        if (!data[id] || data[id]['_error']) return null;\n        const imageUrl = typeof image === 'function' ? image(data[id]) : image;\n        return (\n          <Card key={id} className={classes.card}>\n            <Link to={linkToRecord(basePath, id) + '/' + linkType}>\n              <CardActionArea>\n                {imageUrl && <CardMedia className={classes.media} image={imageUrl} />}\n                {content && <CardContent>{content(data[id])}</CardContent>}\n              </CardActionArea>\n            </Link>\n            {actions && (\n              <CardActions>\n                {actions.map(action => React.createElement(action, { record: data[id], basePath }))}\n              </CardActions>\n            )}\n          </Card>\n        );\n      })}\n    </Masonry>\n  );\n};\n\nMasonryList.defaultProps = {\n  breakpointCols: { default: 3, 1050: 2, 700: 1 },\n  linkType: 'edit'\n};\n\nexport default MasonryList;\n","import React, { useEffect } from 'react';\nimport { FilterList, FilterListItem, useGetList, useResourceContext, useListContext, useResourceDefinition } from 'react-admin';\nimport { useContainers, useDataModel } from '@semapps/semantic-data-provider';\n\n/**\n * @example\n * const FilterAside = () => (\n *   <Card>\n *     <CardContent>\n *       <FilterLiveSearch source=\"pair:label\" />\n *       <ReferenceFilter reference=\"Theme\" source=\"pair:hasTopic\" inverseSource=\"pair:topicOf\" />\n *       <ReferenceFilter reference=\"Skill\" source=\"pair:offers\" inverseSource=\"pair:offeredBy\" />\n *     </CardContent>\n *   </Card>\n * );\n */\n\nconst ReferenceFilterCounter = ({ source, id }) => {\n  const resourceContext = useResourceContext();\n  const { data, isLoading } = useGetList(resourceContext);\n  return (\n    <>\n      &nbsp;\n      { ! isLoading &&\n        <span className=\"filter-count\">{'(' + Object.values(data).filter(d => ([].concat(d[source])).includes(id)).length + ')'}</span>\n      }\n    </>\n  );\n};\n\nconst ReferenceFilter = ({ reference, source, inverseSource, limit, sort, filter, label, icon, showCounters }) => {\n  const { data, isLoading } = useGetList(reference, { page: 1, perPage: limit }, sort, filter);\n  const currentResource = useResourceDefinition({resource: reference});\n  const resourceContext = useResourceContext();\n  const resourceContextDataModel = useDataModel(resourceContext);\n  const resourceContextContainers = useContainers(resourceContext);\n\n  const {\n    displayedFilters,\n    filterValues,\n    setFilters,\n    hideFilter\n  } = useListContext();\n  useEffect(() => {\n    // Needed when filter item is active and its last relation is removed\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n    if (! params.filter && ! isLoading) {\n      setFilters({});\n    }\n  }, []);\n  \n  const itemIsUsed = (itemData) => {\n    if (!inverseSource) {\n      return true;\n    }\n    if (!resourceContextContainers || !itemData) {\n      return false;\n    }\n    let itemIsUsed = false;\n    Object.values(resourceContextContainers).forEach(value => {\n      value.forEach(containerUrl => {\n        [].concat(itemData[inverseSource]).forEach(inverseSourceData => {\n          if (inverseSourceData?.startsWith(containerUrl)) {\n            itemIsUsed = true;\n          }\n        })\n      })\n    });\n    return itemIsUsed;\n  }\n  \n  return (\n    <FilterList\n      label={label || currentResource?.options?.label || ''}\n      icon={icon || currentResource?.icon ? React.createElement(currentResource.icon) : undefined}\n    >\n      {data && data\n        .filter(itemData => itemIsUsed(itemData))\n        .map(itemData => (\n          <FilterListItem\n            key={itemData.id}\n            label={\n              <span className=\"filter-label\">\n                {itemData['pair:label']}\n                {showCounters && <ReferenceFilterCounter source={source} id={itemData.id} />}\n              </span>\n            }\n            value={{ [source]: itemData.id }}\n          />\n        ))}\n    </FilterList>\n  );\n};\n\nReferenceFilter.defaultProps = {\n  limit: 25,\n  showCounters: true\n};\n\nexport default ReferenceFilter;\n","import React from 'react';\n\nconst ListViewContext = React.createContext({ views: null, currentView: null, setView: () => null });\n\nexport default ListViewContext;\n","import React from 'react';\nimport { Button, Link } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport ListViewContext from './ListViewContext';\n\nconst ViewsButtons = () => {\n  const query = new URLSearchParams(useLocation().search);\n  const { views, currentView, setView } = React.useContext(ListViewContext);\n  return views\n    ? Object.entries(views)\n        .filter(([key]) => key !== currentView)\n        .map(([key, view]) => {\n          query.set('view', key);\n          query.set('page', 1);\n          query.set('perPage', view.perPage);\n          if (view.sort) {\n            query.set('sort', view.sort.field);\n            query.set('order', view.sort.order);\n          }\n          return (\n            <Link key={key} to={'?' + query.toString()}>\n              <Button onClick={() => setView(key)} label={view.label}>\n                {React.createElement(view.icon)}\n              </Button>\n            </Link>\n          );\n        })\n    : null;\n};\n\nexport default ViewsButtons;\n","import React from 'react';\nimport { CreateButton, ExportButton, useResourceDefinition, TopToolbar } from 'react-admin';\nimport { useMediaQuery } from '@mui/material';\nimport ViewsButtons from './ViewsButtons';\nimport { useTheme } from 'react-admin';\n\nconst ListActionsWithViews = ({\n  bulkActions,\n  basePath,\n  sort,\n  displayedFilters,\n  exporter,\n  filters,\n  filterValues,\n  onUnselectItems,\n  resource,\n  selectedIds,\n  showFilter,\n  total,\n  ...rest\n}) => {\n  const [theme] = useTheme();\n  const xs = useMediaQuery(() => theme.breakpoints.down('sm'));\n  const resourceDefinition = useResourceDefinition(rest);\n  return (\n    <TopToolbar>\n      <ViewsButtons />\n      {filters &&\n        React.cloneElement(filters, {\n          resource,\n          showFilter,\n          displayedFilters,\n          filterValues,\n          context: 'button'\n        })}\n      {resourceDefinition.hasCreate && <CreateButton basePath={basePath} />}\n      {!xs && exporter !== false && (\n        <ExportButton\n          disabled={total === 0}\n          resource={resource}\n          sort={sort}\n          filter={filterValues}\n          exporter={exporter}\n        />\n      )}\n      {bulkActions &&\n        React.cloneElement(bulkActions, {\n          basePath,\n          filterValues,\n          resource,\n          selectedIds,\n          onUnselectItems\n        })}\n    </TopToolbar>\n  );\n};\n\nexport default ListActionsWithViews;\n","import React, { useState } from 'react';\nimport { List } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport ListActionsWithViews from './ListActionsWithViews';\nimport ListViewContext from './ListViewContext';\n\nconst MultiViewsList = ({ children, actions, views, ListComponent, ...otherProps }) => {\n  const query = new URLSearchParams(useLocation().search);\n  const initialView = query.has('view') ? query.get('view') : Object.keys(views)[0];\n  const [currentView, setView] = useState(initialView);\n  return (\n    <ListViewContext.Provider value={{ views, currentView, setView }}>\n      <ListComponent\n        actions={actions}\n        pagination={views[currentView].pagination}\n        // Set initial values, but use the query string to change these values to avoid a complete refresh\n        perPage={views[initialView].perPage}\n        sort={views[initialView].sort}\n        {...otherProps}\n      >\n        {views[currentView].list}\n      </ListComponent>\n    </ListViewContext.Provider>\n  );\n};\n\nMultiViewsList.defaultProps = {\n  actions: <ListActionsWithViews />,\n  ListComponent: List\n};\n\nexport default MultiViewsList;\n"],"names":["useStyles","makeStyles","_slicedToArray","useTheme","root","display","flexWrap","link","textDecoration","maxWidth","chipField","addIcon","cursor","fontSize","position","top","left","launchIcon","width","paddingRight","marginLeft","stopPropagation","e","handleClick","GridList","_ref","children","linkType","externalLinks","spacing","xs","sm","md","lg","xl","_useListContext","useListContext","data","basePath","getExternalLink","useGetExternalLink","React","Grid","container","map","record","child","externalLink","createElement","href","target","rel","onClick","cloneElement","Children","only","props","Link","to","linkToRecord","id","item","key","RecordContextProvider","value","defaultProps","grid","marginBottom","column","paddingLeft","backgroundClip","card","media","height","paddingTop","MasonryList","image","content","actions","breakpointCols","classes","ids","Masonry","className","columnClassName","imageUrl","Card","CardActionArea","CardMedia","CardContent","CardActions","action","default","1050","700","ReferenceFilterCounter","source","resourceContext","useResourceContext","useGetList","isLoading","Fragment","Object","values","filter","d","concat","includes","length","ReferenceFilter","_ref2","_currentResource$opti","reference","inverseSource","limit","sort","label","icon","showCounters","page","perPage","currentResource","useResourceDefinition","resource","useDataModel","resourceContextContainers","useContainers","displayedFilters","filterValues","setFilters","hideFilter","useEffect","urlSearchParams","URLSearchParams","window","location","search","fromEntries","entries","FilterList","options","undefined","itemData","itemIsUsed","forEach","containerUrl","inverseSourceData","startsWith","FilterListItem","ListViewContext","createContext","views","currentView","setView","ViewsButtons","query","useLocation","_React$useContext","useContext","_ref3","_ref4","view","set","field","order","toString","Button","ListActionsWithViews","bulkActions","exporter","filters","onUnselectItems","selectedIds","showFilter","total","rest","_objectWithoutProperties","_excluded","theme","useMediaQuery","breakpoints","down","resourceDefinition","TopToolbar","context","hasCreate","CreateButton","ExportButton","disabled","MultiViewsList","ListComponent","otherProps","initialView","has","get","keys","_useState2","useState","Provider","_extends","pagination","list","List","_props$linkType","component","_props$component","primaryText","appendLink","_props$externalLinks","Component","LinearProgress","sanitizeListRestProps","ChipField","color","deleteIcon","LaunchIcon","onDelete","AddCircleIcon"],"mappings":"m5EAiBMA,EAAYC,EAAU,SAAC,WAAoC,OAA5BC,EAAgBC,EAAAA,WAAhB,GAAA,GAAoC,CACvEC,KAAM,CACJC,QAAS,OACTC,SAAU,QAEZC,KAAM,CACJC,eAAgB,OAChBC,SAAU,QAEZC,UAAW,CACTD,SAAU,QAEZE,QAAS,CACPC,OAAQ,UACRC,SAAU,GACVC,SAAU,WACVC,KAAM,EACNC,MAAO,GAETC,WAAY,CACVC,MAAO,GACPC,aAAc,EACdC,YAAa,QAIXC,EAAkB,SAAAC,GAAC,OAAIA,EAAED,mBAKzBE,EAAc,aC1CdF,EAAkB,SAAAC,GAAC,OAAIA,EAAED,mBAKzBE,EAAc,aAEdC,EAAW,SAAwEC,GAAA,IAArEC,IAAAA,SAAUC,IAAAA,SAAUC,IAAAA,cAAeC,IAAAA,QAASC,IAAAA,GAAIC,IAAAA,GAAIC,IAAAA,GAAIC,IAAAA,GAAIC,IAAAA,GAC9EC,EAA2BC,EAAAA,iBAAnBC,IAAAA,KAAMC,IAAAA,SACRC,EAAkBC,qBAAmBZ,GAC3C,OACEa,gBAACC,OAAD,CAAMC,WAAN,EAAgBd,QAASA,GACtBQ,EAAKO,KAAI,SAAAC,GACR,IAAKA,GAAUA,EAAM,OAAY,OAAO,KACxC,IACIC,EADEC,EAAeR,EAAgBM,GA8BrC,OA1BEC,EADEC,EAEAN,EAAAO,cAAA,IAAA,CAAGC,KAAMF,EAAcG,OAAO,SAASC,IAAI,sBAAsBC,QAAS/B,GACvEoB,EAAMY,aAAaZ,EAAMa,SAASC,KAAK7B,GAAW,CACjDY,SAAUZ,EAAS8B,MAAMlB,UAAYA,EACrCS,cAAc,EAEdK,QAAS7B,KAINI,EAEPc,gBAACgB,OAAD,CAAMC,GAAIC,EAAAA,aAAarB,EAAUO,EAAOe,GAAIjC,GAAWyB,QAAS/B,GAC7DoB,EAAMY,aAAaZ,EAAMa,SAASC,KAAK7B,GAAW,CACjDY,SAAUZ,EAAS8B,MAAMlB,UAAYA,EAErCc,QAAS7B,KAKPkB,EAAMY,aAAaZ,EAAMa,SAASC,KAAK7B,GAAW,CACxDY,SAAUZ,EAAS8B,MAAMlB,UAAYA,IAKvCG,gBAACC,OAAD,CAAMmB,MAAN,EAAWC,IAAKjB,EAAOe,GAAI9B,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,GAC7DO,gBAACsB,wBAAD,CAAuBC,MAAOnB,GAC3BC,SASftB,EAASyC,aAAe,CACtBnC,GAAI,EACJD,QAAS,EACTF,SAAU,OACVC,eAAe,GC5DjB,IAAM5B,EAAYC,EAAU,SAAC,WAAA,MAAO,CAClCiE,KAAM,CACJ7D,QAAS,OACTe,YAAa,GACb+C,cAAe,GACfjD,MAAO,QAETkD,OAAQ,CACNC,YAAa,GACbC,eAAgB,eAElBC,KAAM,CACJJ,aAAc,IAEhBK,MAAO,CACLC,OAAQ,EACRC,WAAY,cAmBVC,EAAc,SAA2DlD,GAAA,IAAxDmD,IAAAA,MAAOC,IAAAA,QAASC,IAAAA,QAASC,IAAAA,eAAgBpD,IAAAA,SACxDqD,EAAUhF,IAChBmC,EAAgCC,EAAAA,iBAAxB6C,IAAAA,IAAK5C,IAAAA,KAAMC,IAAAA,SACnB,OACEG,wBAACyC,UAAD,CAASH,eAAgBA,EAAgBI,UAAWH,EAAQd,KAAMkB,gBAAiBJ,EAAQZ,QACxFa,EAAIrC,KAAI,SAAAgB,GACP,IAAKvB,EAAKuB,IAAOvB,EAAKuB,GAAL,OAAoB,OAAO,KAC5C,IAAMyB,EAA4B,mBAAVT,EAAuBA,EAAMvC,EAAKuB,IAAOgB,EACjE,OACEnC,wBAAC6C,OAAD,CAAMxB,IAAKF,EAAIuB,UAAWH,EAAQT,MAChC9B,wBAACgB,OAAD,CAAMC,GAAIC,EAAAA,aAAarB,EAAUsB,GAAM,IAAMjC,GAC3Cc,wBAAC8C,iBAAD,KACGF,GAAY5C,wBAAC+C,YAAD,CAAWL,UAAWH,EAAQR,MAAOI,MAAOS,IACxDR,GAAWpC,EAAAA,QAACO,cAAAyC,EAADA,YAAcZ,KAAAA,EAAQxC,EAAKuB,OAG1CkB,GACCrC,EAAC,QAAAO,cAAA0C,EAAAA,YACEZ,KAAAA,EAAQlC,KAAI,SAAA+C,GAAM,OAAIlD,EAAK,QAACO,cAAc2C,EAAQ,CAAE9C,OAAQR,EAAKuB,GAAKtB,SAAAA,cAUvFqC,EAAYV,aAAe,CACzBc,eAAgB,CAAEa,QAAS,EAAGC,KAAM,EAAGC,IAAK,GAC5CnE,SAAU,QCtDZ,IAAMoE,EAAyB,SAAoBtE,GAAA,IAAjBuE,IAAAA,OAAQpC,IAAAA,GAClCqC,EAAkBC,EAAAA,qBACIC,EAAAA,EAAUA,WAACF,GAA/B5D,IAAAA,KAAM+D,IAAAA,UACd,OACE3D,UAAAO,cAAAP,EAAA,QAAA4D,SAAA,KAAA,KAEMD,GACF3D,UAAAO,cAAA,OAAA,CAAMmC,UAAU,gBAAgB,IAAMmB,OAAOC,OAAOlE,GAAMmE,QAAO,SAAAC,GAAC,MAAK,GAAGC,OAAOD,EAAET,IAAUW,SAAS/C,MAAKgD,OAAS,OAMtHC,EAAkB,SAA0FC,GAAA,IAAAC,EAAvFC,IAAAA,UAAWhB,IAAAA,OAAQiB,IAAAA,cAAeC,IAAAA,MAAOC,IAAAA,KAAMX,IAAAA,OAAQY,IAAAA,MAAOC,IAAAA,KAAMC,IAAAA,aACjEnB,EAAAA,EAAUA,WAACa,EAAW,CAAEO,KAAM,EAAGC,QAASN,GAASC,EAAMX,GAA7EnE,IAAAA,KAAM+D,IAAAA,UACRqB,EAAkBC,EAAAA,sBAAsB,CAACC,SAAUX,IACnDf,EAAkBC,EAAAA,qBACS0B,EAAAA,aAAa3B,GAC9C,IAAM4B,EAA4BC,gBAAc7B,GAEhD9D,EAKIC,EAAAA,mBAJF2F,mBACAC,iBACAC,IAAAA,aACAC,WAEFC,EAAAA,WAAU,WAER,IAAMC,EAAkB,IAAIC,gBAAgBC,OAAOC,SAASC,QAC7ClC,OAAOmC,YAAYL,EAAgBM,WACrClC,QAAYJ,GACvB6B,EAAW,MAEZ,IAsBH,OACExF,wBAACkG,aAAD,CACEvB,MAAOA,IAASK,MAAAA,GAAA,QAAJV,EAAIU,EAAiBmB,eAAjB,IAAA7B,OAAJ,EAAIA,EAA0BK,QAAS,GACnDC,KAAMA,GAAQI,MAAAA,GAAAA,EAAiBJ,KAAO5E,EAAAA,QAAMO,cAAcyE,EAAgBJ,WAAQwB,GAEjFxG,GAAQA,EACNmE,QAAO,SAAAsC,GAAQ,OA1BH,SAACA,GAClB,IAAK7B,EACH,OAAO,EAET,IAAKY,IAA8BiB,EACjC,OAAO,EAET,IAAIC,GAAa,EAUjB,OATAzC,OAAOC,OAAOsB,GAA2BmB,SAAQ,SAAAhF,GAC/CA,EAAMgF,SAAQ,SAAAC,GACZ,GAAGvC,OAAOoC,EAAS7B,IAAgB+B,SAAQ,SAAAE,GACrCA,MAAAA,GAAAA,EAAmBC,WAAWF,KAChCF,GAAa,YAKdA,EASiBA,CAAWD,MAC9BlG,KAAI,SAAAkG,GAAQ,OACXrG,wBAAC2G,iBAAD,CACEtF,IAAKgF,EAASlF,GACdwD,MACE3E,EAAAA,QAAAO,cAAA,OAAA,CAAMmC,UAAU,gBACb2D,EAAS,cACTxB,GAAgB7E,wBAACsD,EAAD,CAAwBC,OAAQA,EAAQpC,GAAIkF,EAASlF,MAG1EI,SAAUgC,KAAAA,IAAS8C,EAASlF,oHAOxCiD,EAAgB5C,aAAe,CAC7BiD,MAAO,GACPI,cAAc,GC/FhB,IAAM+B,EAAkB5G,EAAK,QAAC6G,cAAc,CAAEC,MAAO,KAAMC,YAAa,KAAMC,QAAS,WAAA,OAAM,QCGvFC,EAAe,WACnB,IAAMC,EAAQ,IAAItB,gBAAgBuB,EAAAA,cAAcpB,QAChDqB,EAAwCpH,EAAAA,QAAMqH,WAAWT,GAAjDE,IAAAA,MAAOC,IAAAA,YAAaC,IAAAA,QAC5B,OAAOF,EACHjD,OAAOoC,QAAQa,GACZ/C,QAAO,SAAA/E,GAAA,OAAAvB,EAAAuB,EAAA,GAAA,KAAmB+H,KAC1B5G,KAAI,SAAiBmH,GAAA,IAAAC,EAAA9J,EAAA6J,EAAA,GAAfjG,EAAekG,EAAA,GAAVC,EAAUD,EAAA,GAQpB,OAPAL,EAAMO,IAAI,OAAQpG,GAClB6F,EAAMO,IAAI,OAAQ,GAClBP,EAAMO,IAAI,UAAWD,EAAKzC,SACtByC,EAAK9C,OACPwC,EAAMO,IAAI,OAAQD,EAAK9C,KAAKgD,OAC5BR,EAAMO,IAAI,QAASD,EAAK9C,KAAKiD,QAG7B3H,wBAACgB,OAAD,CAAMK,IAAKA,EAAKJ,GAAI,IAAMiG,EAAMU,YAC9B5H,wBAAC6H,SAAD,CAAQlH,QAAS,WAAA,OAAMqG,EAAQ3F,IAAMsD,MAAO6C,EAAK7C,OAC9C3E,EAAK,QAACO,cAAciH,EAAK5C,WAKpC,iKCrBAkD,EAAuB,SAcvB9I,GAAA,IAbJ+I,IAAAA,YACAlI,IAAAA,SACA6E,IAAAA,KACAY,IAAAA,iBACA0C,IAAAA,SACAC,IAAAA,QACA1C,IAAAA,aACA2C,IAAAA,gBACAhD,IAAAA,SACAiD,IAAAA,YACAC,IAAAA,WACAC,IAAAA,MACGC,EACCC,EAAAvJ,EAAAwJ,GACGC,EAAPhL,EAAgBC,EAAAA,WAAhB,GAAA,GACM2B,EAAKqJ,EAAAA,eAAc,WAAA,OAAMD,EAAME,YAAYC,KAAK,SAChDC,EAAqB5D,wBAAsBqD,GACjD,OACEtI,EAAC,QAAAO,cAAAuI,aACC,KAAA9I,EAAAA,QAAAO,cAAC0G,EADH,MAEGgB,GACCjI,EAAAA,QAAMY,aAAaqH,EAAS,CAC1B/C,SAAAA,EACAkD,WAAAA,EACA9C,iBAAAA,EACAC,aAAAA,EACAwD,QAAS,WAEZF,EAAmBG,WAAahJ,EAAAA,sBAACiJ,EAAAA,aAAD,CAAcpJ,SAAUA,KACvDR,IAAmB,IAAb2I,GACNhI,EAAA,QAAAO,cAAC2I,eAAD,CACEC,SAAoB,IAAVd,EACVnD,SAAUA,EACVR,KAAMA,EACNX,OAAQwB,EACRyC,SAAUA,IAGbD,GACC/H,UAAMY,aAAamH,EAAa,CAC9BlI,SAAAA,EACA0F,aAAAA,EACAL,SAAAA,EACAiD,YAAAA,EACAD,gBAAAA,uDC7CJkB,EAAiB,SAAgEpK,KAA7DC,aAAUoD,IAAAA,QAASyE,IAAAA,MAAOuC,IAAAA,cAAkBC,EAAiBf,EAAAvJ,EAAAwJ,GAC/EtB,EAAQ,IAAItB,gBAAgBuB,EAAAA,cAAcpB,QAC1CwD,EAAcrC,EAAMsC,IAAI,QAAUtC,EAAMuC,IAAI,QAAU5F,OAAO6F,KAAK5C,GAAO,GAC/E6C,EAAAlM,EAA+BmM,EAAQA,SAACL,GAAxC,GAAOxC,EAAP4C,EAAA,GAAoB3C,EAApB2C,EAAA,GACA,OACE3J,UAAAO,cAACqG,EAAgBiD,SAAjB,CAA0BtI,MAAO,CAAEuF,MAAAA,EAAOC,YAAAA,EAAaC,QAAAA,IACrDhH,wBAACqJ,EAADS,EAAA,CACEzH,QAASA,EACT0H,WAAYjD,EAAMC,GAAagD,WAE/BhF,QAAS+B,EAAMyC,GAAaxE,QAC5BL,KAAMoC,EAAMyC,GAAa7E,MACrB4E,GAEHxC,EAAMC,GAAaiD,QAM5BZ,EAAe5H,aAAe,CAC5Ba,QAASrC,EAAC,QAAAO,cAAAuH,EADkB,MAE5BuB,cAAeY,EAAAA,uBPsBA,SAAAlJ,GAWXA,EATFwB,QASExB,EARF2B,UAQE3B,EAPF9B,aAOE8B,EAAAA,EANF7B,SAAAA,aAAW,OAJbgL,EAUInJ,EAAAA,EALFoJ,UAAAA,aAAY,MALdC,EAMEC,EAIEtJ,EAJFsJ,YACAC,EAGEvJ,EAHFuJ,WAGEvJ,EAAAA,EAFF5B,cAAAA,cARFoL,EASKjC,IACDvH,EAVJyH,GAW2C7I,EAAAA,EAAcA,eAACoB,GAAlDyB,IAAAA,IAAK5C,IAAAA,KAAM+D,IAAAA,UAAW9D,IAAAA,SACxBqF,EAAWzB,qBAAmB1C,GAC9BjB,EAAkBC,qBAAmBZ,GAErCoD,EAAUhF,EAAUwD,GACpByJ,EAAYL,EAElB,OAAkB,IAAdxG,EACK3D,UAAAO,cAACkK,EAADA,eAAP,MAIAzK,wBAACwK,EAADV,EAAA,CAAWpH,UAAWH,EAAQ5E,MAAU+M,EAAAA,sBAAsBpC,IAC3D9F,EAAIrC,KAAI,SAAAgB,GACP,IAAKvB,EAAKuB,IAAOvB,EAAKuB,GAAL,OAAoB,OAAO,KAC5C,IAAMb,EAAeR,EAAgBF,EAAKuB,IAC1C,OAAIb,EAEAN,wBAACsB,wBAAD,CAAuBC,MAAO3B,EAAKuB,GAAKE,IAAKF,GAC3CnB,EAAA,QAAAO,cAAA,IAAA,CACEC,KAAMF,EACNG,OAAO,SACPC,IAAI,sBACJgC,UAAWH,EAAQzE,KACnB6C,QAAS/B,GAEToB,wBAAC2K,YAAD,CACEvK,OAAQR,EAAKuB,GACb+D,SAAUA,EACVrF,SAAUA,EACV0D,OAAQ8G,EACR3H,UAAWH,EAAQtE,UACnB2M,MAAM,YACNC,WAAY7K,EAAAA,sBAAC8K,UAAD,CAAYpI,UAAWH,EAAQ/D,aAE3CmC,QAAS7B,EAETiM,SAAUjM,MAKTI,EAEPc,wBAACsB,wBAAD,CAAuBC,MAAO3B,EAAKuB,GAAKE,IAAKF,GAC3CnB,wBAACgB,OAAD,CAAM0B,UAAWH,EAAQzE,KAAMmD,GAAIC,EAAYA,aAACrB,EAAUsB,EAAIjC,GAAWyB,QAAS/B,GAChFoB,wBAAC2K,YAAD,CACEvK,OAAQR,EAAKuB,GACb+D,SAAUA,EACVrF,SAAUA,EACV0D,OAAQ8G,EACR3H,UAAWH,EAAQtE,UACnB2M,MAAM,YAENjK,QAAS7B,MAOfkB,wBAACsB,wBAAD,CAAuBC,MAAO3B,EAAKuB,GAAKE,IAAKF,GAC3CnB,wBAAC2K,YAAD,CACEvK,OAAQR,EAAKuB,GACb+D,SAAUA,EACVrF,SAAUA,EACV0D,OAAQ8G,EACR3H,UAAWH,EAAQtE,UACnB2M,MAAM,YAENjK,QAAS7B,QAMlBwL,GAActK,wBAACgL,EAAAA,QAAD,CAAeJ,MAAM,UAAUlI,UAAWH,EAAQrE,QAASyC,QAAS2J"}