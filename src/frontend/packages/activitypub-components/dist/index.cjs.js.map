{"version":3,"file":"index.cjs.js","sources":["../src/components/CollectionList.js","../src/components/ReferenceCollectionField.js","../src/hooks/useCollection.js","../src/hooks/useInbox.js","../src/hooks/useOutbox.js","../src/hooks/useWebfinger.js"],"sourcesContent":["import React from 'react';\nimport { useGetOne, LinearProgress } from 'react-admin';\nimport { ReferenceArrayField } from '@semapps/semantic-data-provider';\n\nconst CollectionList = ({ collectionUri, resource, children, ...rest }) => {\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<CollectionList> only accepts a single child');\n  }\n\n  // TODO use a simple fetch call, as the resource is not good and it is useless\n  const { data: collection, loading } = useGetOne(resource, collectionUri, { enabled: !!collectionUri });\n\n  if (loading) {\n    return (\n      <div style={{ marginTop: 8 }}>\n        <LinearProgress />\n      </div>\n    );\n  } else if (!collection) {\n    return null;\n  }\n\n  return (\n    <ReferenceArrayField reference={resource} record={collection} source=\"items\" {...rest}>\n      {children}\n    </ReferenceArrayField>\n  );\n};\n\nexport default CollectionList;\n","import React from 'react';\nimport CollectionList from './CollectionList';\n\nconst ReferenceCollectionField = ({ source, record, reference, children, ...rest }) => {\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceCollectionField> only accepts a single child');\n  }\n\n  if (!record || !record[source]) return null;\n\n  return (\n    <CollectionList resource={reference} collectionUri={record[source]} {...rest}>\n      {children}\n    </CollectionList>\n  );\n};\n\nReferenceCollectionField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceCollectionField;\n","import { useCallback, useMemo, useState, useEffect } from 'react';\nimport { useGetIdentity, fetchUtils } from 'react-admin';\n\nconst useCollection = predicateOrUri => {\n  const { identity } = useGetIdentity();\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(false);\n\n  const collectionUri = useMemo(() => {\n    if (predicateOrUri) {\n      if (predicateOrUri.startsWith('http')) {\n        return predicateOrUri;\n      } else if (identity?.webIdData) {\n        return identity?.webIdData?.[predicateOrUri];\n      }\n    }\n  }, [identity, predicateOrUri]);\n\n  const fetch = useCallback(async () => {\n    if (!collectionUri) return;\n\n    setLoading(true);\n    const headers = new Headers({\n      Accept: 'application/ld+json',\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    });\n\n    fetchUtils\n      .fetchJson(collectionUri, { headers })\n      .then(({ json }) => {\n        if (json && json.items) {\n          setItems(json.items);\n        } else {\n          setItems([]);\n        }\n        setError(false);\n        setLoaded(true);\n        setLoading(false);\n      })\n      .catch(() => {\n        setError(true);\n        setLoaded(true);\n        setLoading(false);\n      });\n  }, [setItems, setLoaded, setLoading, setError, collectionUri]);\n\n  useEffect(() => {\n    if (!loading && !loaded && !error) {\n      fetch();\n    }\n  }, [fetch, loading, loaded, error]);\n\n  return { items, loading, loaded, error, refetch: fetch, url: collectionUri, owner: identity?.id };\n};\n\nexport default useCollection;\n","import { useCallback, useMemo } from 'react';\nimport { useGetIdentity, fetchUtils } from 'react-admin';\nimport { buildDereferenceQuery } from '@semapps/semantic-data-provider';\n\nconst useInbox = () => {\n  const { identity } = useGetIdentity();\n\n  const inboxUrl = useMemo(() => {\n    if (identity?.webIdData) {\n      return identity?.webIdData?.inbox;\n    }\n  }, [identity]);\n\n  const sparqlEndpoint = useMemo(() => {\n    if (identity?.webIdData) {\n      return identity?.webIdData?.endpoints?.['void:sparqlEndpoint'];\n    }\n  }, [identity]);\n\n  const fetch = useCallback(\n    async ({ filters }) => {\n      if (!sparqlEndpoint || !inboxUrl) return;\n\n      const token = localStorage.getItem('token');\n      const dereferenceQuery = buildDereferenceQuery(['as:object']);\n\n      let filtersWhereQuery = '';\n      if (filters) {\n        Object.keys(filters).forEach(predicate => {\n          if (filters[predicate]) {\n            const object = filters[predicate].startsWith('http') ? `<${filters[predicate]}>` : filters[predicate];\n            filtersWhereQuery += `?s1 ${predicate} ${object} .`;\n          }\n        });\n      }\n\n      const query = `\n      PREFIX as: <https://www.w3.org/ns/activitystreams#>\n      CONSTRUCT {\n        ?s1 ?p1 ?o1 .\n        ${dereferenceQuery.construct}\n      }\n      WHERE {\n        <${inboxUrl}> as:items ?s1 .\n        ?s1 ?p1 ?o1 .\n        FILTER( (isIRI(?s1)) ) .\n        ${filtersWhereQuery}\n        ${dereferenceQuery.where}\n      }\n    `;\n\n      const { json } = await fetchUtils.fetchJson(sparqlEndpoint, {\n        method: 'POST',\n        body: query,\n        headers: new Headers({\n          Accept: 'application/ld+json',\n          Authorization: 'Bearer ' + token\n        })\n      });\n\n      if (json['@graph']) {\n        return json['@graph'];\n      } else {\n        return null;\n      }\n    },\n    [sparqlEndpoint, inboxUrl]\n  );\n\n  return { fetch, url: inboxUrl, owner: identity?.id };\n};\n\nexport default useInbox;\n","import { useCallback, useMemo } from 'react';\nimport { useGetIdentity, fetchUtils } from 'react-admin';\nimport { buildDereferenceQuery } from '@semapps/semantic-data-provider';\n\nconst useOutbox = () => {\n  const { identity } = useGetIdentity();\n\n  const outboxUrl = useMemo(() => {\n    if (identity?.webIdData) {\n      return identity?.webIdData?.outbox;\n    }\n  }, [identity]);\n\n  const sparqlEndpoint = useMemo(() => {\n    if (identity?.webIdData) {\n      return identity?.webIdData?.endpoints?.['void:sparqlEndpoint'];\n    }\n  }, [identity]);\n\n  // Post an activity to the logged user's outbox and return its URI\n  const post = useCallback(\n    async activity => {\n      const token = localStorage.getItem('token');\n      try {\n        const { headers } = await fetchUtils.fetchJson(outboxUrl, {\n          method: 'POST',\n          body: JSON.stringify({\n            '@context': 'https://www.w3.org/ns/activitystreams',\n            ...activity\n          }),\n          headers: new Headers({\n            'Content-Type': 'application/ld+json',\n            Authorization: `Bearer ${token}`\n          })\n        });\n        return headers.get('Location');\n      } catch (e) {\n        return false;\n      }\n    },\n    [outboxUrl]\n  );\n\n  const fetch = useCallback(async () => {\n    if (!sparqlEndpoint || !outboxUrl) return;\n\n    const token = localStorage.getItem('token');\n    const dereferenceQuery = buildDereferenceQuery(['as:object']);\n\n    const query = `\n      PREFIX as: <https://www.w3.org/ns/activitystreams#>\n      CONSTRUCT {\n        ?s1 ?p1 ?o1 .\n        ${dereferenceQuery.construct}\n      }\n      WHERE {\n        <${outboxUrl}> as:items ?s1 .\n        ?s1 ?p1 ?o1 .\n        ${dereferenceQuery.where}\n      }\n    `;\n\n    const { json } = await fetchUtils.fetchJson(sparqlEndpoint, {\n      method: 'POST',\n      body: query,\n      headers: new Headers({\n        Accept: 'application/ld+json',\n        Authorization: 'Bearer ' + token\n      })\n    });\n\n    if (json['@graph']) {\n      return json['@graph'];\n    } else {\n      return null;\n    }\n  }, [sparqlEndpoint, outboxUrl]);\n\n  return { post, fetch, url: outboxUrl, owner: identity?.id };\n};\n\nexport default useOutbox;\n","import { useCallback } from 'react';\nimport { fetchUtils } from 'react-admin';\n\nconst useWebfinger = () => {\n  // Post an activity to the logged user's outbox and return its URI\n  const fetch = useCallback(async id => {\n    // eslint-disable-next-line\n    const [_, username, host] = id.split('@');\n    const protocol = host.includes(':') ? 'http' : 'https';\n\n    const webfingerUrl = `${protocol}://${host}/.well-known/webfinger?resource=acct:${username}@${host}`;\n\n    try {\n      const { json } = await fetchUtils.fetchJson(webfingerUrl);\n\n      const link = json.links.find(l => l.type === 'application/activity+json');\n\n      return link ? link.href : null;\n    } catch (e) {\n      return null;\n    }\n  }, []);\n\n  return { fetch };\n};\n\nexport default useWebfinger;\n"],"names":["CollectionList","collectionUri","resource","children","rest","React","Children","count","Error","useGetOne","enabled","collection","data","loading","style","marginTop","LinearProgress","ReferenceArrayField","reference","record","source","ReferenceCollectionField","defaultProps","addLabel","predicateOrUri","identity","useGetIdentity","useState","items","setItems","setLoading","loaded","setLoaded","error","setError","useMemo","startsWith","webIdData","_identity$webIdData","fetch","useCallback","headers","Headers","Accept","Authorization","localStorage","getItem","fetchUtils","fetchJson","then","json","useEffect","refetch","url","owner","id","inboxUrl","inbox","sparqlEndpoint","_identity$webIdData2","endpoints","_identity$webIdData2$","filters","token","dereferenceQuery","buildDereferenceQuery","filtersWhereQuery","Object","keys","forEach","predicate","object","query","construct","where","method","body","outboxUrl","outbox","post","activity","JSON","stringify","get","split","username","host","protocol","includes","webfingerUrl","link","links","find","l","type","href"],"mappings":"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"}