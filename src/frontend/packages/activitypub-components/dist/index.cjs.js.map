{"version":3,"file":"index.cjs.js","sources":["../src/components/CollectionList.js","../src/components/ReferenceCollectionField.js","../src/constants.js","../src/hooks/useCollection.js","../src/hooks/useInbox.js","../src/hooks/useOutbox.js","../src/hooks/useWebfinger.js"],"sourcesContent":["import React from 'react';\nimport { useGetOne, LinearProgress } from 'react-admin';\nimport { ReferenceArrayField } from '@semapps/semantic-data-provider';\n\nconst CollectionList = ({ collectionUrl, resource, children, ...rest }) => {\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<CollectionList> only accepts a single child');\n  }\n\n  // TODO use a simple fetch call, as the resource is not good and it is useless\n  const { data: collection, loading } = useGetOne(resource, collectionUrl, { enabled: !!collectionUrl });\n\n  if (loading) {\n    return (\n      <div style={{ marginTop: 8 }}>\n        <LinearProgress />\n      </div>\n    );\n  } else if (!collection) {\n    return null;\n  }\n\n  return (\n    <ReferenceArrayField reference={resource} record={collection} source=\"items\" {...rest}>\n      {children}\n    </ReferenceArrayField>\n  );\n};\n\nexport default CollectionList;\n","import React from 'react';\nimport CollectionList from './CollectionList';\n\nconst ReferenceCollectionField = ({ source, record, reference, children, ...rest }) => {\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceCollectionField> only accepts a single child');\n  }\n\n  if (!record || !record[source]) return null;\n\n  return (\n    <CollectionList resource={reference} collectionUrl={record[source]} {...rest}>\n      {children}\n    </CollectionList>\n  );\n};\n\nReferenceCollectionField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceCollectionField;\n","export const ACTIVITY_TYPES = {\n  ACCEPT: 'Accept',\n  ADD: 'Add',\n  ANNOUNCE: 'Announce',\n  ARRIVE: 'Arrive',\n  BLOCK: 'Block',\n  CREATE: 'Create',\n  DELETE: 'Delete',\n  DISLIKE: 'Dislike',\n  FLAG: 'Flag',\n  FOLLOW: 'Follow',\n  IGNORE: 'Ignore',\n  INVITE: 'Invite',\n  JOIN: 'Join',\n  LEAVE: 'Leave',\n  LIKE: 'Like',\n  LISTEN: 'Listen',\n  MOVE: 'Move',\n  OFFER: 'Offer',\n  QUESTION: 'Question',\n  REJECT: 'Reject',\n  READ: 'Read',\n  REMOVE: 'Remove',\n  TENTATIVE_REJECT: 'TentativeReject',\n  TENTATIVE_ACCEPT: 'TentativeAccept',\n  TRAVAL: 'Travel',\n  UNDO: 'Undo',\n  UPDATE: 'Update',\n  VIEW: 'View'\n};\n\nexport const ACTOR_TYPES = {\n  APPLICATION: 'Application',\n  GROUP: 'Group',\n  ORGANIZATION: 'Organization',\n  PERSON: 'Person',\n  SERVICE: 'Service'\n};\n\nexport const OBJECT_TYPES = {\n  ARTICLE: 'Article',\n  AUDIO: 'Audio',\n  DOCUMENT: 'Document',\n  EVENT: 'Event',\n  IMAGE: 'Image',\n  NOTE: 'Note',\n  PAGE: 'Page',\n  PLACE: 'Place',\n  PROFILE: 'Profile',\n  RELATIONSHIP: 'Relationship',\n  TOMBSTONE: 'Tombstone',\n  VIDEO: 'Video'\n};\n\nexport const PUBLIC_URI = 'https://www.w3.org/ns/activitystreams#Public';\n","import { useCallback, useMemo, useState, useEffect } from 'react';\nimport { useGetIdentity, fetchUtils } from 'react-admin';\n\nconst useCollection = predicateOrUrl => {\n  const { identity } = useGetIdentity();\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(false);\n\n  const collectionUrl = useMemo(() => {\n    if (predicateOrUrl) {\n      if (predicateOrUrl.startsWith('http')) {\n        return predicateOrUrl;\n      } else if (identity?.webIdData) {\n        return identity?.webIdData?.[predicateOrUrl];\n      }\n    }\n  }, [identity, predicateOrUrl]);\n\n  const fetch = useCallback(async () => {\n    if (!collectionUrl) return;\n\n    setLoading(true);\n    const headers = new Headers({\n      Accept: 'application/ld+json',\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    });\n\n    fetchUtils\n      .fetchJson(collectionUrl, { headers })\n      .then(({ json }) => {\n        if (json && json.items) {\n          setItems(json.items);\n        } else if ( json && json.orderedItems ) {\n          setItems(json.orderedItems);\n        } else {\n          setItems([]);\n        }\n        setError(false);\n        setLoaded(true);\n        setLoading(false);\n      })\n      .catch(() => {\n        setError(true);\n        setLoaded(true);\n        setLoading(false);\n      });\n  }, [setItems, setLoaded, setLoading, setError, collectionUrl]);\n\n  useEffect(() => {\n    if (!loading && !loaded && !error) {\n      fetch();\n    }\n  }, [fetch, loading, loaded, error]);\n\n  const addItem = useCallback(\n    item => {\n      setItems(oldItems => [...oldItems, item]);\n    },\n    [setItems]\n  );\n\n  const removeItem = useCallback(\n    itemId => {\n      setItems(oldItems => oldItems.filter(item => (typeof item === 'string' ? item !== itemId : item.id !== itemId)));\n    },\n    [setItems]\n  );\n\n  return { items, loading, loaded, error, refetch: fetch, addItem, removeItem, url: collectionUrl };\n};\n\nexport default useCollection;\n","import { useCallback, useMemo } from 'react';\nimport { useGetIdentity, fetchUtils } from 'react-admin';\nimport { buildBlankNodesQuery } from '@semapps/semantic-data-provider';\n\nconst useInbox = () => {\n  const { identity } = useGetIdentity();\n\n  const inboxUrl = useMemo(() => {\n    if (identity?.webIdData) {\n      return identity?.webIdData?.inbox;\n    }\n  }, [identity]);\n\n  const sparqlEndpoint = useMemo(() => {\n    if (identity?.webIdData) {\n      return identity?.webIdData?.endpoints?.['void:sparqlEndpoint'];\n    }\n  }, [identity]);\n\n  const fetch = useCallback(\n    async ({ filters }) => {\n      if (!sparqlEndpoint || !inboxUrl) return;\n\n      const token = localStorage.getItem('token');\n      const blankNodesQuery = buildBlankNodesQuery(['as:object']);\n\n      let filtersWhereQuery = '';\n      if (filters) {\n        Object.keys(filters).forEach(predicate => {\n          if (filters[predicate]) {\n            const object = filters[predicate].startsWith('http') ? `<${filters[predicate]}>` : filters[predicate];\n            filtersWhereQuery += `?s1 ${predicate} ${object} .`;\n          }\n        });\n      }\n\n      const query = `\n        PREFIX as: <https://www.w3.org/ns/activitystreams#>\n        CONSTRUCT {\n          ?s1 ?p1 ?o1 .\n          ${blankNodesQuery.construct}\n        }\n        WHERE {\n          <${inboxUrl}> as:items ?s1 .\n          ?s1 ?p1 ?o1 .\n          FILTER( (isIRI(?s1)) ) .\n          ${filtersWhereQuery}\n          ${blankNodesQuery.where}\n        }\n      `;\n\n      const { json } = await fetchUtils.fetchJson(sparqlEndpoint, {\n        method: 'POST',\n        body: query,\n        headers: new Headers({\n          Accept: 'application/ld+json',\n          Authorization: 'Bearer ' + token\n        })\n      });\n\n      if (json['@graph']) {\n        return json['@graph'];\n      } else {\n        return null;\n      }\n    },\n    [sparqlEndpoint, inboxUrl]\n  );\n\n  return { fetch, url: inboxUrl, owner: identity?.id };\n};\n\nexport default useInbox;\n","import { useCallback, useMemo } from 'react';\nimport { useGetIdentity, fetchUtils } from 'react-admin';\nimport { buildBlankNodesQuery } from '@semapps/semantic-data-provider';\n\nconst useOutbox = () => {\n  const { identity } = useGetIdentity();\n\n  const outboxUrl = useMemo(() => {\n    if (identity?.webIdData) {\n      return identity?.webIdData?.outbox;\n    }\n  }, [identity]);\n\n  const sparqlEndpoint = useMemo(() => {\n    if (identity?.webIdData) {\n      return identity?.webIdData?.endpoints?.['void:sparqlEndpoint'];\n    }\n  }, [identity]);\n\n  // Post an activity to the logged user's outbox and return its URI\n  const post = useCallback(\n    async activity => {\n      const token = localStorage.getItem('token');\n      try {\n        const { headers } = await fetchUtils.fetchJson(outboxUrl, {\n          method: 'POST',\n          body: JSON.stringify({\n            '@context': 'https://www.w3.org/ns/activitystreams',\n            ...activity\n          }),\n          headers: new Headers({\n            'Content-Type': 'application/ld+json',\n            Authorization: `Bearer ${token}`\n          })\n        });\n        return headers.get('Location');\n      } catch (e) {\n        return false;\n      }\n    },\n    [outboxUrl]\n  );\n\n  const fetch = useCallback(async () => {\n    if (!sparqlEndpoint || !outboxUrl) return;\n\n    const token = localStorage.getItem('token');\n    const blankNodesQuery = buildBlankNodesQuery(['as:object']);\n\n    const query = `\n      PREFIX as: <https://www.w3.org/ns/activitystreams#>\n      CONSTRUCT {\n        ?s1 ?p1 ?o1 .\n        ${blankNodesQuery.construct}\n      }\n      WHERE {\n        <${outboxUrl}> as:items ?s1 .\n        ?s1 ?p1 ?o1 .\n        ${blankNodesQuery.where}\n      }\n    `;\n\n    const { json } = await fetchUtils.fetchJson(sparqlEndpoint, {\n      method: 'POST',\n      body: query,\n      headers: new Headers({\n        Accept: 'application/ld+json',\n        Authorization: 'Bearer ' + token\n      })\n    });\n\n    if (json['@graph']) {\n      return json['@graph'];\n    } else {\n      return null;\n    }\n  }, [sparqlEndpoint, outboxUrl]);\n\n  return { post, fetch, url: outboxUrl, owner: identity?.id };\n};\n\nexport default useOutbox;\n","import { useCallback } from 'react';\nimport { fetchUtils } from 'react-admin';\n\nconst useWebfinger = () => {\n  // Post an activity to the logged user's outbox and return its URI\n  const fetch = useCallback(async id => {\n    // eslint-disable-next-line\n    const [_, username, host] = id.split('@');\n    if (host) {\n      const protocol = host.includes(':') ? 'http' : 'https'; // If the host has a port, we are most likely on localhost\n      const webfingerUrl = `${protocol}://${host}/.well-known/webfinger?resource=acct:${username}@${host}`;\n\n      try {\n        const { json } = await fetchUtils.fetchJson(webfingerUrl);\n\n        const link = json.links.find(l => l.type === 'application/activity+json');\n\n        return link ? link.href : null;\n      } catch (e) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }, []);\n\n  return { fetch };\n};\n\nexport default useWebfinger;\n"],"names":["CollectionList","collectionUrl","resource","children","rest","React","Children","count","Error","useGetOne","enabled","collection","data","loading","style","marginTop","LinearProgress","ReferenceArrayField","reference","record","source","ReferenceCollectionField","defaultProps","addLabel","ACCEPT","ADD","ANNOUNCE","ARRIVE","BLOCK","CREATE","DELETE","DISLIKE","FLAG","FOLLOW","IGNORE","INVITE","JOIN","LEAVE","LIKE","LISTEN","MOVE","OFFER","QUESTION","REJECT","READ","REMOVE","TENTATIVE_REJECT","TENTATIVE_ACCEPT","TRAVAL","UNDO","UPDATE","VIEW","APPLICATION","GROUP","ORGANIZATION","PERSON","SERVICE","ARTICLE","AUDIO","DOCUMENT","EVENT","IMAGE","NOTE","PAGE","PLACE","PROFILE","RELATIONSHIP","TOMBSTONE","VIDEO","predicateOrUrl","identity","useGetIdentity","useState","items","setItems","setLoading","loaded","setLoaded","error","setError","useMemo","startsWith","webIdData","_identity$webIdData","fetch","useCallback","headers","Headers","Accept","Authorization","localStorage","getItem","fetchUtils","fetchJson","then","json","orderedItems","useEffect","addItem","item","oldItems","removeItem","itemId","filter","id","refetch","url","inboxUrl","inbox","sparqlEndpoint","_identity$webIdData2","endpoints","_identity$webIdData2$","filters","token","blankNodesQuery","buildBlankNodesQuery","filtersWhereQuery","Object","keys","forEach","predicate","object","query","construct","where","method","body","owner","outboxUrl","outbox","post","activity","JSON","stringify","get","split","username","host","protocol","includes","webfingerUrl","link","links","find","l","type","href"],"mappings":"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"}