{"version":3,"file":"index.es.js","sources":["../src/authProvider.js","../src/copyValues.js","../src/dataProvider.js","../src/httpClient.js","../src/activitypub/ActivitiesList.js","../src/activitypub/ActivityDescription.js","../src/activitypub/ActivitiesGrid.js","../src/activitypub/CollectionList.js","../src/activitypub/ActorsGrid.js","../src/inputs.js"],"sourcesContent":["const authProvider = (history, middlewareUri) => ({\n  login: params => Promise.resolve(),\n  logout: () => {\n    localStorage.removeItem('token');\n    window.location.href = `${middlewareUri}auth/logout?global=true`;\n    return Promise.resolve('/loggingout');\n  },\n  checkAuth: () => {\n    const url = new URL(window.location);\n    if (localStorage.getItem('token')) {\n      return Promise.resolve();\n    } else {\n      if (url.searchParams.has('token')) {\n        localStorage.setItem('token', url.searchParams.get('token'));\n        url.searchParams.delete('token');\n        //TODO: if other searchParams remain, we should add them here\n        history.push(url.pathname);\n        return Promise.resolve();\n      } else {\n        if (window.location.pathname != '/loggingout')\n          window.location.href = `${middlewareUri}auth?redirectUrl=` + encodeURIComponent(window.location.href);\n\n        return Promise.resolve();\n      }\n    }\n  },\n  checkError: error => Promise.resolve(),\n  getPermissions: params => {\n    if (localStorage.getItem('token')) {\n      return Promise.resolve('user');\n    } else return Promise.resolve('');\n  }\n});\n\nexport default authProvider;\n","import createDecorator from 'final-form-calculate';\n\nconst copyValues = fields => {\n  let calculations = [];\n  for (let [fromField, toField] of Object.entries(fields)) {\n    calculations.push({\n      field: fromField,\n      updates: {\n        [toField]: pairValue => pairValue\n      }\n    });\n  }\n  return createDecorator(...calculations);\n};\n\nexport default copyValues;\n","import jsonld from 'jsonld';\n\nconst getJsonContext = (ontologies, mainOntology) => {\n  let pattern = {};\n  ontologies.forEach(ontology => (pattern[ontology.prefix] = ontology.url));\n  if (mainOntology) {\n    delete pattern[mainOntology];\n    return [ontologies.find(ontology => ontology.prefix === mainOntology).context, pattern];\n  } else {\n    return pattern;\n  }\n};\n\nconst getPrefixRdf = ontologies => {\n  return ontologies.map(ontology => `PREFIX ${ontology.prefix}: <${ontology.url}>`).join('\\n');\n};\n\nconst computeSparqlQuery = ({ types, params: { query, pagination, sort, filter }, ontologies }) => {\n  let whereQuery = '';\n\n  if (filter.q && filter.q.length > 0) {\n    whereQuery += `\n      {\n        SELECT ?s1\n        WHERE {\n          ?s1 ?p1 ?o1 .\n          FILTER regex(str(?o1), \"${filter.q}\")\n          FILTER NOT EXISTS {?s1 a ?o1}\n        }\n      }\n      `;\n  }\n  if (query) {\n    Object.keys(query).forEach(predicate => {\n      const value = query[predicate].startsWith('http') ? `<${query[predicate]}>` : query[predicate];\n      whereQuery += `?s1 ${predicate} ${value} .`;\n    });\n  }\n  return `\n    ${getPrefixRdf(ontologies)}\n    CONSTRUCT {\n      ?s1 ?p2 ?o2\n    }\n    WHERE {\n      ${whereQuery}\n      ?s1 a ?type .\n      FILTER( ?type IN (${types.join(', ')}) ) .\n      FILTER( (isIRI(?s1)) ) .\n      ?s1 ?p2 ?o2 .\n    }\n    # TODO try to make pagination work in SPARQL as this doesn't work.\n    # LIMIT ${pagination.perPage}\n    # OFFSET ${(pagination.page - 1) * pagination.perPage}\n  `;\n};\n\nconst dataProvider = ({ sparqlEndpoint, httpClient, resources, ontologies, mainOntology }) => ({\n  getList: async (resourceId, params) => {\n    if (!resources[resourceId]) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n    if (params.id || params['@id'] || !resources[resourceId].types) {\n      /*\n       * Query the container\n       */\n      const url = params.id || params['@id'] || resources[resourceId].containerUri;\n      const { json } = await httpClient(url);\n\n      const listProperties = ['ldp:contains', 'as:orderedItems', 'orderedItems', 'as:items', 'items'];\n      const listProperty = listProperties.find(p => json[p]);\n      if (!listProperty) throw new Error('Unknown list type');\n\n      let returnData = json[listProperty].map(item => {\n        item.id = item.id || item['@id'];\n        return item;\n      });\n\n      if (params.pagination) {\n        returnData = returnData.slice(\n          (params.pagination.page - 1) * params.pagination.perPage,\n          params.pagination.page * params.pagination.perPage\n        );\n      }\n\n      return { data: returnData, total: json[listProperty].length };\n    } else {\n      /*\n       * Do a SPARQL search\n       */\n      const sparqlQuery = computeSparqlQuery({\n        types: resources[resourceId].types,\n        params: { ...params, query: resources[resourceId].query },\n        ontologies\n      });\n\n      const { json } = await httpClient(sparqlEndpoint, {\n        method: 'POST',\n        body: sparqlQuery\n      });\n\n      const compactJson = await jsonld.compact(json, getJsonContext(ontologies, mainOntology));\n\n      if (Object.keys(compactJson).length === 1) {\n        // If we have only the context, it means there is no match\n        return { data: [], total: 0 };\n      } else if (!compactJson['@graph']) {\n        // If we have several fields but no @graph, there is a single match\n        compactJson.id = compactJson['@id'];\n        return { data: [compactJson], total: 1 };\n      } else {\n        const returnData = compactJson['@graph']\n          .map(item => {\n            item.id = item.id || item['@id'];\n            return item;\n          })\n          .slice(\n            (params.pagination.page - 1) * params.pagination.perPage,\n            params.pagination.page * params.pagination.perPage\n          );\n\n        return { data: returnData, total: compactJson['@graph'].length };\n      }\n    }\n  },\n  getOne: async (resourceId, params) => {\n    let { json } = await httpClient(params.id);\n    json.id = json.id || json['@id'];\n    return { data: json };\n  },\n  getMany: async (resourceId, params) => {\n    let returnData = [];\n\n    for (let id of params.ids) {\n      id = typeof id === 'object' ? id['@id'] : id;\n\n      let { json } = await httpClient(id);\n      json.id = json.id || json['@id'];\n      returnData.push(json);\n    }\n\n    return { data: returnData };\n  },\n  getManyReference: (resourceId, params) => {\n    throw new Error('getManyReference is not implemented yet');\n  },\n  create: async (resourceId, params) => {\n    if (!resources[resourceId]) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n    const { headers } = await httpClient(resources[resourceId].containerUri, {\n      method: 'POST',\n      body: JSON.stringify({\n        '@context': getJsonContext(ontologies, mainOntology),\n        '@type': resources[resourceId].types,\n        ...params.data\n      })\n    });\n\n    // Retrieve newly-created resource\n    const resourceUri = headers.get('Location');\n    let { json } = await httpClient(resourceUri);\n    json.id = json.id || json['@id'];\n    return { data: json };\n  },\n  update: async (resourceId, params) => {\n    await httpClient(params.id, {\n      method: 'PATCH',\n      body: JSON.stringify(params.data)\n    });\n\n    return { data: params.data };\n  },\n  updateMany: (resourceId, params) => {\n    throw new Error('updateMany is not implemented yet');\n  },\n  delete: async (resourceId, params) => {\n    await httpClient(params.id, {\n      method: 'DELETE'\n    });\n\n    return { data: { id: params.id } };\n  },\n  deleteMany: (resourceId, params) => {\n    throw new Error('deleteMany is not implemented yet');\n  }\n});\n\nexport default dataProvider;\n","import { fetchUtils } from 'react-admin';\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) options.headers = new Headers();\n\n  switch (options.method) {\n    case 'POST':\n    case 'PATCH':\n      options.headers.set('Accept', 'application/ld+json');\n      options.headers.set('Content-Type', 'application/ld+json');\n      break;\n\n    case 'DELETE':\n      break;\n\n    case 'GET':\n    default:\n      options.headers.set('Accept', 'application/ld+json');\n      break;\n  }\n\n  const token = localStorage.getItem('token');\n  options.headers.set('Authorization', `Bearer ${token}`);\n  return fetchUtils.fetchJson(url, options);\n};\n\nexport default httpClient;\n","import React from 'react';\nimport { useQueryWithStore } from 'react-admin';\n\nconst ActivitiesList = ({ children, source, record = {} }) => {\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ActivitiesList> only accepts a single child');\n  }\n\n  const { data } = useQueryWithStore({\n    type: 'getList',\n    resource: 'Activity',\n    payload: { id: record[source] }\n  });\n\n  if (!data) return null;\n\n  const activities = data.reduce((o, activity) => ({ ...o, [activity.id]: activity }), {});\n\n  return React.cloneElement(children, {\n    resource: 'Activity',\n    currentSort: { field: 'id', order: 'ASC' },\n    data: activities,\n    ids: Object.keys(activities),\n    basePath: '/Activity'\n  });\n};\n\nexport default ActivitiesList;\n","import React from 'react';\nimport { useReference, LinearProgress, Link } from 'react-admin';\n\nconst parseDescriptionFromActivity = activity => {\n  switch (activity.type) {\n    case 'Create':\n      return {\n        description: \"A posté l'actualité\",\n        reference: { resource: 'Note', id: activity.object.id, value: activity.object.name, basePath: '/Note' }\n      };\n    case 'Update':\n      return {\n        description: \"A mis à jour l'actualité\",\n        reference: { resource: 'Note', id: activity.object.id, value: activity.object.name, basePath: '/Note' }\n      };\n    case 'Delete':\n      return {\n        description: 'A effacé un objet'\n      };\n    case 'Follow':\n      return {\n        description: \"A suivi l'action\",\n        reference: { resource: 'Project', id: activity.object, source: 'name', basePath: '/Project' }\n      };\n    default:\n      return {\n        description: \"Type d'action inconnu\"\n      };\n  }\n};\n\nconst ActivityDescriptionReference = ({ resource, id, source, basePath }) => {\n  const { referenceRecord } = useReference({ reference: resource, id });\n  if (!referenceRecord) {\n    return <LinearProgress />;\n  } else {\n    return <Link to={`${basePath}/${encodeURIComponent(id)}`}>{referenceRecord[source]}</Link>;\n  }\n};\n\nconst ActivityDescription = ({ record }) => {\n  const { description, reference } = parseDescriptionFromActivity(record);\n  return (\n    <span>\n      {description}\n      &nbsp;\n      {reference ? (\n        reference.value ? (\n          <Link to={`${reference.basePath}/${encodeURIComponent(reference.id)}`}>{reference.value}</Link>\n        ) : (\n          <ActivityDescriptionReference {...reference} />\n        )\n      ) : null}\n    </span>\n  );\n};\n\nexport default ActivityDescription;\n","import React from 'react';\nimport { Datagrid, DateField, ReferenceField, TextField } from 'react-admin';\nimport ActivityDescription from './ActivityDescription';\n\nconst ActivitiesGrid = props => (\n  <Datagrid {...props}>\n    <DateField source=\"published\" showTime label=\"Date\" />\n    <ReferenceField basePath=\"/Actor\" reference=\"Actor\" source=\"actor\" label=\"Acteur\">\n      <TextField source=\"name\" />\n    </ReferenceField>\n    <ActivityDescription label=\"Description\" />\n  </Datagrid>\n);\n\nexport default ActivitiesGrid;\n","import React from 'react';\nimport { useQueryWithStore, useGetMany } from 'react-admin';\n\nconst ActorsList = ({ ids, children }) => {\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ActorsList> only accepts a single child');\n  }\n\n  const { data } = useGetMany('Actor', ids);\n\n  const actors = data.filter(actor => actor).reduce((o, actor) => ({ ...o, [actor.id]: actor }), {});\n\n  return React.cloneElement(children, {\n    resource: 'Actor',\n    currentSort: { field: 'id', order: 'ASC' },\n    data: actors,\n    ids: Object.keys(actors),\n    basePath: '/Actor'\n  });\n};\n\nconst CollectionList = ({ children, source, record }) => {\n  const { data } = useQueryWithStore({\n    type: 'getOne',\n    resource: 'Collection',\n    payload: { id: record[source] }\n  });\n\n  return data && data.items.length > 0 ? <ActorsList ids={data.items}>{children}</ActorsList> : null;\n};\n\nexport default CollectionList;\n","import React from 'react';\nimport { Datagrid, ShowButton, TextField } from 'react-admin';\n\nconst ActorsGrid = props => (\n  <Datagrid rowClick=\"show\" {...props}>\n    <TextField source=\"name\" label=\"Nom\" />\n    <ShowButton basePath=\"/Actor\" />\n  </Datagrid>\n);\n\nexport default ActorsGrid;\n","import React from 'react';\nimport { ReferenceArrayInput, TextInput, DateTimeInput as RaDateTimeInput } from 'react-admin';\n\nconst selectValue = value => {\n  if (typeof value === 'object' && value['@value']) {\n    return value['@value'];\n  } else {\n    return value;\n  }\n};\n\nexport const JsonLdReferenceInput = props => (\n  <ReferenceArrayInput\n    {...props}\n    format={value => {\n      // If there is no value, return immediately\n      if (!value) return value;\n      // if the linked field value is not an array, turns it into an array.\n      // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n      // and the ReferenceArrayInput component only accept arrays\n      if (!Array.isArray(value)) value = [value];\n      // If a format prop was defined, apply it to the array\n      if (props.format) value = props.format(value);\n      // If the values are objects with @id field, turn it to a simple string\n      return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n    }}\n  />\n);\n\nexport const UriInput = props => (\n  <TextInput\n    {...props}\n    format={value => {\n      // If the value has the format { @id: ... }, convert it to a string\n      if (typeof value === 'object') value = value['@id'];\n      // If a format prop was defined, apply it to the string\n      if (props.format) value = props.format(value);\n      return value;\n    }}\n  />\n);\n\nexport const DateTimeInput = props => (\n  <RaDateTimeInput\n    {...props}\n    format={value => {\n      value = selectValue(value);\n      if (value) return value.replace(' ', 'T');\n    }}\n  />\n);\n\nexport const DateField = props => {\n  return <span>{selectValue(props.record[props.source]).replace('T', ' ')}</span>;\n};\n\nexport const StringField = ({ source, record = {} }) => <span>{selectValue(record[source])}</span>;\n"],"names":["authProvider","history","middlewareUri","login","params","Promise","resolve","logout","localStorage","removeItem","window","location","href","checkAuth","url","URL","getItem","searchParams","has","setItem","get","push","pathname","encodeURIComponent","checkError","error","getPermissions","copyValues","fields","calculations","Object","entries","fromField","toField","field","updates","pairValue","createDecorator","getJsonContext","ontologies","mainOntology","pattern","forEach","ontology","prefix","find","context","computeSparqlQuery","types","query","pagination","filter","sort","whereQuery","q","length","keys","predicate","value","startsWith","map","join","getPrefixRdf","perPage","page","dataProvider","sparqlEndpoint","httpClient","resources","getList","resourceId","id","containerUri","json","listProperty","p","Error","returnData","item","slice","data","total","sparqlQuery","method","body","jsonld","compact","compactJson","getOne","getMany","ids","_typeof","getManyReference","create","JSON","stringify","headers","resourceUri","update","updateMany","deleteMany","options","Headers","set","token","fetchUtils","fetchJson","ActivitiesList","children","source","record","React","Children","count","useQueryWithStore","type","resource","payload","activities","reduce","o","activity","cloneElement","currentSort","order","basePath","ActivityDescriptionReference","referenceRecord","useReference","reference","Link","to","LinearProgress","ActivityDescription","description","object","name","parseDescriptionFromActivity","ActivitiesGrid","props","Datagrid","DateField","showTime","label","ReferenceField","TextField","ActorsList","actors","useGetMany","actor","CollectionList","items","ActorsGrid","rowClick","ShowButton","selectValue","JsonLdReferenceInput","ReferenceArrayInput","format","Array","isArray","v","UriInput","TextInput","DateTimeInput","RaDateTimeInput","replace","StringField"],"mappings":"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"}