{"version":3,"file":"index.cjs.js","sources":["../src/dataProvider.js","../src/activitypub/ActivityDescription.js","../src/activitypub/CollectionList.js","../src/inputs.js","../src/activitypub/ActivitiesGrid.js","../src/activitypub/ActivitiesList.js","../src/activitypub/ActorsGrid.js","../src/authProvider.js","../src/copyValues.js","../src/httpClient.js"],"sourcesContent":["import jsonld from 'jsonld';\n\nconst getJsonContext = (ontologies, mainOntology) => {\n  let pattern = {};\n  ontologies.forEach(ontology => (pattern[ontology.prefix] = ontology.url));\n  if (mainOntology) {\n    delete pattern[mainOntology];\n    return [ontologies.find(ontology => ontology.prefix === mainOntology).context, pattern];\n  } else {\n    return pattern;\n  }\n};\n\nconst getPrefixRdf = ontologies => {\n  return ontologies.map(ontology => `PREFIX ${ontology.prefix}: <${ontology.url}>`).join('\\n');\n};\n\nconst computeSparqlQuery = ({ types, params: { query, pagination, sort, filter }, ontologies }) => {\n  let whereQuery = '';\n\n  if (filter.q && filter.q.length > 0) {\n    whereQuery += `\n      {\n        SELECT ?s1\n        WHERE {\n          ?s1 ?p1 ?o1 .\n          FILTER regex(str(?o1), \"${filter.q}\")\n          FILTER NOT EXISTS {?s1 a ?o1}\n        }\n      }\n      `;\n  }\n  if (query) {\n    Object.keys(query).forEach(predicate => {\n      const value = query[predicate].startsWith('http') ? `<${query[predicate]}>` : query[predicate];\n      whereQuery += `?s1 ${predicate} ${value} .`;\n    });\n  }\n  return `\n    ${getPrefixRdf(ontologies)}\n    CONSTRUCT {\n      ?s1 ?p2 ?o2\n    }\n    WHERE {\n      ${whereQuery}\n      ?s1 a ?type .\n      FILTER( ?type IN (${types.join(', ')}) ) .\n      FILTER( (isIRI(?s1)) ) .\n      ?s1 ?p2 ?o2 .\n    }\n    # TODO try to make pagination work in SPARQL as this doesn't work.\n    # LIMIT ${pagination.perPage}\n    # OFFSET ${(pagination.page - 1) * pagination.perPage}\n  `;\n};\n\nconst dataProvider = ({ sparqlEndpoint, httpClient, resources, ontologies, mainOntology }) => ({\n  getList: async (resourceId, params) => {\n    if (!resources[resourceId]) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n    if (params.id || params['@id'] || !resources[resourceId].types) {\n      /*\n       * Query the container\n       */\n      const url = params.id || params['@id'] || resources[resourceId].containerUri;\n      const { json } = await httpClient(url);\n\n      const listProperties = ['ldp:contains', 'as:orderedItems', 'orderedItems', 'as:items', 'items'];\n      const listProperty = listProperties.find(p => json[p]);\n      if (!listProperty) throw new Error('Unknown list type');\n\n      let returnData = json[listProperty].map(item => {\n        item.id = item.id || item['@id'];\n        return item;\n      });\n\n      if (params.pagination) {\n        returnData = returnData.slice(\n          (params.pagination.page - 1) * params.pagination.perPage,\n          params.pagination.page * params.pagination.perPage\n        );\n      }\n\n      return { data: returnData, total: json[listProperty].length };\n    } else {\n      /*\n       * Do a SPARQL search\n       */\n      const sparqlQuery = computeSparqlQuery({\n        types: resources[resourceId].types,\n        params: { ...params, query: resources[resourceId].query },\n        ontologies\n      });\n\n      const { json } = await httpClient(sparqlEndpoint, {\n        method: 'POST',\n        body: sparqlQuery\n      });\n\n      const compactJson = await jsonld.compact(json, getJsonContext(ontologies, mainOntology));\n\n      if (Object.keys(compactJson).length === 1) {\n        // If we have only the context, it means there is no match\n        return { data: [], total: 0 };\n      } else if (!compactJson['@graph']) {\n        // If we have several fields but no @graph, there is a single match\n        compactJson.id = compactJson['@id'];\n        return { data: [compactJson], total: 1 };\n      } else {\n        const returnData = compactJson['@graph']\n          .map(item => {\n            item.id = item.id || item['@id'];\n            return item;\n          })\n          .slice(\n            (params.pagination.page - 1) * params.pagination.perPage,\n            params.pagination.page * params.pagination.perPage\n          );\n\n        return { data: returnData, total: compactJson['@graph'].length };\n      }\n    }\n  },\n  getOne: async (resourceId, params) => {\n    let { json } = await httpClient(params.id);\n    json.id = json.id || json['@id'];\n    return { data: json };\n  },\n  getMany: async (resourceId, params) => {\n    let returnData = [];\n\n    for (let id of params.ids) {\n      id = typeof id === 'object' ? id['@id'] : id;\n\n      let { json } = await httpClient(id);\n      json.id = json.id || json['@id'];\n      returnData.push(json);\n    }\n\n    return { data: returnData };\n  },\n  getManyReference: (resourceId, params) => {\n    throw new Error('getManyReference is not implemented yet');\n  },\n  create: async (resourceId, params) => {\n    if (!resources[resourceId]) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n    const { headers } = await httpClient(resources[resourceId].containerUri, {\n      method: 'POST',\n      body: JSON.stringify({\n        '@context': getJsonContext(ontologies, mainOntology),\n        '@type': resources[resourceId].types,\n        ...params.data\n      })\n    });\n\n    // Retrieve newly-created resource\n    const resourceUri = headers.get('Location');\n    let { json } = await httpClient(resourceUri);\n    json.id = json.id || json['@id'];\n    return { data: json };\n  },\n  update: async (resourceId, params) => {\n    await httpClient(params.id, {\n      method: 'PATCH',\n      body: JSON.stringify(params.data)\n    });\n\n    return { data: params.data };\n  },\n  updateMany: (resourceId, params) => {\n    throw new Error('updateMany is not implemented yet');\n  },\n  delete: async (resourceId, params) => {\n    await httpClient(params.id, {\n      method: 'DELETE'\n    });\n\n    return { data: { id: params.id } };\n  },\n  deleteMany: (resourceId, params) => {\n    throw new Error('deleteMany is not implemented yet');\n  }\n});\n\nexport default dataProvider;\n","import React from 'react';\nimport { useReference, LinearProgress, Link } from 'react-admin';\n\nconst parseDescriptionFromActivity = activity => {\n  switch (activity.type) {\n    case 'Create':\n      return {\n        description: \"A posté l'actualité\",\n        reference: { resource: 'Note', id: activity.object.id, value: activity.object.name, basePath: '/Note' }\n      };\n    case 'Update':\n      return {\n        description: \"A mis à jour l'actualité\",\n        reference: { resource: 'Note', id: activity.object.id, value: activity.object.name, basePath: '/Note' }\n      };\n    case 'Delete':\n      return {\n        description: 'A effacé un objet'\n      };\n    case 'Follow':\n      return {\n        description: \"A suivi l'action\",\n        reference: { resource: 'Project', id: activity.object, source: 'name', basePath: '/Project' }\n      };\n    default:\n      return {\n        description: \"Type d'action inconnu\"\n      };\n  }\n};\n\nconst ActivityDescriptionReference = ({ resource, id, source, basePath }) => {\n  const { referenceRecord } = useReference({ reference: resource, id });\n  if (!referenceRecord) {\n    return <LinearProgress />;\n  } else {\n    return <Link to={`${basePath}/${encodeURIComponent(id)}`}>{referenceRecord[source]}</Link>;\n  }\n};\n\nconst ActivityDescription = ({ record }) => {\n  const { description, reference } = parseDescriptionFromActivity(record);\n  return (\n    <span>\n      {description}\n      &nbsp;\n      {reference ? (\n        reference.value ? (\n          <Link to={`${reference.basePath}/${encodeURIComponent(reference.id)}`}>{reference.value}</Link>\n        ) : (\n          <ActivityDescriptionReference {...reference} />\n        )\n      ) : null}\n    </span>\n  );\n};\n\nexport default ActivityDescription;\n","import React from 'react';\nimport { useQueryWithStore, useGetMany } from 'react-admin';\n\nconst ActorsList = ({ ids, children }) => {\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ActorsList> only accepts a single child');\n  }\n\n  const { data } = useGetMany('Actor', ids);\n\n  const actors = data.filter(actor => actor).reduce((o, actor) => ({ ...o, [actor.id]: actor }), {});\n\n  return React.cloneElement(children, {\n    resource: 'Actor',\n    currentSort: { field: 'id', order: 'ASC' },\n    data: actors,\n    ids: Object.keys(actors),\n    basePath: '/Actor'\n  });\n};\n\nconst CollectionList = ({ children, source, record }) => {\n  const { data } = useQueryWithStore({\n    type: 'getOne',\n    resource: 'Collection',\n    payload: { id: record[source] }\n  });\n\n  return data && data.items.length > 0 ? <ActorsList ids={data.items}>{children}</ActorsList> : null;\n};\n\nexport default CollectionList;\n","import React from 'react';\nimport { ReferenceArrayInput, TextInput, DateTimeInput as RaDateTimeInput } from 'react-admin';\n\nconst selectValue = value => {\n  if (typeof value === 'object' && value['@value']) {\n    return value['@value'];\n  } else {\n    return value;\n  }\n};\n\nexport const JsonLdReferenceInput = props => (\n  <ReferenceArrayInput\n    {...props}\n    format={value => {\n      // If there is no value, return immediately\n      if (!value) return value;\n      // if the linked field value is not an array, turns it into an array.\n      // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n      // and the ReferenceArrayInput component only accept arrays\n      if (!Array.isArray(value)) value = [value];\n      // If a format prop was defined, apply it to the array\n      if (props.format) value = props.format(value);\n      // If the values are objects with @id field, turn it to a simple string\n      return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n    }}\n  />\n);\n\nexport const UriInput = props => (\n  <TextInput\n    {...props}\n    format={value => {\n      // If the value has the format { @id: ... }, convert it to a string\n      if (typeof value === 'object') value = value['@id'];\n      // If a format prop was defined, apply it to the string\n      if (props.format) value = props.format(value);\n      return value;\n    }}\n  />\n);\n\nexport const DateTimeInput = props => (\n  <RaDateTimeInput\n    {...props}\n    format={value => {\n      value = selectValue(value);\n      if (value) return value.replace(' ', 'T');\n    }}\n  />\n);\n\nexport const DateField = props => {\n  return <span>{selectValue(props.record[props.source]).replace('T', ' ')}</span>;\n};\n\nexport const StringField = ({ source, record = {} }) => <span>{selectValue(record[source])}</span>;\n","import React from 'react';\nimport { Datagrid, DateField, ReferenceField, TextField } from 'react-admin';\nimport ActivityDescription from './ActivityDescription';\n\nconst ActivitiesGrid = props => (\n  <Datagrid {...props}>\n    <DateField source=\"published\" showTime label=\"Date\" />\n    <ReferenceField basePath=\"/Actor\" reference=\"Actor\" source=\"actor\" label=\"Acteur\">\n      <TextField source=\"name\" />\n    </ReferenceField>\n    <ActivityDescription label=\"Description\" />\n  </Datagrid>\n);\n\nexport default ActivitiesGrid;\n","import React from 'react';\nimport { useQueryWithStore } from 'react-admin';\n\nconst ActivitiesList = ({ children, source, record = {} }) => {\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ActivitiesList> only accepts a single child');\n  }\n\n  const { data } = useQueryWithStore({\n    type: 'getList',\n    resource: 'Activity',\n    payload: { id: record[source] }\n  });\n\n  if (!data) return null;\n\n  const activities = data.reduce((o, activity) => ({ ...o, [activity.id]: activity }), {});\n\n  return React.cloneElement(children, {\n    resource: 'Activity',\n    currentSort: { field: 'id', order: 'ASC' },\n    data: activities,\n    ids: Object.keys(activities),\n    basePath: '/Activity'\n  });\n};\n\nexport default ActivitiesList;\n","import React from 'react';\nimport { Datagrid, ShowButton, TextField } from 'react-admin';\n\nconst ActorsGrid = props => (\n  <Datagrid rowClick=\"show\" {...props}>\n    <TextField source=\"name\" label=\"Nom\" />\n    <ShowButton basePath=\"/Actor\" />\n  </Datagrid>\n);\n\nexport default ActorsGrid;\n","const authProvider = (history, middlewareUri) => ({\n  login: params => Promise.resolve(),\n  logout: () => {\n    localStorage.removeItem('token');\n    window.location.href = `${middlewareUri}auth/logout?global=true`;\n    return Promise.resolve('/loggingout');\n  },\n  checkAuth: () => {\n    const url = new URL(window.location);\n    if (localStorage.getItem('token')) {\n      return Promise.resolve();\n    } else {\n      if (url.searchParams.has('token')) {\n        localStorage.setItem('token', url.searchParams.get('token'));\n        url.searchParams.delete('token');\n        //TODO: if other searchParams remain, we should add them here\n        history.push(url.pathname);\n        return Promise.resolve();\n      } else {\n        if (window.location.pathname != '/loggingout')\n          window.location.href = `${middlewareUri}auth?redirectUrl=` + encodeURIComponent(window.location.href);\n\n        return Promise.resolve();\n      }\n    }\n  },\n  checkError: error => Promise.resolve(),\n  getPermissions: params => {\n    if (localStorage.getItem('token')) {\n      return Promise.resolve('user');\n    } else return Promise.resolve('');\n  }\n});\n\nexport default authProvider;\n","import createDecorator from 'final-form-calculate';\n\nconst copyValues = fields => {\n  let calculations = [];\n  for (let [fromField, toField] of Object.entries(fields)) {\n    calculations.push({\n      field: fromField,\n      updates: {\n        [toField]: pairValue => pairValue\n      }\n    });\n  }\n  return createDecorator(...calculations);\n};\n\nexport default copyValues;\n","import { fetchUtils } from 'react-admin';\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) options.headers = new Headers();\n\n  switch (options.method) {\n    case 'POST':\n    case 'PATCH':\n      options.headers.set('Accept', 'application/ld+json');\n      options.headers.set('Content-Type', 'application/ld+json');\n      break;\n\n    case 'DELETE':\n      break;\n\n    case 'GET':\n    default:\n      options.headers.set('Accept', 'application/ld+json');\n      break;\n  }\n\n  const token = localStorage.getItem('token');\n  options.headers.set('Authorization', `Bearer ${token}`);\n  return fetchUtils.fetchJson(url, options);\n};\n\nexport default httpClient;\n"],"names":["getJsonContext","ontologies","mainOntology","pattern","forEach","ontology","prefix","url","find","context","computeSparqlQuery","types","params","query","pagination","filter","sort","whereQuery","q","length","Object","keys","predicate","value","startsWith","map","join","getPrefixRdf","perPage","page","ActivityDescriptionReference","resource","id","source","basePath","referenceRecord","useReference","reference","React","Link","to","encodeURIComponent","LinearProgress","ActivityDescription","activity","type","description","object","name","parseDescriptionFromActivity","record","ActorsList","ids","children","Children","count","Error","actors","useGetMany","data","actor","reduce","o","cloneElement","currentSort","field","order","selectValue","_typeof","props","Datagrid","DateField","showTime","label","ReferenceField","TextField","useQueryWithStore","payload","activities","rowClick","ShowButton","items","replace","RaDateTimeInput","format","ReferenceArrayInput","Array","isArray","v","TextInput","history","middlewareUri","login","Promise","resolve","logout","localStorage","removeItem","window","location","href","checkAuth","URL","getItem","searchParams","has","setItem","get","push","pathname","checkError","error","getPermissions","fields","calculations","entries","fromField","toField","updates","pairValue","createDecorator","sparqlEndpoint","httpClient","resources","getList","resourceId","containerUri","json","listProperty","p","returnData","item","slice","total","sparqlQuery","method","body","jsonld","compact","compactJson","getOne","getMany","getManyReference","create","JSON","stringify","headers","resourceUri","update","updateMany","deleteMany","options","Headers","set","token","fetchUtils","fetchJson"],"mappings":"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"}