{"version":3,"file":"index.es.js","sources":["../src/fields/ImageField.js","../src/fields/ReferenceArrayField.js","../src/fields/ReferenceField.js","../src/dataHandling/FilterHandler.js","../src/dataHandling/GroupedReferenceHandler.js","../src/inputs/DateTimeInput.js","../src/inputs/ReferenceArrayInput.js","../src/inputs/ReferenceInput.js","../src/inputs/ReificationArrayInput.js","../src/dataProvider/utils/getServerKeyFromUri.js","../src/dataProvider/methods/getOne.js","../src/dataProvider/utils/dereference.js","../src/dataProvider/utils/buildSparqlQuery.js","../src/dataProvider/utils/getRdfPrefixes.js","../node_modules/url-join/lib/url-join.js","../src/dataProvider/utils/findContainersWithTypes.js","../src/dataProvider/utils/getEmbedFrame.js","../src/dataProvider/methods/getList.js","../src/dataProvider/methods/getMany.js","../src/dataProvider/methods/getManyReference.js","../src/dataProvider/utils/uploadAllFiles.js","../src/dataProvider/methods/create.js","../src/dataProvider/methods/update.js","../src/dataProvider/methods/delete.js","../src/dataProvider/methods/deleteMany.js","../node_modules/jwt-decode/build/jwt-decode.esm.js","../src/dataProvider/utils/fetchPodConfig.js","../src/dataProvider/utils/fetchVoidEndpoints.js","../src/dataProvider/dataProvider.js","../src/httpClient.js"],"sourcesContent":["import React from 'react';\nimport { ImageField as RaImageField } from 'react-admin';\n\nconst ImageField = ({ record, source, ...otherProps }) => {\n  // For the display, we need to have the URI in a src property\n  if (typeof record === 'string') record = { [source]: record };\n  return <RaImageField record={record} source={source} {...otherProps} />;\n};\n\nexport default ImageField;\n","import React from 'react';\nimport { ReferenceArrayField as RaReferenceArrayField } from 'react-admin';\n\nconst ReferenceArrayField = ({ record, source, ...otherProps }) => {\n  if (record?.[source]) {\n    if (!Array.isArray(record[source])) {\n      record[source] = [record[source]];\n    }\n    record[source] = record[source].map(i => i['@id'] || i.id || i);\n  }\n  return <RaReferenceArrayField record={record} source={source} {...otherProps} />;\n};\n\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceArrayField;\n","import React from 'react';\nimport { ReferenceField as RaReferenceField } from 'react-admin';\n\nconst ReferenceField = ({ record, source, ...otherProps }) => {\n  if (record[source]) {\n    if (typeof record[source] === 'object') {\n      record[source] = record[source]['@id'] || record[source].id;\n    }\n  }\n  return <RaReferenceField record={record} source={source} {...otherProps} />;\n};\n\nReferenceField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceField;\n","import React, { useState, useEffect } from 'react';\n\n/**\n * @example\n * <Show>\n *   <FilterHandler\n *     source=\"property\" // ex pair:organizationOfMembership\n *     filter={{\n *       'propertyToFilter':'value'\n *     }} // ex {{'pair:membershipRole':'http://localhost:3000/membership-roles/role-1'}}\n *     >\n *     <SingleFieldList>\n *    </SingleFieldList>\n *   </FilterHandler>\n * </Show>\n */\n\nconst FilterHandler = ({ children, record, filter, source, ...otherProps }) => {\n  const [filtered, setFiltered] = useState();\n  useEffect(() => {\n    if (record && source && Array.isArray(record?.[source])) {\n      const filteredData = record?.[source].filter(r => {\n        let eq = true;\n        for (const key in filter) {\n          const value = r[key];\n          if (Array.isArray(value)) {\n            if (!value.includes(filter[key])) {\n              eq = false;\n            }\n          } else {\n            if (value !== filter[key]) {\n              eq = false;\n            }\n          }\n        }\n        return eq;\n      });\n      let newRecord = {\n        ...record\n      };\n      //undefined setted if no data to obtain no render in RightLabel or equivalent\n      newRecord[source] = filteredData.length > 0 ? filteredData : undefined;\n      setFiltered(newRecord);\n    }\n  }, [record, source, filter]);\n\n  return (\n    <>\n      {React.Children.map(children, (child, i) => {\n        return React.cloneElement(child, {\n          ...otherProps,\n          record: filtered,\n          addLabel: true,\n          source\n        });\n      })}\n    </>\n  );\n};\nexport default FilterHandler;\n","import React from 'react';\nimport { useQueryWithStore } from 'react-admin';\nimport { default as FilterHandler } from './FilterHandler';\n\n/*\n * @example Label used in examples\n *  const Label = ({label, ...otherProps})=>{\n *     return <h2>{label}</h2>\n *  }\n *\n * @example show header for each group with group property thanks to groupHeader\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupHeader={({group,...otherProps}) => <Label {...otherProps} label={group['pair:label']}></Label> }\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example call chhildren with label thanks to groupLabel\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example conditional show of group if no data in source. Conditionale groupHeader is not possible because GroupedArrayField define group before filter ; need use chhildren.\n * const ConditionalSourceDefinedHandler = ({record,source,children,...otherProps})=>{\n *   if (record?.[source] && (!Array.isArray(record[source])||record[source].length>0)){\n *     return  React.Children.map(children, (child, i) => {\n *         return React.cloneElement(child, {...otherProps,record,source});\n *       })\n *   }else{\n *     return <></>\n *   }\n * }\n *\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *  <ConditionalSourceDefinedHandler>\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n *  </ConditionalSourceDefinedHandler>\n * </GroupedReferenceHandler>\n *\n *\n */\nconst GroupedReferenceHandler = ({\n  children,\n  groupReference,\n  groupLabel,\n  groupHeader,\n  filterProperty,\n  ...otherProps\n}) => {\n  const { data } = useQueryWithStore({\n    type: 'getList',\n    resource: groupReference,\n    payload: {}\n  });\n\n  return (\n    <>\n      {data?.map((data, index) => {\n        let filter = {};\n        filter[filterProperty] = data.id;\n        return (\n          <>\n            {groupHeader && groupHeader({ ...otherProps, group: data })}\n            <FilterHandler {...otherProps} filter={filter} label={data[groupLabel]}>\n              {children}\n            </FilterHandler>\n          </>\n        );\n      })}\n    </>\n  );\n};\n\nexport default GroupedReferenceHandler;\n","import React from 'react';\nimport { DateTimeInput as RaDateTimeInput } from 'react-admin';\n\n/**\n * @deprecated Use the component from the @semapps/date-components instead\n */\nconst DateTimeInput = props => (\n  <RaDateTimeInput {...props} format={value => value && value.replace(' ', 'T').replace('Z', '')} />\n);\n\nexport default DateTimeInput;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // if the linked field value is not an array, turns it into an array.\n        // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n        // and the ReferenceArrayInput component only accept arrays\n        if (!Array.isArray(value)) value = [value];\n        // If a format prop was defined, apply it to the array\n        if (props.format) value = props.format(value);\n        // If the values are objects with @id field, turn it to a simple string\n        return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n      }}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;\n","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n","import React, { useEffect, useState } from 'react';\nimport { ArrayInput, SimpleFormIterator, TextInput } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useReferenceInputStyles = makeStyles({\n  form: {\n    display: 'flex'\n  },\n  input: {\n    paddingRight: '20px'\n  }\n});\n\nconst useHideInputStyles = makeStyles({\n  root: {\n    display: 'none'\n  }\n});\n\nconst ReificationArrayInput = props => {\n  const { reificationClass, children, ...otherProps } = props;\n  const flexFormClasses = useReferenceInputStyles();\n  const hideInputStyles = useHideInputStyles();\n\n  return (\n    <ArrayInput {...otherProps}>\n      <SimpleFormIterator classes={{ form: flexFormClasses.form }}>\n        {React.Children.map(props.children, (child, i) => {\n          return React.cloneElement(child, {\n            className: flexFormClasses.input\n          });\n        })}\n        <TextInput className={hideInputStyles.root} source=\"type\" initialValue={reificationClass} />\n      </SimpleFormIterator>\n    </ArrayInput>\n  );\n};\n\nexport default ReificationArrayInput;\n","// Return the first server matching with the baseUrl\nconst getServerKeyFromUri = (uri, dataServers) => {\n  return Object.keys(dataServers).find(key => {\n    console.log('get server key', uri, dataServers[key])\n    return uri.startsWith(dataServers[key].baseUrl)\n  });\n};\n\nexport default getServerKeyFromUri;\n","import jsonld from 'jsonld';\nimport getServerKeyFromUri from \"../utils/getServerKeyFromUri\";\n\nconst getOneMethod = config => async (resourceId, params) => {\n  const { dataServers, resources, httpClient, jsonContext } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) throw new Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  const serverKey = getServerKeyFromUri(params.id, dataServers);\n\n  let { json: data } = await httpClient(params.id, {\n    noToken: !serverKey || dataServers[serverKey].authServer !== true\n  });\n  data.id = data.id || data['@id'];\n\n  // We compact only if the context is different between the frontend and the middleware\n  // TODO deep compare if the context is an object\n  if (data['@context'] !== jsonContext) {\n    data = await jsonld.compact(data, jsonContext);\n  }\n\n  // Transform single value into array if forceArray is set\n  if (dataModel.list?.forceArray) {\n    for (const forceArrayItem of dataModel.list?.forceArray) {\n      if (data[forceArrayItem] && !Array.isArray(data[forceArrayItem])) {\n        data[forceArrayItem] = [data[forceArrayItem]];\n      }\n    }\n  }\n\n  return { data: data };\n};\n\nexport default getOneMethod;\n","// Return an object in the form of predicate => parentPredicate\nconst flattenPredicate = (accumulator, predicate, parent = 'root') => {\n  if (predicate.includes('/')) {\n    const matches = predicate.split(/\\/(.+)/);\n    accumulator[matches[0]] = parent;\n    flattenPredicate(accumulator, matches[1], matches[0]);\n  } else {\n    accumulator[predicate] = parent;\n  }\n  return accumulator;\n};\n\n// Transform ontology:predicate to OntologyPredicate in order to use it as a variable name\nconst generateSparqlVarName = predicate =>\n  predicate\n    .split(':')\n    .map(s => s[0].toUpperCase() + s.slice(1))\n    .join('');\n\nexport const buildDereferenceQuery = predicates => {\n  let queries = [];\n\n  if (predicates) {\n    const flattenedPredicates = predicates.reduce((acc, predicate) => flattenPredicate(acc, predicate), {});\n\n    for (const [predicate, parent] of Object.entries(flattenedPredicates)) {\n      const varName = generateSparqlVarName(predicate);\n      const parentVarName = parent === 'root' ? '1' : generateSparqlVarName(parent);\n\n      // Group queries by parent, so that we can group WHERE triples in the same OPTIONAL tag\n      const groupKey = parent === 'root' ? predicate : parent;\n      if (!queries[groupKey]) queries[groupKey] = [];\n\n      queries[groupKey].push(`\n        ?s${parentVarName} ${predicate} ?s${varName} .\n        ?s${varName} ?p${varName} ?o${varName} .\n      `);\n    }\n  }\n\n  return {\n    construct: Object.values(queries)\n      .map(groupedQueries => Object.values(groupedQueries).join('\\n'))\n      .join('\\n'),\n    where: Object.values(queries)\n      .map(groupedQueries => `OPTIONAL { ${Object.values(groupedQueries).join('\\n')} }`)\n      .join('\\n')\n  };\n};\n","import { buildDereferenceQuery } from './dereference';\nimport getRdfPrefixes from './getRdfPrefixes';\n\nconst buildSparqlQuery = ({ containers, params: { filter }, dereference, ontologies }) => {\n  let whereQuery = '';\n\n  if (filter) {\n    if (filter.q && filter.q.length > 0) {\n      whereQuery += `\n      {\n        SELECT ?s1\n        WHERE {\n          ?s1 ?p1 ?o1 .\n          FILTER regex(lcase(str(?o1)), \"${filter.q.toLowerCase()}\")\n          FILTER NOT EXISTS {?s1 a ?o1}\n        }\n      }\n      `;\n      delete filter.q;\n    }\n    Object.keys(filter).forEach(predicate => {\n      if (filter[predicate]) {\n        const object = filter[predicate].startsWith('http') ? `<${filter[predicate]}>` : filter[predicate];\n        whereQuery += `?s1 ${predicate} ${object} .`;\n      }\n    });\n  }\n\n  const dereferenceQuery = buildDereferenceQuery(dereference);\n\n  return `\n    ${getRdfPrefixes(ontologies)}\n    CONSTRUCT {\n      ?s1 ?p2 ?o2 .\n      ${dereferenceQuery.construct}\n    }\n    WHERE {\n      ?containerUri ldp:contains ?s1 .\n      FILTER( ?containerUri IN (${containers.map(container => `<${container}>`).join(', ')}) ) .\n      FILTER( (isIRI(?s1)) ) .\n      ${whereQuery}\n      ${dereferenceQuery.where}\n      ?s1 ?p2 ?o2 .\n    }\n  `;\n};\n\nexport default buildSparqlQuery;\n","const getRdfPrefixes = ontologies => {\n  return ontologies.map(ontology => `PREFIX ${ontology.prefix}: <${ontology.url}>`).join('\\n');\n};\n\nexport default getRdfPrefixes;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n","import urlJoin from \"url-join\";\n\nconst findContainersWithTypes = (types, servers, dataServers) => {\n  let containers = {};\n  let existingContainers = [];\n  Object.keys(dataServers).forEach(key1 => {\n    Object.keys(dataServers[key1].containers).forEach(key2 => {\n      if( !servers || (Array.isArray(servers) ? servers.includes(key2) : servers === key2)) {\n        Object.keys(dataServers[key1].containers[key2]).forEach(type => {\n          if( types.includes(type) ) {\n            dataServers[key1].containers[key2][type].map(path => {\n              const containerUri = urlJoin(dataServers[key2].baseUrl, path);\n\n              // Avoid returning the same container several times\n              if( !existingContainers.includes(containerUri) ) {\n                existingContainers.push(containerUri);\n\n                if( !containers[key1] ) containers[key1] = [];\n                containers[key1].push(containerUri);\n              }\n            })\n          }\n        });\n      }\n    });\n  })\n  return containers;\n}\n\nexport default findContainersWithTypes;\n","const getEmbedFrame = paths => {\n  let embedFrame = {},\n    predicates;\n  if (paths) {\n    for (let path of paths) {\n      if (path.includes('/')) {\n        predicates = path.split('/').reverse();\n      } else {\n        predicates = [path];\n      }\n      embedFrame = {\n        ...embedFrame,\n        ...predicates.reduce(\n          (accumulator, predicate) => ({\n            [predicate]: {\n              '@embed': '@last',\n              ...accumulator\n            }\n          }),\n          {}\n        )\n      };\n    }\n    return embedFrame;\n  }\n};\n\nexport default getEmbedFrame;\n","import buildSparqlQuery from '../utils/buildSparqlQuery';\nimport findContainersWithTypes from \"../utils/findContainersWithTypes\";\nimport getEmbedFrame from '../utils/getEmbedFrame';\nimport jsonld from 'jsonld';\n\nexport const isType = (type, resource) => {\n  const resourceType = resource.type || resource['@type'];\n  return Array.isArray(resourceType) ? resourceType.includes(type) : resourceType === type;\n};\n\nconst getListMethod = config => async (resourceId, params) => {\n  let { dataServers, httpClient, resources, ontologies, jsonContext } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  let containers;\n  if( dataModel.list?.containers && dataModel.list?.containers.length > 0 ) {\n    // If containers are set explicitly, use them\n    containers = dataModel.list?.containers;\n  } else {\n    containers = findContainersWithTypes(dataModel.types, dataModel.list?.servers, dataServers);\n  }\n\n  const frame = {\n    '@context': jsonContext,\n    '@type': dataModel.types,\n    // Embed only what we explicitly asked to dereference\n    // Otherwise we may have same-type resources embedded in other resources\n    '@embed': '@never',\n    ...getEmbedFrame(dataModel.list?.dereference)\n  };\n\n  const sparqlQueryPromises = Object.keys(containers).map(serverKey =>\n    new Promise((resolve, reject) => {\n      const sparqlQuery = buildSparqlQuery({\n        containers: containers[serverKey],\n        params: { ...params, filter: { ...dataModel.list?.filter, ...params.filter } },\n        dereference: dataModel.dereference,\n        ontologies\n      });\n\n      httpClient(dataServers[serverKey].sparqlEndpoint, {\n          method: 'POST',\n          body: sparqlQuery,\n          noToken: dataServers[serverKey].authServer !== true\n        })\n        .then(({ json }) => {\n          // omitGraph option force results to be in a @graph, even if we have a single result\n          return jsonld.frame(json, frame, { omitGraph: false });\n        })\n        .then(compactJson => {\n          resolve(compactJson['@graph'] || []);\n        })\n        .catch(e => reject(e));\n    })\n  );\n\n  // Run simultaneous SPARQL queries\n  let results = await Promise.all(sparqlQueryPromises);\n\n  // Merge all results in one array\n  results = [].concat.apply(...results);\n\n  if (results.length === 0) {\n    return { data: [], total: 0 };\n  } else {\n    // Add id in addition to @id, as this is what React-Admin expects\n    let returnData = results.map(item => {\n      item.id = item.id || item['@id'];\n      return item;\n    });\n\n    if (params.sort) {\n      returnData = returnData.sort((a, b) => {\n        if (a[params.sort.field] && b[params.sort.field]) {\n          if (params.sort.order === 'ASC') {\n            return a[params.sort.field].localeCompare(b[params.sort.field]);\n          } else {\n            return b[params.sort.field].localeCompare(a[params.sort.field]);\n          }\n        } else {\n          return true;\n        }\n      });\n    }\n    if (params.pagination) {\n      returnData = returnData.slice(\n        (params.pagination.page - 1) * params.pagination.perPage,\n        params.pagination.page * params.pagination.perPage\n      );\n    }\n\n    return {data: returnData, total: results.length};\n  }\n\n\n  // if (!resources[resourceId]) Error(`Resource ${resourceId} is not mapped in resources file`);\n  //\n  // if (params.id || params['@id'] || resources[resourceId].fetchContainer) {\n  //   const url = params.id || params['@id'] || resources[resourceId].containerUri;\n  //   let { json } = await httpClient(url);\n  //\n  //   if (isType('ldp:Container', json)) {\n  //     /*\n  //      * LDP Container\n  //      */\n  //     let returnData = json['ldp:contains'].map(item => {\n  //       item.id = item.id || item['@id'];\n  //       return item;\n  //     });\n  //\n  //     // Apply filter to results\n  //     if (params.filter) {\n  //       // Remove search params from filter\n  //       if (params.filter.q) {\n  //         delete params.filter.q;\n  //       }\n  //       if (Object.keys(params.filter).length > 0) {\n  //         returnData = returnData.filter(resource =>\n  //           Object.entries(params.filter).some(([k, v]) =>\n  //             Array.isArray(resource[k]) ? resource[k].includes(v) : resource[k] === v\n  //           )\n  //         );\n  //       }\n  //     }\n  //\n  //     if (params.sort) {\n  //       returnData = returnData.sort((a, b) => {\n  //         if (a[params.sort.field] && b[params.sort.field]) {\n  //           if (params.sort.order === 'ASC') {\n  //             return a[params.sort.field].localeCompare(b[params.sort.field]);\n  //           } else {\n  //             return b[params.sort.field].localeCompare(a[params.sort.field]);\n  //           }\n  //         } else {\n  //           return true;\n  //         }\n  //       });\n  //     }\n  //     if (params.pagination) {\n  //       returnData = returnData.slice(\n  //         (params.pagination.page - 1) * params.pagination.perPage,\n  //         params.pagination.page * params.pagination.perPage\n  //       );\n  //     }\n  //\n  //     return { data: returnData, total: json['ldp:contains'].length };\n  //   } else {\n  //     /*\n  //      * ActivityPub collection\n  //      */\n  //\n  //     // If the collection is split amongst several pages, get the first page\n  //     if (json.first) {\n  //       const result = await httpClient(json.first);\n  //       json = result.json;\n  //     }\n  //\n  //     const listProperty = ['as:orderedItems', 'orderedItems', 'as:items', 'items'].find(p => json[p]);\n  //     if (!listProperty) return { data: [], total: 0 };\n  //\n  //     // TODO fetch several pages depending on params.pagination\n  //\n  //     let returnData = json[listProperty].map(item => {\n  //       item.id = item.id || item['@id'];\n  //       return item;\n  //     });\n  //\n  //     return { data: returnData, total: json.totalItems };\n  //   }\n  // } else {\n  //   const sparqlQuery = buildSparqlQuery({\n  //     types: resources[resourceId].types,\n  //     params: { ...params, filter: { ...resources[resourceId].filter, ...params.filter } },\n  //     dereference: resources[resourceId].dereference,\n  //     ontologies\n  //   });\n  //\n  //   const { json } = await httpClient(sparqlEndpoint, {\n  //     method: 'POST',\n  //     body: sparqlQuery\n  //   });\n  //\n  //   const frame = {\n  //     '@context': jsonContext,\n  //     '@type': resources[resourceId].types,\n  //     // Embed only what we explicitly asked to dereference\n  //     // Otherwise we may have same-type resources embedded in other resources\n  //     '@embed': '@never',\n  //     ...getEmbedFrame(resources[resourceId].dereference)\n  //   };\n  //\n  //   // omitGraph option force results to be in a @graph, even if we have a single result\n  //   const compactJson = await jsonld.frame(json, frame, { omitGraph: false });\n  //\n  //   if (Object.keys(compactJson).length === 1) {\n  //     // If we have only the context, it means there is no match\n  //     return { data: [], total: 0 };\n  //   } else {\n  //     // Add id in addition to @id, as this is what React-Admin expects\n  //     let returnData = compactJson['@graph'].map(item => {\n  //       item.id = item.id || item['@id'];\n  //       return item;\n  //     });\n  //\n  //     if (params.sort) {\n  //       returnData = returnData.sort((a, b) => {\n  //         if (a[params.sort.field] && b[params.sort.field]) {\n  //           if (params.sort.order === 'ASC') {\n  //             return a[params.sort.field].localeCompare(b[params.sort.field]);\n  //           } else {\n  //             return b[params.sort.field].localeCompare(a[params.sort.field]);\n  //           }\n  //         } else {\n  //           return true;\n  //         }\n  //       });\n  //     }\n  //     if (params.pagination) {\n  //       returnData = returnData.slice(\n  //         (params.pagination.page - 1) * params.pagination.perPage,\n  //         params.pagination.page * params.pagination.perPage\n  //       );\n  //     }\n  //\n  //     return { data: returnData, total: compactJson['@graph'].length };\n  //   }\n\n    // OTHER METHOD: FETCH ONLY RESOURCES URIs AND FETCH THEM INDEPENDENTLY\n    // TODO compare the performance of the two methods, and eventually allow both of them\n    //\n    // const sparqlQuery = buildSparqlUriQuery({\n    //   types: resources[resourceId].types,\n    //   params: { ...params, filter: { ...resources[resourceId].filter, ...params.filter } },\n    //   ontologies\n    // });\n    //\n    // let { json } = await httpClient(sparqlEndpoint, {\n    //   method: 'POST',\n    //   body: sparqlQuery\n    // });\n    //\n    // const total = json.length;\n    //\n    // if (params.pagination) {\n    //   json = json.slice(\n    //     (params.pagination.page - 1) * params.pagination.perPage,\n    //     params.pagination.page * params.pagination.perPage\n    //   );\n    // }\n    //\n    // let data = await Promise.allSettled(\n    //   json.map(result => httpClient(result.resource.value).then(result => result.json))\n    // );\n    //\n    // // Ignore resources we were not able to fetch\n    // data = data.filter(r => r.status === 'fulfilled').map(r => r.value);\n    //\n    // return { data, total };\n  // }\n};\n\nexport default getListMethod;\n","import getOne from './getOne';\n\nconst getManyMethod = config => async (resourceId, params) => {\n  const { returnFailedResources } = config;\n\n  let returnData = [];\n\n  for (let id of params.ids) {\n    id = typeof id === 'object' ? id['@id'] : id;\n\n    try {\n      const data = await getOne(config)(resourceId, { id });\n      returnData.push(data);\n    } catch (e) {\n      // Catch if one resource fails to load\n      // Otherwise no references will be show if only one is missing\n      // See https://github.com/marmelab/react-admin/issues/5190\n      if (returnFailedResources) {\n        // Return only the ID of the resource\n        returnData.push({ id });\n      } else {\n        // Do nothing. The resource will not appear in the results.\n      }\n    }\n  }\n\n  return { data: returnData };\n};\n\nexport default getManyMethod;\n","import getList from './getList';\n\nconst getManyReferenceMethod = config => async (resourceId, params) => {\n  params.filter = { ...params.filter, [params.target]: params.id };\n  return await getList(config)(params);\n};\n\nexport default getManyReferenceMethod;\n","import createSlug from 'speakingurl';\n\nexport const getSlugWithExtension = fileName => {\n  let fileExtension = '';\n  let splitFileName = fileName.split('.');\n  if (splitFileName.length > 1) {\n    fileExtension = splitFileName.pop();\n    fileName = splitFileName.join('.');\n  }\n  return createSlug(fileName, { lang: 'fr' }) + '.' + fileExtension;\n};\n\nexport const isFile = o => o && o.rawFile && o.rawFile instanceof File;\n\nconst uploadFile = async (rawFile, config) => {\n  const response = await config.httpClient(config.uploadsContainerUri, {\n    method: 'POST',\n    body: rawFile,\n    headers: new Headers({\n      // We must sluggify the file name, because we can't use non-ASCII characters in the header\n      // However we keep the extension apart (if it exists) so that it is not replaced with a -\n      // TODO let the middleware guess the extension based on the content type\n      Slug: getSlugWithExtension(rawFile.name),\n      'Content-Type': rawFile.type\n    })\n  });\n\n  if (response.status === 201) {\n    return response.headers.get('Location');\n  }\n};\n\n/*\n * Look for raw files in the record data.\n * If there are any, upload them and replace the file by its URL.\n */\nconst uploadAllFiles = async (record, config) => {\n  if (!config.uploadsContainerUri) throw new Error('No uploadsContainerUri defined for the data provider');\n\n  for (let property in record) {\n    if (record.hasOwnProperty(property)) {\n      if (Array.isArray(record[property])) {\n        for (let i = 0; i < record[property].length; i++) {\n          if (isFile(record[property][i])) {\n            record[property][i] = await uploadFile(record[property][i].rawFile, config);\n          }\n        }\n      } else {\n        if (isFile(record[property])) {\n          record[property] = await uploadFile(record[property].rawFile, config);\n        }\n      }\n    }\n  }\n  return record;\n};\n\nexport default uploadAllFiles;\n","import uploadAllFiles from '../utils/uploadAllFiles';\nimport getOne from './getOne';\nimport findContainersWithTypes from \"../utils/findContainersWithTypes\";\nimport getServerKeyFromUri from \"../utils/getServerKeyFromUri\";\n\nconst createMethod = config => async (resourceId, params) => {\n  const { dataServers, resources, httpClient, jsonContext } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  const headers = new Headers();\n\n  if (dataModel.fieldsMapping?.title) {\n    headers.set(\n      'Slug',\n      params.data[dataModel.fieldsMapping?.title]\n    );\n  }\n\n  let containerUri, serverKey;\n  if( dataModel.create?.container ) {\n    containerUri = dataModel.create?.container;\n    serverKey = getServerKeyFromUri(containerUri, dataServers);\n  } else {\n    serverKey = dataModel.create?.server || Object.keys(config.dataServers).find(key => config.dataServers[key].default === true);\n    if( !serverKey ) throw new Error(\"You must define a server for the creation, or a container, or a default server\");\n\n    const containers = findContainersWithTypes(dataModel.types, [serverKey], dataServers);\n    // Extract the containerUri from the results (and ensure there is only one)\n    const serverKeys = Object.keys(containers);\n\n    if( !serverKeys || serverKeys.length === 0 ) throw new Error(`No container with types ${JSON.stringify(dataModel.types)} found on server ${serverKey}`)\n    if( serverKeys.length > 1 || containers[serverKeys[0]].length > 1 ) throw new Error(`More than one container detected with types ${JSON.stringify(dataModel.types)} on server ${serverKey}`);\n    containerUri = containers[serverKeys[0]][0];\n  }\n\n  // Upload files, if there are any\n  // params.data = await uploadAllFiles(params.data, config);\n\n  const { headers: responseHeaders } = await httpClient(containerUri, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      '@context': jsonContext,\n      '@type': dataModel.types,\n      ...params.data\n    }),\n    noToken: dataServers[serverKey].authServer !== true\n  });\n\n  // Retrieve newly-created resource\n  const resourceUri = responseHeaders.get('Location');\n  return await getOne(config)(resourceId, { id: resourceUri });\n};\n\nexport default createMethod;\n","import uploadAllFiles from '../utils/uploadAllFiles';\n\nconst updateMethod = config => async (resourceId, params) => {\n  const { httpClient, jsonContext } = config;\n\n  // Upload files, if there are any\n  params.data = await uploadAllFiles(params.data, config);\n\n  await httpClient(params.id, {\n    method: 'PUT',\n    body: JSON.stringify({\n      '@context': jsonContext,\n      ...params.data\n    })\n  });\n\n  return { data: params.data };\n};\n\nexport default updateMethod;\n","const deleteMethod = config => async (resourceId, params) => {\n  const { httpClient } = config;\n\n  await httpClient(params.id, {\n    method: 'DELETE'\n  });\n\n  return { data: { id: params.id } };\n};\n\nexport default deleteMethod;\n","const deleteManyMethod = config => async (resourceId, params) => {\n  const { httpClient } = config;\n  let ids = [];\n\n  for (let id of params.ids) {\n    try {\n      await httpClient(id, {\n        method: 'DELETE'\n      });\n      ids.push(id);\n    } catch (e) {\n      // Do nothing if we fail to delete a resource\n    }\n  }\n\n  return { data: ids };\n};\n\nexport default deleteManyMethod;\n","function e(e){this.message=e}e.prototype=new Error,e.prototype.name=\"InvalidCharacterError\";var r=\"undefined\"!=typeof window&&window.atob&&window.atob.bind(window)||function(r){var t=String(r).replace(/=+$/,\"\");if(t.length%4==1)throw new e(\"'atob' failed: The string to be decoded is not correctly encoded.\");for(var n,o,a=0,i=0,c=\"\";o=t.charAt(i++);~o&&(n=a%4?64*n+o:o,a++%4)?c+=String.fromCharCode(255&n>>(-2*a&6)):0)o=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(o);return c};function t(e){var t=e.replace(/-/g,\"+\").replace(/_/g,\"/\");switch(t.length%4){case 0:break;case 2:t+=\"==\";break;case 3:t+=\"=\";break;default:throw\"Illegal base64url string!\"}try{return function(e){return decodeURIComponent(r(e).replace(/(.)/g,(function(e,r){var t=r.charCodeAt(0).toString(16).toUpperCase();return t.length<2&&(t=\"0\"+t),\"%\"+t})))}(t)}catch(e){return r(t)}}function n(e){this.message=e}function o(e,r){if(\"string\"!=typeof e)throw new n(\"Invalid token specified\");var o=!0===(r=r||{}).header?0:1;try{return JSON.parse(t(e.split(\".\")[o]))}catch(e){throw new n(\"Invalid token specified: \"+e.message)}}n.prototype=new Error,n.prototype.name=\"InvalidTokenError\";export default o;export{n as InvalidTokenError};\n//# sourceMappingURL=jwt-decode.esm.js.map\n","import jwtDecode from 'jwt-decode';\n\nconst getContainerFromUri = str => str.match(new RegExp(`(.*)/.*`))[1];\n\nconst fetchPodConfig = async config => {\n  const podKey = Object.keys(config.dataServers).find(key => config.dataServers[key].pod === true);\n\n  // If we have a POD in our server\n  if( podKey ) {\n    const token = localStorage.getItem('token');\n\n    // If the user is logged in\n    if (token) {\n      const { webId } = jwtDecode(token);\n\n      // TODO find POD URI and SPARQL endpoint from user profile\n      const podUri = getContainerFromUri(webId);\n\n      // Fill the config provided to the data provider\n      config.dataServers[podKey].name = 'My Pod';\n      config.dataServers[podKey].baseUrl = podUri;\n      config.dataServers[podKey].sparqlEndpoint = podUri + '/sparql';\n    }\n  }\n}\n\nexport default fetchPodConfig;\n","const fetchVoidEndpoints = async config => {\n  const fetchPromises = Object.values(config.dataServers)\n    .filter(server => server.pod !== true)\n    .map(server =>\n      config.httpClient(new URL('/.well-known/void', server.baseUrl))\n        .then(result => ({ data: result.json }))\n        .catch(e => { if( e.status === 404 ) { return({ error: e }) } else { throw e }})\n    );\n\n  const results = await Promise.all(fetchPromises);\n\n  for( let result of results ) {\n    // Ignore unfetchable endpoints\n    if( result.data ) {\n      // TODO modify config.dataServers based on the VOID configs returned\n    }\n  }\n}\n\nexport default fetchVoidEndpoints;\n","import getOneMethod from './methods/getOne';\nimport getListMethod from './methods/getList';\nimport getManyMethod from './methods/getMany';\nimport getManyReferenceMethod from './methods/getManyReference';\nimport createMethod from './methods/create';\nimport updateMethod from './methods/update';\nimport deleteMethod from './methods/delete';\nimport deleteManyMethod from './methods/deleteMany';\nimport fetchPodConfig from \"./utils/fetchPodConfig\";\nimport fetchVoidEndpoints from \"./utils/fetchVoidEndpoints\";\n\nconst dataProvider = config => {\n  // TODO verify all data provider config + data models\n\n  if (!config.jsonContext) config.jsonContext = Object.fromEntries(config.ontologies.map(o => [o.prefix, o.url]));\n  if (!config.returnFailedResources) config.returnFailedResources = false;\n\n  const fetchPodConfigPromise = fetchPodConfig(config);\n  const fetchVoidEndpointsPromise = fetchVoidEndpoints(config);\n\n  const waitForVoidEndpoints = method => async (...arg) => {\n    await fetchPodConfigPromise;\n    await fetchVoidEndpointsPromise; // Return immediately if promise is fulfilled\n    return await method(...arg);\n  };\n\n  return {\n    getList: waitForVoidEndpoints(getListMethod(config)),\n    getOne: waitForVoidEndpoints(getOneMethod(config)),\n    getMany: waitForVoidEndpoints(getManyMethod(config)),\n    getManyReference: waitForVoidEndpoints(getManyReferenceMethod(config)),\n    create: waitForVoidEndpoints(createMethod(config)),\n    update: waitForVoidEndpoints(updateMethod(config)),\n    updateMany: () => {\n      throw new Error('updateMany is not implemented yet');\n    },\n    delete: waitForVoidEndpoints(deleteMethod(config)),\n    deleteMany: waitForVoidEndpoints(deleteManyMethod(config))\n  };\n};\n\nexport default dataProvider;\n","import { fetchUtils } from 'react-admin';\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) options.headers = new Headers();\n\n  switch (options.method) {\n    case 'POST':\n    case 'PATCH':\n    case 'PUT':\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      if (!options.headers.has('Content-Type')) options.headers.set('Content-Type', 'application/ld+json');\n      break;\n\n    case 'DELETE':\n      break;\n\n    case 'GET':\n    default:\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      break;\n  }\n\n  if( !options.noToken ) {\n    const token = localStorage.getItem('token');\n    if (token) options.headers.set('Authorization', `Bearer ${token}`);\n  }\n\n  return fetchUtils.fetchJson(url, options);\n};\n\nexport default httpClient;\n"],"names":["ImageField","record","source","otherProps","React","RaImageField","ReferenceArrayField","Array","isArray","map","i","id","RaReferenceArrayField","defaultProps","addLabel","ReferenceField","_typeof","RaReferenceField","FilterHandler","children","filter","useState","filtered","setFiltered","useEffect","filteredData","r","eq","key","value","includes","newRecord","length","undefined","Children","child","cloneElement","GroupedReferenceHandler","groupReference","groupLabel","groupHeader","filterProperty","data","useQueryWithStore","type","resource","payload","index","group","label","DateTimeInput","props","RaDateTimeInput","format","replace","ReferenceArrayInput","useResourceContext","RaReferenceArrayInput","v","ReferenceInput","RaReferenceInput","useReferenceInputStyles","makeStyles","form","display","input","paddingRight","useHideInputStyles","root","ReificationArrayInput","reificationClass","flexFormClasses","hideInputStyles","ArrayInput","SimpleFormIterator","classes","className","TextInput","initialValue","getServerKeyFromUri","uri","dataServers","Object","keys","find","console","log","startsWith","baseUrl","getOneMethod","config","resourceId","params","resources","httpClient","jsonContext","dataModel","Error","serverKey","noToken","authServer","json","jsonld","compact","list","_dataModel$list","forceArray","_dataModel$list2","forceArrayItem","generateSparqlVarName","predicate","split","s","toUpperCase","slice","join","buildSparqlQuery","containers","dereference","ontologies","whereQuery","q","toLowerCase","forEach","object","dereferenceQuery","predicates","queries","flattenedPredicates","reduce","acc","flattenPredicate","accumulator","parent","matches","entries","varName","parentVarName","groupKey","push","construct","values","groupedQueries","where","buildDereferenceQuery","ontology","prefix","url","getRdfPrefixes","container","context","definition","this","normalize","strArray","resultArray","TypeError","match","first","shift","component","str","parts","arguments","call","module","exports","findContainersWithTypes","types","servers","existingContainers","key1","key2","path","containerUri","urlJoin","getEmbedFrame","paths","embedFrame","reverse","getListMethod","_dataModel$list3","_dataModel$list4","frame","_dataModel$list5","sparqlQueryPromises","Promise","resolve","reject","sparqlQuery","_dataModel$list6","sparqlEndpoint","method","body","then","omitGraph","compactJson","e","all","results","concat","apply","total","returnData","item","sort","a","b","field","order","localeCompare","pagination","page","perPage","getManyMethod","returnFailedResources","ids","getOne","getManyReferenceMethod","target","getList","isFile","o","rawFile","File","uploadFile","uploadsContainerUri","headers","Headers","Slug","fileName","name","fileExtension","splitFileName","pop","createSlug","lang","response","status","get","uploadAllFiles","property","hasOwnProperty","createMethod","fieldsMapping","_dataModel$fieldsMapp","title","set","_dataModel$fieldsMapp2","create","_dataModel$create","_dataModel$create2","server","serverKeys","JSON","stringify","responseHeaders","resourceUri","updateMethod","deleteMethod","deleteManyMethod","message","prototype","window","atob","bind","t","String","n","c","charAt","fromCharCode","indexOf","decodeURIComponent","charCodeAt","toString","header","parse","fetchPodConfig","podKey","pod","token","localStorage","getItem","jwtDecode","webId","podUri","RegExp","fetchVoidEndpoints","fetchPromises","URL","result","error","dataProvider","fromEntries","fetchPodConfigPromise","fetchVoidEndpointsPromise","waitForVoidEndpoints","getMany","getManyReference","update","updateMany","deleteMany","options","has","fetchUtils","fetchJson"],"mappings":"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"}