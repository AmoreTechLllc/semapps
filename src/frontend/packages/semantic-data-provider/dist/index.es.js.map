{"version":3,"file":"index.es.js","sources":["../src/fields/ImageField.js","../src/fields/ReferenceArrayField.js","../src/fields/ReferenceField.js","../src/dataHandling/FilterHandler.js","../src/dataHandling/GroupedReferenceHandler.js","../src/inputs/DateTimeInput.js","../src/inputs/ReferenceArrayInput.js","../src/inputs/ReferenceInput.js","../src/inputs/ReificationArrayInput.js","../src/dataProvider/utils/getServerKeyFromUri.js","../src/dataProvider/utils/fetchResource.js","../src/dataProvider/methods/getOne.js","../node_modules/url-join/lib/url-join.js","../src/dataProvider/utils/findContainersWithTypes.js","../src/dataProvider/utils/fetchContainers.js","../src/dataProvider/utils/getEmbedFrame.js","../src/dataProvider/utils/buildDereferenceQuery.js","../src/dataProvider/utils/buildSparqlQuery.js","../src/dataProvider/utils/getRdfPrefixes.js","../src/dataProvider/utils/fetchSparqlEndpoints.js","../src/dataProvider/methods/getList.js","../src/dataProvider/methods/getMany.js","../src/dataProvider/methods/getManyReference.js","../src/dataProvider/utils/uploadAllFiles.js","../src/dataProvider/methods/create.js","../src/dataProvider/methods/update.js","../src/dataProvider/methods/delete.js","../src/dataProvider/methods/deleteMany.js","../node_modules/jwt-decode/build/jwt-decode.esm.js","../src/dataProvider/utils/fetchPodConfig.js","../src/dataProvider/utils/fetchVoidEndpoints.js","../src/dataProvider/dataProvider.js","../src/httpClient.js"],"sourcesContent":["import React from 'react';\nimport { ImageField as RaImageField } from 'react-admin';\n\nconst ImageField = ({ record, source, ...otherProps }) => {\n  // For the display, we need to have the URI in a src property\n  if (typeof record === 'string') record = { [source]: record };\n  return <RaImageField record={record} source={source} {...otherProps} />;\n};\n\nexport default ImageField;\n","import React from 'react';\nimport { ReferenceArrayField as RaReferenceArrayField } from 'react-admin';\n\nconst ReferenceArrayField = ({ record, source, ...otherProps }) => {\n  if (record?.[source]) {\n    if (!Array.isArray(record[source])) {\n      record[source] = [record[source]];\n    }\n    record[source] = record[source].map(i => i['@id'] || i.id || i);\n  }\n  return <RaReferenceArrayField record={record} source={source} {...otherProps} />;\n};\n\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceArrayField;\n","import React from 'react';\nimport { ReferenceField as RaReferenceField } from 'react-admin';\n\nconst ReferenceField = ({ record, source, ...otherProps }) => {\n  if (record[source]) {\n    if (typeof record[source] === 'object') {\n      record[source] = record[source]['@id'] || record[source].id;\n    }\n  }\n  return <RaReferenceField record={record} source={source} {...otherProps} />;\n};\n\nReferenceField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceField;\n","import React, { useState, useEffect } from 'react';\n\n/**\n * @example\n * <Show>\n *   <FilterHandler\n *     source=\"property\" // ex pair:organizationOfMembership\n *     filter={{\n *       'propertyToFilter':'value'\n *     }} // ex {{'pair:membershipRole':'http://localhost:3000/membership-roles/role-1'}}\n *     >\n *     <SingleFieldList>\n *    </SingleFieldList>\n *   </FilterHandler>\n * </Show>\n */\n\nconst FilterHandler = ({ children, record, filter, source, ...otherProps }) => {\n  const [filtered, setFiltered] = useState();\n  useEffect(() => {\n    if (record && source && Array.isArray(record?.[source])) {\n      const filteredData = record?.[source].filter(r => {\n        let eq = true;\n        for (const key in filter) {\n          const value = r[key];\n          if (Array.isArray(value)) {\n            if (!value.includes(filter[key])) {\n              eq = false;\n            }\n          } else {\n            if (value !== filter[key]) {\n              eq = false;\n            }\n          }\n        }\n        return eq;\n      });\n      let newRecord = {\n        ...record\n      };\n      //undefined setted if no data to obtain no render in RightLabel or equivalent\n      newRecord[source] = filteredData.length > 0 ? filteredData : undefined;\n      setFiltered(newRecord);\n    }\n  }, [record, source, filter]);\n\n  return (\n    <>\n      {React.Children.map(children, (child, i) => {\n        return React.cloneElement(child, {\n          ...otherProps,\n          record: filtered,\n          addLabel: true,\n          source\n        });\n      })}\n    </>\n  );\n};\nexport default FilterHandler;\n","import React from 'react';\nimport { useQueryWithStore } from 'react-admin';\nimport { default as FilterHandler } from './FilterHandler';\n\n/*\n * @example Label used in examples\n *  const Label = ({label, ...otherProps})=>{\n *     return <h2>{label}</h2>\n *  }\n *\n * @example show header for each group with group property thanks to groupHeader\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupHeader={({group,...otherProps}) => <Label {...otherProps} label={group['pair:label']}></Label> }\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example call chhildren with label thanks to groupLabel\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example conditional show of group if no data in source. Conditionale groupHeader is not possible because GroupedArrayField define group before filter ; need use chhildren.\n * const ConditionalSourceDefinedHandler = ({record,source,children,...otherProps})=>{\n *   if (record?.[source] && (!Array.isArray(record[source])||record[source].length>0)){\n *     return  React.Children.map(children, (child, i) => {\n *         return React.cloneElement(child, {...otherProps,record,source});\n *       })\n *   }else{\n *     return <></>\n *   }\n * }\n *\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *  <ConditionalSourceDefinedHandler>\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n *  </ConditionalSourceDefinedHandler>\n * </GroupedReferenceHandler>\n *\n *\n */\nconst GroupedReferenceHandler = ({\n  children,\n  groupReference,\n  groupLabel,\n  groupHeader,\n  filterProperty,\n  ...otherProps\n}) => {\n  const { data } = useQueryWithStore({\n    type: 'getList',\n    resource: groupReference,\n    payload: {}\n  });\n\n  return (\n    <>\n      {data?.map((data, index) => {\n        let filter = {};\n        filter[filterProperty] = data.id;\n        return (\n          <>\n            {groupHeader && groupHeader({ ...otherProps, group: data })}\n            <FilterHandler {...otherProps} filter={filter} label={data[groupLabel]}>\n              {children}\n            </FilterHandler>\n          </>\n        );\n      })}\n    </>\n  );\n};\n\nexport default GroupedReferenceHandler;\n","import React from 'react';\nimport { DateTimeInput as RaDateTimeInput } from 'react-admin';\n\n/**\n * @deprecated Use the component from the @semapps/date-components instead\n */\nconst DateTimeInput = props => (\n  <RaDateTimeInput {...props} format={value => value && value.replace(' ', 'T').replace('Z', '')} />\n);\n\nexport default DateTimeInput;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // if the linked field value is not an array, turns it into an array.\n        // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n        // and the ReferenceArrayInput component only accept arrays\n        if (!Array.isArray(value)) value = [value];\n        // If a format prop was defined, apply it to the array\n        if (props.format) value = props.format(value);\n        // If the values are objects with @id field, turn it to a simple string\n        return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n      }}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;\n","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n","import React, { useEffect, useState } from 'react';\nimport { ArrayInput, SimpleFormIterator, TextInput } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useReferenceInputStyles = makeStyles({\n  form: {\n    display: 'flex'\n  },\n  input: {\n    paddingRight: '20px'\n  }\n});\n\nconst useHideInputStyles = makeStyles({\n  root: {\n    display: 'none'\n  }\n});\n\nconst ReificationArrayInput = props => {\n  const { reificationClass, children, ...otherProps } = props;\n  const flexFormClasses = useReferenceInputStyles();\n  const hideInputStyles = useHideInputStyles();\n\n  return (\n    <ArrayInput {...otherProps}>\n      <SimpleFormIterator classes={{ form: flexFormClasses.form }}>\n        {React.Children.map(props.children, (child, i) => {\n          return React.cloneElement(child, {\n            className: flexFormClasses.input\n          });\n        })}\n        <TextInput className={hideInputStyles.root} source=\"type\" initialValue={reificationClass} />\n      </SimpleFormIterator>\n    </ArrayInput>\n  );\n};\n\nexport default ReificationArrayInput;\n","// Return the first server matching with the baseUrl\nconst getServerKeyFromUri = (uri, dataServers) => {\n  return Object.keys(dataServers).find(key => {\n    return uri.startsWith(dataServers[key].baseUrl);\n  });\n};\n\nexport default getServerKeyFromUri;\n","import getServerKeyFromUri from \"./getServerKeyFromUri\";\nimport jsonld from \"jsonld\";\n\nconst fetchResource = async (resourceUri, config) => {\n  const { dataServers, httpClient, jsonContext } = config;\n\n  const serverKey = getServerKeyFromUri(resourceUri, dataServers);\n\n  let { json: data } = await httpClient(resourceUri, {\n    noToken: !serverKey || dataServers[serverKey].authServer !== true\n  });\n  data.id = data.id || data['@id'];\n\n  // We compact only if the context is different between the frontend and the middleware\n  // TODO deep compare if the context is an object\n  if (data['@context'] !== jsonContext) {\n    data = await jsonld.compact(data, jsonContext);\n  }\n\n  return data;\n};\n\nexport default fetchResource;\n","import fetchResource from \"../utils/fetchResource\";\n\nconst getOneMethod = config => async (resourceId, params) => {\n  const { resources } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) throw new Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  const data = await fetchResource(params.id, config);\n\n  // Transform single value into array if forceArray is set\n  if (dataModel.list?.forceArray) {\n    for (const forceArrayItem of dataModel.list?.forceArray) {\n      if (data[forceArrayItem] && !Array.isArray(data[forceArrayItem])) {\n        data[forceArrayItem] = [data[forceArrayItem]];\n      }\n    }\n  }\n\n  if (dataModel.list?.dereference) {\n    for (const dereferenceItem of dataModel.list?.dereference) {\n      if (data[dereferenceItem] && typeof data[dereferenceItem] === 'string' && data[dereferenceItem].startsWith('http')) {\n        try {\n          const dataToEmbed = await fetchResource(data[dereferenceItem], config);\n          delete dataToEmbed['@context'];\n          data[dereferenceItem] = dataToEmbed;\n        } catch(e) {\n          // Ignore errors (this may happen if user does not have rights to see the resource)\n        }\n      }\n    }\n  }\n\n  return { data: data };\n};\n\nexport default getOneMethod;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n","import urlJoin from 'url-join';\n\nconst findContainersWithTypes = (types, servers, dataServers) => {\n  let containers = {};\n  let existingContainers = [];\n  Object.keys(dataServers).forEach(key1 => {\n    Object.keys(dataServers[key1].containers).forEach(key2 => {\n      if (!servers || (Array.isArray(servers) ? servers.includes(key2) : servers === key2)) {\n        Object.keys(dataServers[key1].containers[key2]).forEach(type => {\n          if (types.includes(type)) {\n            dataServers[key1].containers[key2][type].map(path => {\n              const containerUri = urlJoin(dataServers[key2].baseUrl, path);\n\n              // Avoid returning the same container several times\n              if (!existingContainers.includes(containerUri)) {\n                existingContainers.push(containerUri);\n\n                if (!containers[key1]) containers[key1] = [];\n                containers[key1].push(containerUri);\n              }\n            });\n          }\n        });\n      }\n    });\n  });\n  return containers;\n};\n\nexport default findContainersWithTypes;\n","import jsonld from 'jsonld';\n\nexport const isType = (type, resource) => {\n  const resourceType = resource.type || resource['@type'];\n  return Array.isArray(resourceType) ? resourceType.includes(type) : resourceType === type;\n};\n\nconst fetchContainers = async (containers, resourceId, params, config) => {\n  const { dataServers, httpClient, jsonContext } = config;\n\n  // Transform in an containerUri:serverKey object\n  const containersServers = Object.keys(containers).reduce(\n    (acc, serverKey) => ({\n      ...acc,\n      ...Object.fromEntries(containers[serverKey].map(containerUri => [containerUri, serverKey]))\n    }),\n    {}\n  );\n\n  const fetchPromises = Object.keys(containersServers).map(containerUri =>\n    httpClient(containerUri, {\n      noToken: !containersServers[containerUri] || dataServers[containersServers[containerUri]].authServer !== true\n    })\n      .then(({ json }) => {\n        // If container's context is different, compact it to have an uniform result\n        // TODO deep compare if the context is an object\n        if (json['@context'] !== jsonContext) {\n          return jsonld.compact(json, jsonContext);\n        } else {\n          return json;\n        }\n      })\n      .then(json => {\n        if (isType('ldp:Container', json)) {\n          return json['ldp:contains'];\n        } else {\n          throw new Error(containerUri + ' is not a LDP container');\n        }\n      })\n  );\n\n  // Fetch simultaneously all containers\n  let results = await Promise.all(fetchPromises);\n\n  if (results.length === 0) {\n    return { data: [], total: 0 };\n  } else {\n    // Merge all results in one array\n    results = [].concat.apply(...results);\n\n    let returnData = results.map(item => {\n      item.id = item.id || item['@id'];\n      return item;\n    });\n\n    // Apply filter to results\n    if (params.filter) {\n      // For SPARQL queries, we use \"a\" to filter types, but in containers it must be \"type\"\n      if( params.filter.a ) {\n        params.filter.type = params.filter.a;\n        delete params.filter.a;\n      }\n\n      // Remove search params from filter\n      if (params.filter.q) {\n        delete params.filter.q;\n      }\n      if (Object.keys(params.filter).length > 0) {\n        returnData = returnData.filter(resource =>\n          Object.entries(params.filter).some(([k, v]) =>\n            Array.isArray(resource[k]) ? resource[k].includes(v) : resource[k] === v\n          )\n        );\n      }\n    }\n\n    if (params.sort) {\n      returnData = returnData.sort((a, b) => {\n        if (a[params.sort.field] && b[params.sort.field]) {\n          if (params.sort.order === 'ASC') {\n            return a[params.sort.field].localeCompare(b[params.sort.field]);\n          } else {\n            return b[params.sort.field].localeCompare(a[params.sort.field]);\n          }\n        } else {\n          return true;\n        }\n      });\n    }\n    if (params.pagination) {\n      returnData = returnData.slice(\n        (params.pagination.page - 1) * params.pagination.perPage,\n        params.pagination.page * params.pagination.perPage\n      );\n    }\n\n    return { data: returnData, total: results.length };\n  }\n};\n\nexport default fetchContainers;\n","const getEmbedFrame = paths => {\n  let embedFrame = {},\n    predicates;\n  if (paths) {\n    for (let path of paths) {\n      if (path.includes('/')) {\n        predicates = path.split('/').reverse();\n      } else {\n        predicates = [path];\n      }\n      embedFrame = {\n        ...embedFrame,\n        ...predicates.reduce(\n          (accumulator, predicate) => ({\n            [predicate]: {\n              '@embed': '@last',\n              ...accumulator\n            }\n          }),\n          {}\n        )\n      };\n    }\n    return embedFrame;\n  }\n};\n\nexport default getEmbedFrame;\n","// Return an object in the form of predicate => parentPredicate\nconst flattenPredicate = (accumulator, predicate, parent = 'root') => {\n  if (predicate.includes('/')) {\n    const matches = predicate.split(/\\/(.+)/);\n    accumulator[matches[0]] = parent;\n    flattenPredicate(accumulator, matches[1], matches[0]);\n  } else {\n    accumulator[predicate] = parent;\n  }\n  return accumulator;\n};\n\n// Transform ontology:predicate to OntologyPredicate in order to use it as a variable name\nconst generateSparqlVarName = predicate =>\n  predicate\n    .split(':')\n    .map(s => s[0].toUpperCase() + s.slice(1))\n    .join('');\n\nconst buildDereferenceQuery = predicates => {\n  let queries = [];\n\n  if (predicates) {\n    const flattenedPredicates = predicates.reduce((acc, predicate) => flattenPredicate(acc, predicate), {});\n\n    for (const [predicate, parent] of Object.entries(flattenedPredicates)) {\n      const varName = generateSparqlVarName(predicate);\n      const parentVarName = parent === 'root' ? '1' : generateSparqlVarName(parent);\n\n      // Group queries by parent, so that we can group WHERE triples in the same OPTIONAL tag\n      const groupKey = parent === 'root' ? predicate : parent;\n      if (!queries[groupKey]) queries[groupKey] = [];\n\n      queries[groupKey].push(`\n        ?s${parentVarName} ${predicate} ?s${varName} .\n        ?s${varName} ?p${varName} ?o${varName} .\n      `);\n    }\n  }\n\n  return {\n    construct: Object.values(queries)\n      .map(groupedQueries => Object.values(groupedQueries).join('\\n'))\n      .join('\\n'),\n    where: Object.values(queries)\n      .map(groupedQueries => `OPTIONAL { ${Object.values(groupedQueries).join('\\n')} }`)\n      .join('\\n')\n  };\n};\n\nexport default buildDereferenceQuery;\n","import buildDereferenceQuery from './buildDereferenceQuery';\nimport getRdfPrefixes from './getRdfPrefixes';\n\nconst buildSparqlQuery = ({ containers, params: { filter }, dereference, ontologies }) => {\n  let whereQuery = '';\n\n  if (filter) {\n    if (filter.q && filter.q.length > 0) {\n      whereQuery += `\n      {\n        SELECT ?s1\n        WHERE {\n          ?s1 ?p1 ?o1 .\n          FILTER regex(lcase(str(?o1)), \"${filter.q.toLowerCase()}\")\n          FILTER NOT EXISTS {?s1 a ?o1}\n        }\n      }\n      `;\n      delete filter.q;\n    }\n    Object.keys(filter).forEach(predicate => {\n      if (filter[predicate]) {\n        const object = filter[predicate].startsWith('http') ? `<${filter[predicate]}>` : filter[predicate];\n        whereQuery += `?s1 ${predicate} ${object} .`;\n      }\n    });\n  }\n\n  const dereferenceQuery = buildDereferenceQuery(dereference);\n\n  return `\n    ${getRdfPrefixes(ontologies)}\n    CONSTRUCT {\n      ?s1 ?p2 ?o2 .\n      ${dereferenceQuery.construct}\n    }\n    WHERE {\n      ?containerUri ldp:contains ?s1 .\n      FILTER( ?containerUri IN (${containers.map(container => `<${container}>`).join(', ')}) ) .\n      FILTER( (isIRI(?s1)) ) .\n      ${whereQuery}\n      ${dereferenceQuery.where}\n      ?s1 ?p2 ?o2 .\n    }\n  `;\n};\n\nexport default buildSparqlQuery;\n","const getRdfPrefixes = ontologies => {\n  return ontologies.map(ontology => `PREFIX ${ontology.prefix}: <${ontology.url}>`).join('\\n');\n};\n\nexport default getRdfPrefixes;\n","import getEmbedFrame from './getEmbedFrame';\nimport buildSparqlQuery from './buildSparqlQuery';\nimport jsonld from 'jsonld';\n\nconst fetchSparqlEndpoints = async (containers, resourceId, params, config) => {\n  const { dataServers, resources, httpClient, jsonContext, ontologies } = config;\n  const dataModel = resources[resourceId];\n\n  const frame = {\n    '@context': jsonContext,\n    '@type': dataModel.types,\n    // Embed only what we explicitly asked to dereference\n    // Otherwise we may have same-type resources embedded in other resources\n    '@embed': '@never',\n    ...getEmbedFrame(dataModel.list?.dereference)\n  };\n\n  const sparqlQueryPromises = Object.keys(containers).map(\n    serverKey =>\n      new Promise((resolve, reject) => {\n        const sparqlQuery = buildSparqlQuery({\n          containers: containers[serverKey],\n          params: { ...params, filter: { ...dataModel.list?.filter, ...params.filter } },\n          dereference: dataModel.list?.dereference,\n          ontologies\n        });\n\n        httpClient(dataServers[serverKey].sparqlEndpoint, {\n          method: 'POST',\n          body: sparqlQuery,\n          noToken: dataServers[serverKey].authServer !== true\n        })\n          .then(({ json }) => {\n            // omitGraph option force results to be in a @graph, even if we have a single result\n            return jsonld.frame(json, frame, { omitGraph: false });\n          })\n          .then(compactJson => {\n            resolve(compactJson['@graph'] || []);\n          })\n          .catch(e => reject(e));\n      })\n  );\n\n  // Run simultaneous SPARQL queries\n  let results = await Promise.all(sparqlQueryPromises);\n\n  if (results.length === 0) {\n    return { data: [], total: 0 };\n  } else {\n    // Merge all results in one array\n    results = [].concat.apply(...results);\n\n    // Add id in addition to @id, as this is what React-Admin expects\n    let returnData = results.map(item => {\n      item.id = item.id || item['@id'];\n      return item;\n    });\n\n    // TODO sort and paginate the results in the SPARQL query to improve performances\n    if (params.sort) {\n      returnData = returnData.sort((a, b) => {\n        if (a[params.sort.field] && b[params.sort.field]) {\n          if (params.sort.order === 'ASC') {\n            return a[params.sort.field].localeCompare(b[params.sort.field]);\n          } else {\n            return b[params.sort.field].localeCompare(a[params.sort.field]);\n          }\n        } else {\n          return true;\n        }\n      });\n    }\n    if (params.pagination) {\n      returnData = returnData.slice(\n        (params.pagination.page - 1) * params.pagination.perPage,\n        params.pagination.page * params.pagination.perPage\n      );\n    }\n\n    return { data: returnData, total: results.length };\n  }\n};\n\nexport default fetchSparqlEndpoints;\n","import findContainersWithTypes from '../utils/findContainersWithTypes';\nimport fetchContainers from '../utils/fetchContainers';\nimport fetchSparqlEndpoints from '../utils/fetchSparqlEndpoints';\n\nconst getListMethod = config => async (resourceId, params = {}) => {\n  let { dataServers, resources } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  let containers;\n  if (dataModel.list?.containers && dataModel.list?.containers.length > 0) {\n    // If containers are set explicitly, use them\n    containers = dataModel.list?.containers;\n  } else {\n    containers = findContainersWithTypes(dataModel.types, dataModel.list?.servers, dataServers);\n  }\n\n  if (dataModel.list?.fetchContainer) {\n    return fetchContainers(containers, resourceId, params, config);\n  } else {\n    return fetchSparqlEndpoints(containers, resourceId, params, config);\n  }\n};\n\nexport default getListMethod;\n","import getOne from './getOne';\n\nconst getManyMethod = config => async (resourceId, params) => {\n  const { returnFailedResources } = config;\n\n  let returnData = [];\n\n  for (let id of params.ids) {\n    id = typeof id === 'object' ? id['@id'] : id;\n\n    try {\n      const { data } = await getOne(config)(resourceId, { id });\n      returnData.push(data);\n    } catch (e) {\n      // Catch if one resource fails to load\n      // Otherwise no references will be show if only one is missing\n      // See https://github.com/marmelab/react-admin/issues/5190\n      if (returnFailedResources) {\n        // Return only the ID of the resource\n        returnData.push({ id });\n      } else {\n        // Do nothing. The resource will not appear in the results.\n      }\n    }\n  }\n\n  console.log('getMany', returnData);\n\n  return { data: returnData };\n};\n\nexport default getManyMethod;\n","import getList from './getList';\n\nconst getManyReferenceMethod = config => async (resourceId, params) => {\n  params.filter = { ...params.filter, [params.target]: params.id };\n  delete params.target;\n  return await getList(config)(params);\n};\n\nexport default getManyReferenceMethod;\n","import createSlug from 'speakingurl';\nimport urlJoin from \"url-join\";\n\nexport const getSlugWithExtension = fileName => {\n  let fileExtension = '';\n  let splitFileName = fileName.split('.');\n  if (splitFileName.length > 1) {\n    fileExtension = splitFileName.pop();\n    fileName = splitFileName.join('.');\n  }\n  return createSlug(fileName, { lang: 'fr' }) + '.' + fileExtension;\n};\n\nexport const isFile = o => o && o.rawFile && o.rawFile instanceof File;\n\nconst getUploadsContainerUri = (config) => {\n  const serverKey = Object.keys(config.dataServers).find(key => config.dataServers[key].uploadsContainer);\n  if( serverKey ) {\n    return urlJoin(config.dataServers[serverKey].baseUrl, config.dataServers[serverKey].uploadsContainer)\n  }\n};\n\nconst uploadFile = async (rawFile, config) => {\n  const uploadsContainerUri = getUploadsContainerUri(config);\n  if( !uploadsContainerUri ) throw new Error(\"You must define an uploadsContainer in one of the server's configuration\");\n\n  const response = await config.httpClient(uploadsContainerUri, {\n    method: 'POST',\n    body: rawFile,\n    headers: new Headers({\n      // We must sluggify the file name, because we can't use non-ASCII characters in the header\n      // However we keep the extension apart (if it exists) so that it is not replaced with a -\n      // TODO let the middleware guess the extension based on the content type\n      Slug: getSlugWithExtension(rawFile.name),\n      'Content-Type': rawFile.type\n    })\n  });\n\n  if (response.status === 201) {\n    return response.headers.get('Location');\n  }\n};\n\n/*\n * Look for raw files in the record data.\n * If there are any, upload them and replace the file by its URL.\n */\nconst uploadAllFiles = async (record, config) => {\n  for (let property in record) {\n    if (record.hasOwnProperty(property)) {\n      if (Array.isArray(record[property])) {\n        for (let i = 0; i < record[property].length; i++) {\n          if (isFile(record[property][i])) {\n            record[property][i] = await uploadFile(record[property][i].rawFile, config);\n          }\n        }\n      } else {\n        if (isFile(record[property])) {\n          record[property] = await uploadFile(record[property].rawFile, config);\n        }\n      }\n    }\n  }\n  return record;\n};\n\nexport default uploadAllFiles;\n","import getOne from './getOne';\nimport uploadAllFiles from '../utils/uploadAllFiles';\nimport findContainersWithTypes from '../utils/findContainersWithTypes';\nimport getServerKeyFromUri from '../utils/getServerKeyFromUri';\n\nconst createMethod = config => async (resourceId, params) => {\n  const { dataServers, resources, httpClient, jsonContext } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  const headers = new Headers();\n\n  if (dataModel.fieldsMapping?.title) {\n    headers.set('Slug', params.data[dataModel.fieldsMapping?.title]);\n  }\n\n  let containerUri, serverKey;\n  if (dataModel.create?.container) {\n    containerUri = dataModel.create?.container;\n    serverKey = getServerKeyFromUri(containerUri, dataServers);\n  } else {\n    serverKey =\n      dataModel.create?.server || Object.keys(config.dataServers).find(key => config.dataServers[key].default === true);\n    if (!serverKey) throw new Error('You must define a server for the creation, or a container, or a default server');\n\n    const containers = findContainersWithTypes(dataModel.types, [serverKey], dataServers);\n    // Extract the containerUri from the results (and ensure there is only one)\n    const serverKeys = Object.keys(containers);\n\n    if (!serverKeys || serverKeys.length === 0)\n      throw new Error(`No container with types ${JSON.stringify(dataModel.types)} found on server ${serverKey}`);\n    if (serverKeys.length > 1 || containers[serverKeys[0]].length > 1)\n      throw new Error(\n        `More than one container detected with types ${JSON.stringify(dataModel.types)} on server ${serverKey}`\n      );\n    containerUri = containers[serverKeys[0]][0];\n  }\n\n  // Upload files, if there are any\n  params.data = await uploadAllFiles(params.data, config);\n\n  const { headers: responseHeaders } = await httpClient(containerUri, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      '@context': jsonContext,\n      '@type': dataModel.types,\n      ...params.data\n    }),\n    noToken: dataServers[serverKey].authServer !== true\n  });\n\n  // Retrieve newly-created resource\n  const resourceUri = responseHeaders.get('Location');\n  return await getOne(config)(resourceId, { id: resourceUri });\n};\n\nexport default createMethod;\n","import uploadAllFiles from '../utils/uploadAllFiles';\nimport getServerKeyFromUri from '../utils/getServerKeyFromUri';\n\nconst updateMethod = config => async (resourceId, params) => {\n  const { dataServers, httpClient, jsonContext } = config;\n  const serverKey = getServerKeyFromUri(params.id, dataServers);\n\n  // Upload files, if there are any\n  params.data = await uploadAllFiles(params.data, config);\n\n  await httpClient(params.id, {\n    method: 'PUT',\n    body: JSON.stringify({\n      '@context': jsonContext,\n      ...params.data\n    }),\n    noToken: !serverKey || dataServers[serverKey].authServer !== true\n  });\n\n  return { data: params.data };\n};\n\nexport default updateMethod;\n","import getServerKeyFromUri from '../utils/getServerKeyFromUri';\n\nconst deleteMethod = config => async (resourceId, params) => {\n  const { dataServers, httpClient } = config;\n  const serverKey = getServerKeyFromUri(params.id, dataServers);\n\n  await httpClient(params.id, {\n    method: 'DELETE',\n    noToken: !serverKey || dataServers[serverKey].authServer !== true\n  });\n\n  return { data: { id: params.id } };\n};\n\nexport default deleteMethod;\n","const deleteManyMethod = config => async (resourceId, params) => {\n  const { httpClient } = config;\n  let ids = [];\n\n  for (let id of params.ids) {\n    try {\n      await httpClient(id, {\n        method: 'DELETE'\n      });\n      ids.push(id);\n    } catch (e) {\n      // Do nothing if we fail to delete a resource\n    }\n  }\n\n  return { data: ids };\n};\n\nexport default deleteManyMethod;\n","function e(e){this.message=e}e.prototype=new Error,e.prototype.name=\"InvalidCharacterError\";var r=\"undefined\"!=typeof window&&window.atob&&window.atob.bind(window)||function(r){var t=String(r).replace(/=+$/,\"\");if(t.length%4==1)throw new e(\"'atob' failed: The string to be decoded is not correctly encoded.\");for(var n,o,a=0,i=0,c=\"\";o=t.charAt(i++);~o&&(n=a%4?64*n+o:o,a++%4)?c+=String.fromCharCode(255&n>>(-2*a&6)):0)o=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(o);return c};function t(e){var t=e.replace(/-/g,\"+\").replace(/_/g,\"/\");switch(t.length%4){case 0:break;case 2:t+=\"==\";break;case 3:t+=\"=\";break;default:throw\"Illegal base64url string!\"}try{return function(e){return decodeURIComponent(r(e).replace(/(.)/g,(function(e,r){var t=r.charCodeAt(0).toString(16).toUpperCase();return t.length<2&&(t=\"0\"+t),\"%\"+t})))}(t)}catch(e){return r(t)}}function n(e){this.message=e}function o(e,r){if(\"string\"!=typeof e)throw new n(\"Invalid token specified\");var o=!0===(r=r||{}).header?0:1;try{return JSON.parse(t(e.split(\".\")[o]))}catch(e){throw new n(\"Invalid token specified: \"+e.message)}}n.prototype=new Error,n.prototype.name=\"InvalidTokenError\";export default o;export{n as InvalidTokenError};\n//# sourceMappingURL=jwt-decode.esm.js.map\n","import jwtDecode from 'jwt-decode';\n\nconst getContainerFromUri = str => str.match(new RegExp(`(.*)/.*`))[1];\n\nconst fetchPodConfig = async config => {\n  const podKey = Object.keys(config.dataServers).find(key => config.dataServers[key].pod === true);\n\n  // If we have a POD in our server\n  if (podKey) {\n    const token = localStorage.getItem('token');\n\n    // If the user is logged in\n    if (token) {\n      const { webId } = jwtDecode(token);\n\n      // TODO find POD URI and SPARQL endpoint from user profile\n      const podUri = getContainerFromUri(webId);\n\n      // Fill the config provided to the data provider\n      config.dataServers[podKey].name = 'My Pod';\n      config.dataServers[podKey].baseUrl = podUri;\n      config.dataServers[podKey].sparqlEndpoint = podUri + '/sparql';\n    }\n  }\n};\n\nexport default fetchPodConfig;\n","const fetchVoidEndpoints = async config => {\n  const fetchPromises = Object.values(config.dataServers)\n    .filter(server => server.pod !== true)\n    .map(server =>\n      config\n        .httpClient(new URL('/.well-known/void', server.baseUrl))\n        .then(result => ({ data: result.json }))\n        .catch(e => {\n          if (e.status === 404) {\n            return { error: e };\n          } else {\n            throw e;\n          }\n        })\n    );\n\n  const results = await Promise.all(fetchPromises);\n\n  for (let result of results) {\n    // Ignore unfetchable endpoints\n    if (result.data) {\n      // TODO modify config.dataServers based on the VOID configs returned\n    }\n  }\n};\n\nexport default fetchVoidEndpoints;\n","import getOneMethod from './methods/getOne';\nimport getListMethod from './methods/getList';\nimport getManyMethod from './methods/getMany';\nimport getManyReferenceMethod from './methods/getManyReference';\nimport createMethod from './methods/create';\nimport updateMethod from './methods/update';\nimport deleteMethod from './methods/delete';\nimport deleteManyMethod from './methods/deleteMany';\nimport fetchPodConfig from './utils/fetchPodConfig';\nimport fetchVoidEndpoints from './utils/fetchVoidEndpoints';\n\nconst dataProvider = config => {\n  // TODO verify all data provider config + data models\n\n  if (!config.jsonContext) config.jsonContext = Object.fromEntries(config.ontologies.map(o => [o.prefix, o.url]));\n  if (!config.returnFailedResources) config.returnFailedResources = false;\n\n  const fetchPodConfigPromise = fetchPodConfig(config);\n  const fetchVoidEndpointsPromise = fetchVoidEndpoints(config);\n\n  const waitForVoidEndpoints = method => async (...arg) => {\n    await fetchPodConfigPromise;\n    await fetchVoidEndpointsPromise; // Return immediately if promise is fulfilled\n    return await method(...arg);\n  };\n\n  return {\n    getList: waitForVoidEndpoints(getListMethod(config)),\n    getOne: waitForVoidEndpoints(getOneMethod(config)),\n    getMany: waitForVoidEndpoints(getManyMethod(config)),\n    getManyReference: waitForVoidEndpoints(getManyReferenceMethod(config)),\n    create: waitForVoidEndpoints(createMethod(config)),\n    update: waitForVoidEndpoints(updateMethod(config)),\n    updateMany: () => {\n      throw new Error('updateMany is not implemented yet');\n    },\n    delete: waitForVoidEndpoints(deleteMethod(config)),\n    deleteMany: waitForVoidEndpoints(deleteManyMethod(config))\n  };\n};\n\nexport default dataProvider;\n","import { fetchUtils } from 'react-admin';\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) options.headers = new Headers();\n\n  switch (options.method) {\n    case 'POST':\n    case 'PATCH':\n    case 'PUT':\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      if (!options.headers.has('Content-Type')) options.headers.set('Content-Type', 'application/ld+json');\n      break;\n\n    case 'DELETE':\n      break;\n\n    case 'GET':\n    default:\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      break;\n  }\n\n  if (!options.noToken) {\n    const token = localStorage.getItem('token');\n    if (token) options.headers.set('Authorization', `Bearer ${token}`);\n  }\n\n  return fetchUtils.fetchJson(url, options);\n};\n\nexport default httpClient;\n"],"names":["ImageField","record","source","otherProps","React","RaImageField","ReferenceArrayField","Array","isArray","map","i","id","RaReferenceArrayField","defaultProps","addLabel","ReferenceField","_typeof","RaReferenceField","FilterHandler","children","filter","useState","filtered","setFiltered","useEffect","filteredData","r","eq","key","value","includes","newRecord","length","undefined","Children","child","cloneElement","GroupedReferenceHandler","groupReference","groupLabel","groupHeader","filterProperty","data","useQueryWithStore","type","resource","payload","index","group","label","DateTimeInput","props","RaDateTimeInput","format","replace","ReferenceArrayInput","useResourceContext","RaReferenceArrayInput","v","ReferenceInput","RaReferenceInput","useReferenceInputStyles","makeStyles","form","display","input","paddingRight","useHideInputStyles","root","ReificationArrayInput","reificationClass","flexFormClasses","hideInputStyles","ArrayInput","SimpleFormIterator","classes","className","TextInput","initialValue","getServerKeyFromUri","uri","dataServers","Object","keys","find","startsWith","baseUrl","fetchResource","resourceUri","config","httpClient","jsonContext","serverKey","noToken","authServer","json","jsonld","compact","getOneMethod","resourceId","params","resources","dataModel","Error","list","_dataModel$list","forceArray","_dataModel$list2","forceArrayItem","_dataModel$list3","dereference","_dataModel$list4","dereferenceItem","dataToEmbed","context","definition","this","normalize","strArray","resultArray","TypeError","match","first","shift","component","push","str","join","parts","split","arguments","slice","call","module","exports","findContainersWithTypes","types","servers","containers","existingContainers","forEach","key1","key2","path","containerUri","urlJoin","fetchContainers","containersServers","reduce","acc","fromEntries","fetchPromises","then","resourceType","Promise","all","results","total","concat","apply","returnData","item","a","q","entries","some","k","sort","b","field","order","localeCompare","pagination","page","perPage","getEmbedFrame","paths","predicates","embedFrame","reverse","accumulator","predicate","generateSparqlVarName","s","toUpperCase","buildSparqlQuery","ontologies","whereQuery","toLowerCase","object","dereferenceQuery","queries","flattenedPredicates","flattenPredicate","parent","matches","varName","parentVarName","groupKey","construct","values","groupedQueries","where","buildDereferenceQuery","ontology","prefix","url","getRdfPrefixes","container","fetchSparqlEndpoints","frame","sparqlQueryPromises","resolve","reject","sparqlQuery","sparqlEndpoint","method","body","omitGraph","compactJson","e","getListMethod","_dataModel$list5","fetchContainer","getManyMethod","returnFailedResources","ids","getOne","console","log","getManyReferenceMethod","target","getList","isFile","o","rawFile","File","getUploadsContainerUri","uploadsContainer","uploadFile","uploadsContainerUri","headers","Headers","Slug","fileName","name","fileExtension","splitFileName","pop","createSlug","lang","response","status","get","uploadAllFiles","property","hasOwnProperty","createMethod","fieldsMapping","_dataModel$fieldsMapp","title","set","_dataModel$fieldsMapp2","create","_dataModel$create","_dataModel$create2","server","serverKeys","JSON","stringify","responseHeaders","updateMethod","deleteMethod","deleteManyMethod","message","prototype","window","atob","bind","t","String","n","c","charAt","fromCharCode","indexOf","decodeURIComponent","charCodeAt","toString","header","parse","fetchPodConfig","podKey","pod","token","localStorage","getItem","jwtDecode","webId","podUri","RegExp","fetchVoidEndpoints","URL","result","error","dataProvider","fetchPodConfigPromise","fetchVoidEndpointsPromise","waitForVoidEndpoints","getMany","getManyReference","update","updateMany","deleteMany","options","has","fetchUtils","fetchJson"],"mappings":"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"}