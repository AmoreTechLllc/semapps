{"version":3,"file":"index.es.js","sources":["../src/fields/ImageField.js","../src/fields/ReferenceArrayField.js","../src/fields/ReferenceField.js","../src/dataHandling/FilterHandler.js","../src/dataHandling/GroupedReferenceHandler.js","../src/inputs/DateTimeInput.js","../src/inputs/ReferenceArrayInput.js","../src/inputs/ReferenceInput.js","../src/inputs/ReificationArrayInput.js","../src/dataProvider/methods/getOne.js","../src/dataProvider/utils/dereference.js","../src/dataProvider/utils/buildSparqlQuery.js","../src/dataProvider/utils/getRdfPrefixes.js","../src/dataProvider/utils/getEmbedFrame.js","../src/dataProvider/methods/getList.js","../src/dataProvider/methods/getMany.js","../src/dataProvider/utils/uploadAllFiles.js","../src/dataProvider/methods/create.js","../src/dataProvider/methods/update.js","../src/dataProvider/methods/delete.js","../src/dataProvider/dataProvider.js","../src/httpClient.js"],"sourcesContent":["import React from 'react';\nimport { ImageField as RaImageField } from 'react-admin';\n\nconst ImageField = ({ record, source, ...otherProps }) => {\n  // For the display, we need to have the URI in a src property\n  if (typeof record === 'string') record = { [source]: record };\n  return <RaImageField record={record} source={source} {...otherProps} />;\n};\n\nexport default ImageField;\n","import React from 'react';\nimport { ReferenceArrayField as RaReferenceArrayField } from 'react-admin';\n\nconst ReferenceArrayField = ({ record, source, ...otherProps }) => {\n  if (record?.[source]) {\n    if (!Array.isArray(record[source])) {\n      record[source] = [record[source]];\n    }\n    record[source] = record[source].map(i => i['@id'] || i.id || i);\n  }\n  return <RaReferenceArrayField record={record} source={source} {...otherProps} />;\n};\n\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceArrayField;\n","import React from 'react';\nimport { ReferenceField as RaReferenceField } from 'react-admin';\n\nconst ReferenceField = ({ record, source, ...otherProps }) => {\n  if (record[source]) {\n    if (typeof record[source] === 'object') {\n      record[source] = record[source]['@id'] || record[source].id;\n    }\n  }\n  return <RaReferenceField record={record} source={source} {...otherProps} />;\n};\n\nReferenceField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceField;\n","import React, { useState, useEffect } from 'react';\n\n/**\n * @example\n * <Show>\n *   <FilterHandler\n *     source=\"property\" // ex pair:organizationOfMembership\n *     filter={{\n *       'propertyToFilter':'value'\n *     }} // ex {{'pair:membershipRole':'http://localhost:3000/membership-roles/role-1'}}\n *     >\n *     <SingleFieldList>\n *    </SingleFieldList>\n *   </FilterHandler>\n * </Show>\n */\n\nconst FilterHandler = ({ children, record, filter, source, ...otherProps }) => {\n  const [filtered, setFiltered] = useState();\n  useEffect(() => {\n    if (record && source && Array.isArray(record?.[source])) {\n      const filteredData = record?.[source].filter(r => {\n        let eq = true;\n        for (const key in filter) {\n          const value = r[key];\n          if (Array.isArray(value)) {\n            if (!value.includes(filter[key])) {\n              eq = false;\n            }\n          } else {\n            if (value !== filter[key]) {\n              eq = false;\n            }\n          }\n        }\n        return eq;\n      });\n      let newRecord = {\n        ...record\n      };\n      //undefined setted if no data to obtain no render in RightLabel or equivalent\n      newRecord[source] = filteredData.length > 0 ? filteredData : undefined;\n      setFiltered(newRecord);\n    }\n  }, [record, source, filter]);\n\n  return (\n    <>\n      {React.Children.map(children, (child, i) => {\n        return React.cloneElement(child, {\n          ...otherProps,\n          record: filtered,\n          addLabel: true,\n          source\n        });\n      })}\n    </>\n  );\n};\nexport default FilterHandler;\n","import React from 'react';\nimport { useQueryWithStore } from 'react-admin';\nimport { default as FilterHandler } from './FilterHandler';\n\n/*\n * @example Label used in examples\n *  const Label = ({label, ...otherProps})=>{\n *     return <h2>{label}</h2>\n *  }\n *\n * @example show header for each group with group property thanks to groupHeader\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupHeader={({group,...otherProps}) => <Label {...otherProps} label={group['pair:label']}></Label> }\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example call chhildren with label thanks to groupLabel\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example conditional show of group if no data in source. Conditionale groupHeader is not possible because GroupedArrayField define group before filter ; need use chhildren.\n * const ConditionalSourceDefinedHandler = ({record,source,children,...otherProps})=>{\n *   if (record?.[source] && (!Array.isArray(record[source])||record[source].length>0)){\n *     return  React.Children.map(children, (child, i) => {\n *         return React.cloneElement(child, {...otherProps,record,source});\n *       })\n *   }else{\n *     return <></>\n *   }\n * }\n *\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *  <ConditionalSourceDefinedHandler>\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n *  </ConditionalSourceDefinedHandler>\n * </GroupedReferenceHandler>\n *\n *\n */\nconst GroupedReferenceHandler = ({\n  children,\n  groupReference,\n  groupLabel,\n  groupHeader,\n  filterProperty,\n  ...otherProps\n}) => {\n  const { data } = useQueryWithStore({\n    type: 'getList',\n    resource: groupReference,\n    payload: {}\n  });\n\n  return (\n    <>\n      {data?.map((data, index) => {\n        let filter = {};\n        filter[filterProperty] = data.id;\n        return (\n          <>\n            {groupHeader && groupHeader({ ...otherProps, group: data })}\n            <FilterHandler {...otherProps} filter={filter} label={data[groupLabel]}>\n              {children}\n            </FilterHandler>\n          </>\n        );\n      })}\n    </>\n  );\n};\n\nexport default GroupedReferenceHandler;\n","import React from 'react';\nimport { DateTimeInput as RaDateTimeInput } from 'react-admin';\n\n/**\n * @deprecated Use the component from the @semapps/date-components instead\n */\nconst DateTimeInput = props => (\n  <RaDateTimeInput {...props} format={value => value && value.replace(' ', 'T').replace('Z', '')} />\n);\n\nexport default DateTimeInput;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // if the linked field value is not an array, turns it into an array.\n        // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n        // and the ReferenceArrayInput component only accept arrays\n        if (!Array.isArray(value)) value = [value];\n        // If a format prop was defined, apply it to the array\n        if (props.format) value = props.format(value);\n        // If the values are objects with @id field, turn it to a simple string\n        return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n      }}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;\n","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n","import React, { useEffect, useState } from 'react';\nimport { ArrayInput, SimpleFormIterator, TextInput } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useReferenceInputStyles = makeStyles({\n  form: {\n    display: 'flex'\n  },\n  input: {\n    paddingRight: '20px'\n  }\n});\n\nconst useHideInputStyles = makeStyles({\n  root: {\n    display: 'none'\n  }\n});\n\nconst ReificationArrayInput = props => {\n  const { reificationClass, children, ...otherProps } = props;\n  const flexFormClasses = useReferenceInputStyles();\n  const hideInputStyles = useHideInputStyles();\n\n  return (\n    <ArrayInput {...otherProps}>\n      <SimpleFormIterator classes={{ form: flexFormClasses.form }}>\n        {React.Children.map(props.children, (child, i) => {\n          return React.cloneElement(child, {\n            className: flexFormClasses.input\n          });\n        })}\n        <TextInput className={hideInputStyles.root} source=\"type\" initialValue={reificationClass} />\n      </SimpleFormIterator>\n    </ArrayInput>\n  );\n};\n\nexport default ReificationArrayInput;\n","import jsonld from \"jsonld\";\n\nconst getOneMethod = config => async (resourceId, params) => {\n  const { resources, httpClient, jsonContext } = config;\n\n  if (!resources[resourceId]) {\n    Error(`Resource ${resourceId} is not mapped in resources file`);\n  }\n\n  const { forceArray } = resources[resourceId];\n\n  let { json: data } = await httpClient(params.id);\n  data.id = data.id || data['@id'];\n\n  // We compact only if the context is different between the frontend and the middleware\n  // TODO deep compare if the context is an object\n  if( data['@context'] !== jsonContext ) {\n    data = await jsonld.compact(data, jsonContext);\n  }\n\n  // transform single value into array if forceArray is set\n  if (forceArray) {\n    for (const forceArrayItem of forceArray) {\n      if (data[forceArrayItem] && !Array.isArray(data[forceArrayItem])) {\n        data[forceArrayItem] = [data[forceArrayItem]];\n      }\n    }\n  }\n\n  return { data: data };\n};\n\nexport default getOneMethod;","// Return an object in the form of predicate => parentPredicate\nconst flattenPredicate = (accumulator, predicate, parent = 'root') => {\n  if (predicate.includes('/')) {\n    const matches = predicate.split(/\\/(.+)/);\n    accumulator[matches[0]] = parent;\n    flattenPredicate(accumulator, matches[1], matches[0]);\n  } else {\n    accumulator[predicate] = parent;\n  }\n  return accumulator;\n};\n\n// Transform ontology:predicate to OntologyPredicate in order to use it as a variable name\nconst generateSparqlVarName = predicate =>\n  predicate\n    .split(':')\n    .map(s => s[0].toUpperCase() + s.slice(1))\n    .join('');\n\nexport const buildDereferenceQuery = predicates => {\n  let queries = [];\n\n  if (predicates) {\n    const flattenedPredicates = predicates.reduce((acc, predicate) => flattenPredicate(acc, predicate), {});\n\n    for (const [predicate, parent] of Object.entries(flattenedPredicates)) {\n      const varName = generateSparqlVarName(predicate);\n      const parentVarName = parent === 'root' ? '1' : generateSparqlVarName(parent);\n\n      // Group queries by parent, so that we can group WHERE triples in the same OPTIONAL tag\n      const groupKey = parent === 'root' ? predicate : parent;\n      if (!queries[groupKey]) queries[groupKey] = [];\n\n      queries[groupKey].push(`\n        ?s${parentVarName} ${predicate} ?s${varName} .\n        ?s${varName} ?p${varName} ?o${varName} .\n      `);\n    }\n  }\n\n  return {\n    construct: Object.values(queries)\n      .map(groupedQueries => Object.values(groupedQueries).join('\\n'))\n      .join('\\n'),\n    where: Object.values(queries)\n      .map(groupedQueries => `OPTIONAL { ${Object.values(groupedQueries).join('\\n')} }`)\n      .join('\\n')\n  };\n};\n","import { buildDereferenceQuery } from './dereference';\nimport getRdfPrefixes from \"./getRdfPrefixes\";\n\nconst buildSparqlQuery = ({ types, params: { filter }, dereference, ontologies }) => {\n  let whereQuery = '';\n\n  if (filter) {\n    if (filter.q && filter.q.length > 0) {\n      whereQuery += `\n      {\n        SELECT ?s1\n        WHERE {\n          ?s1 ?p1 ?o1 .\n          FILTER regex(lcase(str(?o1)), \"${filter.q.toLowerCase()}\")\n          FILTER NOT EXISTS {?s1 a ?o1}\n        }\n      }\n      `;\n      delete filter.q;\n    }\n    Object.keys(filter).forEach(predicate => {\n      if (filter[predicate]) {\n        const object = filter[predicate].startsWith('http') ? `<${filter[predicate]}>` : filter[predicate];\n        whereQuery += `?s1 ${predicate} ${object} .`;\n      }\n    });\n  }\n\n  const dereferenceQuery = buildDereferenceQuery(dereference);\n\n  return `\n    ${getRdfPrefixes(ontologies)}\n    CONSTRUCT {\n      ?s1 ?p2 ?o2 .\n      ${dereferenceQuery.construct}\n    }\n    WHERE {\n      ?s1 a ?type .\n      FILTER( ?type IN (${types.join(', ')}) ) .\n      FILTER( (isIRI(?s1)) ) .\n      ${whereQuery}\n      ${dereferenceQuery.where}\n      ?s1 ?p2 ?o2 .\n    }\n  `;\n};\n\nexport default buildSparqlQuery;\n","const getRdfPrefixes = ontologies => {\n  return ontologies.map(ontology => `PREFIX ${ontology.prefix}: <${ontology.url}>`).join('\\n');\n};\n\nexport default getRdfPrefixes;\n","const getEmbedFrame = paths => {\n  let embedFrame = {},\n    predicates;\n  if (paths) {\n    for (let path of paths) {\n      if (path.includes('/')) {\n        predicates = path.split('/').reverse();\n      } else {\n        predicates = [path];\n      }\n      embedFrame = {\n        ...embedFrame,\n        ...predicates.reduce(\n          (accumulator, predicate) => ({\n            [predicate]: {\n              '@embed': '@last',\n              ...accumulator\n            }\n          }),\n          {}\n        )\n      };\n    }\n    return embedFrame;\n  }\n};\n\nexport default getEmbedFrame;\n","import buildSparqlQuery from \"../utils/buildSparqlQuery\";\nimport getEmbedFrame from \"../utils/getEmbedFrame\";\nimport jsonld from \"jsonld\";\n\nexport const isType = (type, resource) => {\n  const resourceType = resource.type || resource['@type'];\n  return Array.isArray(resourceType) ? resourceType.includes(type) : resourceType === type;\n};\n\nconst getListMethod = config => async (resourceId, params) => {\n  let {\n    sparqlEndpoint,\n    httpClient,\n    resources,\n    ontologies,\n    jsonContext\n  } = config;\n\n  if (!resources[resourceId]) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  if (params.id || params['@id'] || resources[resourceId].fetchContainer) {\n    const url = params.id || params['@id'] || resources[resourceId].containerUri;\n    let { json } = await httpClient(url);\n\n    if (isType('ldp:Container', json)) {\n      /*\n       * LDP Container\n       */\n      let returnData = json['ldp:contains'].map(item => {\n        item.id = item.id || item['@id'];\n        return item;\n      });\n\n      // Apply filter to results\n      if (params.filter) {\n        // Remove search params from filter\n        if (params.filter.q) {\n          delete params.filter.q;\n        }\n        if (Object.keys(params.filter).length > 0) {\n          returnData = returnData.filter(resource =>\n            Object.entries(params.filter).some(([k, v]) =>\n              Array.isArray(resource[k]) ? resource[k].includes(v) : resource[k] === v\n            )\n          );\n        }\n      }\n\n      if (params.sort) {\n        returnData = returnData.sort((a, b) => {\n          if (a[params.sort.field] && b[params.sort.field]) {\n            if (params.sort.order === 'ASC') {\n              return a[params.sort.field].localeCompare(b[params.sort.field]);\n            } else {\n              return b[params.sort.field].localeCompare(a[params.sort.field]);\n            }\n          } else {\n            return true;\n          }\n        });\n      }\n      if (params.pagination) {\n        returnData = returnData.slice(\n          (params.pagination.page - 1) * params.pagination.perPage,\n          params.pagination.page * params.pagination.perPage\n        );\n      }\n\n      return { data: returnData, total: json['ldp:contains'].length };\n    } else {\n      /*\n       * ActivityPub collection\n       */\n\n      // If the collection is split amongst several pages, get the first page\n      if (json.first) {\n        const result = await httpClient(json.first);\n        json = result.json;\n      }\n\n      const listProperty = ['as:orderedItems', 'orderedItems', 'as:items', 'items'].find(p => json[p]);\n      if (!listProperty) return { data: [], total: 0 };\n\n      // TODO fetch several pages depending on params.pagination\n\n      let returnData = json[listProperty].map(item => {\n        item.id = item.id || item['@id'];\n        return item;\n      });\n\n      return { data: returnData, total: json.totalItems };\n    }\n  } else {\n    const sparqlQuery = buildSparqlQuery({\n      types: resources[resourceId].types,\n      params: { ...params, filter: { ...resources[resourceId].filter, ...params.filter } },\n      dereference: resources[resourceId].dereference,\n      ontologies\n    });\n\n    const { json } = await httpClient(sparqlEndpoint, {\n      method: 'POST',\n      body: sparqlQuery\n    });\n\n    const frame = {\n      '@context': jsonContext,\n      '@type': resources[resourceId].types,\n      // Embed only what we explicitly asked to dereference\n      // Otherwise we may have same-type resources embedded in other resources\n      '@embed': '@never',\n      ...getEmbedFrame(resources[resourceId].dereference)\n    };\n\n    // omitGraph option force results to be in a @graph, even if we have a single result\n    const compactJson = await jsonld.frame(json, frame, { omitGraph: false });\n\n    if (Object.keys(compactJson).length === 1) {\n      // If we have only the context, it means there is no match\n      return { data: [], total: 0 };\n    } else {\n      // Add id in addition to @id, as this is what React-Admin expects\n      let returnData = compactJson['@graph'].map(item => {\n        item.id = item.id || item['@id'];\n        return item;\n      });\n\n      if (params.sort) {\n        returnData = returnData.sort((a, b) => {\n          if (a[params.sort.field] && b[params.sort.field]) {\n            if (params.sort.order === 'ASC') {\n              return a[params.sort.field].localeCompare(b[params.sort.field]);\n            } else {\n              return b[params.sort.field].localeCompare(a[params.sort.field]);\n            }\n          } else {\n            return true;\n          }\n        });\n      }\n      if (params.pagination) {\n        returnData = returnData.slice(\n          (params.pagination.page - 1) * params.pagination.perPage,\n          params.pagination.page * params.pagination.perPage\n        );\n      }\n\n      return { data: returnData, total: compactJson['@graph'].length };\n    }\n\n    // OTHER METHOD: FETCH ONLY RESOURCES URIs AND FETCH THEM INDEPENDENTLY\n    // TODO compare the performance of the two methods, and eventually allow both of them\n    //\n    // const sparqlQuery = buildSparqlUriQuery({\n    //   types: resources[resourceId].types,\n    //   params: { ...params, filter: { ...resources[resourceId].filter, ...params.filter } },\n    //   ontologies\n    // });\n    //\n    // let { json } = await httpClient(sparqlEndpoint, {\n    //   method: 'POST',\n    //   body: sparqlQuery\n    // });\n    //\n    // const total = json.length;\n    //\n    // if (params.pagination) {\n    //   json = json.slice(\n    //     (params.pagination.page - 1) * params.pagination.perPage,\n    //     params.pagination.page * params.pagination.perPage\n    //   );\n    // }\n    //\n    // let data = await Promise.allSettled(\n    //   json.map(result => httpClient(result.resource.value).then(result => result.json))\n    // );\n    //\n    // // Ignore resources we were not able to fetch\n    // data = data.filter(r => r.status === 'fulfilled').map(r => r.value);\n    //\n    // return { data, total };\n  }\n};\n\nexport default getListMethod;\n","import getOne from \"./getOne\";\n\nconst getManyMethod = config => async (resourceId, params) => {\n  const { returnFailedResources } = config;\n\n  let returnData = [];\n\n  for (let id of params.ids) {\n    id = typeof id === 'object' ? id['@id'] : id;\n\n    try {\n      const data = await getOne(config)(resourceId, { id });\n      returnData.push(data);\n    } catch (e) {\n      // Catch if one resource fails to load\n      // Otherwise no references will be show if only one is missing\n      // See https://github.com/marmelab/react-admin/issues/5190\n      if (returnFailedResources) {\n        // Return only the ID of the resource\n        returnData.push({ id });\n      } else {\n        // Do nothing. The resource will not appear in the results.\n      }\n    }\n  }\n\n  return { data: returnData };\n};\n\nexport default getManyMethod;\n","import createSlug from \"speakingurl\";\n\nexport const getSlugWithExtension = fileName => {\n  let fileExtension = '';\n  let splitFileName = fileName.split('.');\n  if (splitFileName.length > 1) {\n    fileExtension = splitFileName.pop();\n    fileName = splitFileName.join('.');\n  }\n  return createSlug(fileName, { lang: 'fr' }) + '.' + fileExtension;\n};\n\nexport const isFile = o => o && o.rawFile && o.rawFile instanceof File;\n\nconst uploadFile = async (rawFile, config) => {\n  const response = await config.httpClient(config.uploadsContainerUri, {\n    method: 'POST',\n    body: rawFile,\n    headers: new Headers({\n      // We must sluggify the file name, because we can't use non-ASCII characters in the header\n      // However we keep the extension apart (if it exists) so that it is not replaced with a -\n      // TODO let the middleware guess the extension based on the content type\n      Slug: getSlugWithExtension(rawFile.name),\n      'Content-Type': rawFile.type\n    })\n  });\n\n  if (response.status === 201) {\n    return response.headers.get('Location');\n  }\n};\n\n/*\n * Look for raw files in the record data.\n * If there are any, upload them and replace the file by its URL.\n */\nconst uploadAllFiles = async (record, config) => {\n  if (!config.uploadsContainerUri) throw new Error('No uploadsContainerUri defined for the data provider');\n  \n  for (let property in record) {\n    if (record.hasOwnProperty(property)) {\n      if (Array.isArray(record[property])) {\n        for (let i = 0; i < record[property].length; i++) {\n          if (isFile(record[property][i])) {\n            record[property][i] = await uploadFile(record[property][i].rawFile, config);\n          }\n        }\n      } else {\n        if (isFile(record[property])) {\n          record[property] = await uploadFile(record[property].rawFile, config);\n        }\n      }\n    }\n  }\n  return record;\n};\n\nexport default uploadAllFiles;\n","import uploadAllFiles from \"../utils/uploadAllFiles\";\nimport getOne from \"./getOne\";\n\nconst createMethod = config => async (resourceId, params) => {\n  const { resources, httpClient, jsonContext } = config;\n\n  if (!resources[resourceId]) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  const { slugField, containerUri, types } = resources[resourceId];\n  const headers = new Headers();\n\n  if (slugField) {\n    headers.set(\n      'Slug',\n      Array.isArray(slugField) ? slugField.map(f => params.data[f]).join(' ') : params.data[slugField]\n    );\n  }\n\n  // Upload files, if there are any\n  params.data = await uploadAllFiles(params.data, config);\n\n  const { headers: responseHeaders } = await httpClient(containerUri, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      '@context': jsonContext,\n      '@type': types,\n      ...params.data\n    })\n  });\n\n  // Retrieve newly-created resource\n  const resourceUri = responseHeaders.get('Location');\n  return await getOne(config)(resourceId, { id: resourceUri });\n};\n\nexport default createMethod;\n","import uploadAllFiles from \"../utils/uploadAllFiles\";\n\nconst updateMethod = config => async (resourceId, params) => {\n  const { httpClient, jsonContext } = config;\n\n  // Upload files, if there are any\n  params.data = await uploadAllFiles(params.data, config);\n\n  await httpClient(params.id, {\n    method: 'PUT',\n    body: JSON.stringify({\n      '@context': jsonContext,\n      ...params.data\n    })\n  });\n\n  return { data: params.data };\n};\n\nexport default updateMethod;\n","const deleteMethod = config => async (resourceId, params) => {\n  const { httpClient } = config;\n\n  await httpClient(params.id, {\n    method: 'DELETE'\n  });\n\n  return { data: { id: params.id } };\n};\n\nexport default deleteMethod;\n","import getOneMethod from \"./methods/getOne\";\nimport getListMethod from \"./methods/getList\";\nimport getManyMethod from \"./methods/getMany\";\nimport createMethod from \"./methods/create\";\nimport updateMethod from \"./methods/update\";\nimport deleteMethod from \"./methods/delete\";\n\nconst dataProvider = config => {\n  // TODO verify all data provider config + data models\n\n  if( !config.jsonContext ) config.jsonContext = Object.fromEntries(config.ontologies.map(o => [o.prefix, o.url]));\n  if( !config.returnFailedResources ) config.returnFailedResources = false;\n\n  return {\n    getList: getListMethod(config),\n    getOne: getOneMethod(config),\n    getMany: getManyMethod(config),\n    getManyReference: () => { throw new Error('getManyReference is not implemented yet') },\n    create: createMethod(config),\n    update: updateMethod(config),\n    updateMany: () => { throw new Error('updateMany is not implemented yet') },\n    delete: deleteMethod(config),\n    deleteMany: () => { throw new Error('deleteMany is not implemented yet') }\n  };\n};\n\nexport default dataProvider;\n","import { fetchUtils } from 'react-admin';\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) options.headers = new Headers();\n\n  switch (options.method) {\n    case 'POST':\n    case 'PATCH':\n    case 'PUT':\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      if (!options.headers.has('Content-Type')) options.headers.set('Content-Type', 'application/ld+json');\n      break;\n\n    case 'DELETE':\n      break;\n\n    case 'GET':\n    default:\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      break;\n  }\n\n  const token = localStorage.getItem('token');\n  if (token) options.headers.set('Authorization', `Bearer ${token}`);\n\n  return fetchUtils.fetchJson(url, options);\n};\n\nexport default httpClient;\n"],"names":["ImageField","record","source","otherProps","React","RaImageField","ReferenceArrayField","Array","isArray","map","i","id","RaReferenceArrayField","defaultProps","addLabel","ReferenceField","_typeof","RaReferenceField","FilterHandler","children","filter","useState","filtered","setFiltered","useEffect","filteredData","r","eq","key","value","includes","newRecord","length","undefined","Children","child","cloneElement","GroupedReferenceHandler","groupReference","groupLabel","groupHeader","filterProperty","data","useQueryWithStore","type","resource","payload","index","group","label","DateTimeInput","props","RaDateTimeInput","format","replace","ReferenceArrayInput","useResourceContext","RaReferenceArrayInput","v","ReferenceInput","RaReferenceInput","useReferenceInputStyles","makeStyles","form","display","input","paddingRight","useHideInputStyles","root","ReificationArrayInput","reificationClass","flexFormClasses","hideInputStyles","ArrayInput","SimpleFormIterator","classes","className","TextInput","initialValue","getOneMethod","config","resourceId","params","resources","httpClient","jsonContext","forceArray","json","jsonld","compact","forceArrayItem","generateSparqlVarName","predicate","split","s","toUpperCase","slice","join","buildSparqlQuery","types","dereference","ontologies","whereQuery","q","toLowerCase","Object","keys","forEach","object","startsWith","dereferenceQuery","predicates","queries","flattenedPredicates","reduce","acc","flattenPredicate","accumulator","parent","matches","entries","varName","parentVarName","groupKey","push","construct","values","groupedQueries","where","buildDereferenceQuery","ontology","prefix","url","getRdfPrefixes","getEmbedFrame","paths","embedFrame","path","reverse","getListMethod","sparqlEndpoint","fetchContainer","containerUri","resourceType","returnData","item","some","k","sort","a","b","field","order","localeCompare","pagination","page","perPage","total","first","result","listProperty","find","p","totalItems","sparqlQuery","method","body","frame","omitGraph","compactJson","getManyMethod","returnFailedResources","ids","getOne","isFile","o","rawFile","File","uploadFile","uploadsContainerUri","headers","Headers","Slug","fileName","name","fileExtension","splitFileName","pop","createSlug","lang","response","status","get","uploadAllFiles","Error","property","hasOwnProperty","createMethod","slugField","set","f","JSON","stringify","responseHeaders","resourceUri","updateMethod","deleteMethod","dataProvider","fromEntries","getList","getMany","getManyReference","create","update","updateMany","deleteMany","options","has","token","localStorage","getItem","fetchUtils","fetchJson"],"mappings":"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"}