{"version":3,"file":"index.cjs.js","sources":["../src/fields/ReferenceArrayField.js","../src/fields/ReferenceField.js","../src/dataHandling/FilterHandler.js","../src/inputs/ReferenceArrayInput.js","../src/inputs/ReificationArrayInput.js","../src/dataProvider/utils/getServerKeyFromUri.js","../src/dataProvider/methods/getOne.js","../node_modules/url-join/lib/url-join.js","../src/dataProvider/utils/findContainersWithTypes.js","../src/dataProvider/utils/fetchContainers.js","../src/dataProvider/utils/getEmbedFrame.js","../src/dataProvider/utils/buildDereferenceQuery.js","../src/dataProvider/utils/buildSparqlQuery.js","../src/dataProvider/utils/getRdfPrefixes.js","../src/dataProvider/utils/fetchSparqlEndpoints.js","../src/dataProvider/methods/getList.js","../src/dataProvider/methods/getMany.js","../src/dataProvider/methods/getManyReference.js","../src/dataProvider/utils/uploadAllFiles.js","../src/dataProvider/methods/create.js","../src/dataProvider/methods/update.js","../src/dataProvider/methods/delete.js","../src/dataProvider/methods/deleteMany.js","../node_modules/jwt-decode/build/jwt-decode.esm.js","../src/dataProvider/utils/fetchPodConfig.js","../src/dataProvider/utils/fetchVoidEndpoints.js","../src/inputs/DateTimeInput.js","../src/dataHandling/GroupedReferenceHandler.js","../src/fields/ImageField.js","../src/inputs/ReferenceInput.js","../src/dataProvider/dataProvider.js","../src/httpClient.js"],"sourcesContent":["import React from 'react';\nimport { ReferenceArrayField as RaReferenceArrayField } from 'react-admin';\n\nconst ReferenceArrayField = ({ record, source, ...otherProps }) => {\n  if (record?.[source]) {\n    if (!Array.isArray(record[source])) {\n      record[source] = [record[source]];\n    }\n    record[source] = record[source].map(i => i['@id'] || i.id || i);\n  }\n  return <RaReferenceArrayField record={record} source={source} {...otherProps} />;\n};\n\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceArrayField;\n","import React from 'react';\nimport { ReferenceField as RaReferenceField } from 'react-admin';\n\nconst ReferenceField = ({ record, source, ...otherProps }) => {\n  if (record[source]) {\n    if (typeof record[source] === 'object') {\n      record[source] = record[source]['@id'] || record[source].id;\n    }\n  }\n  return <RaReferenceField record={record} source={source} {...otherProps} />;\n};\n\nReferenceField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceField;\n","import React, { useState, useEffect } from 'react';\n\n/**\n * @example\n * <Show>\n *   <FilterHandler\n *     source=\"property\" // ex pair:organizationOfMembership\n *     filter={{\n *       'propertyToFilter':'value'\n *     }} // ex {{'pair:membershipRole':'http://localhost:3000/membership-roles/role-1'}}\n *     >\n *     <SingleFieldList>\n *    </SingleFieldList>\n *   </FilterHandler>\n * </Show>\n */\n\nconst FilterHandler = ({ children, record, filter, source, ...otherProps }) => {\n  const [filtered, setFiltered] = useState();\n  useEffect(() => {\n    if (record && source && Array.isArray(record?.[source])) {\n      const filteredData = record?.[source].filter(r => {\n        let eq = true;\n        for (const key in filter) {\n          const value = r[key];\n          if (Array.isArray(value)) {\n            if (!value.includes(filter[key])) {\n              eq = false;\n            }\n          } else {\n            if (value !== filter[key]) {\n              eq = false;\n            }\n          }\n        }\n        return eq;\n      });\n      let newRecord = {\n        ...record\n      };\n      //undefined setted if no data to obtain no render in RightLabel or equivalent\n      newRecord[source] = filteredData.length > 0 ? filteredData : undefined;\n      setFiltered(newRecord);\n    }\n  }, [record, source, filter]);\n\n  return (\n    <>\n      {React.Children.map(children, (child, i) => {\n        return React.cloneElement(child, {\n          ...otherProps,\n          record: filtered,\n          addLabel: true,\n          source\n        });\n      })}\n    </>\n  );\n};\nexport default FilterHandler;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // if the linked field value is not an array, turns it into an array.\n        // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n        // and the ReferenceArrayInput component only accept arrays\n        if (!Array.isArray(value)) value = [value];\n        // If a format prop was defined, apply it to the array\n        if (props.format) value = props.format(value);\n        // If the values are objects with @id field, turn it to a simple string\n        return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n      }}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;\n","import React, { useEffect, useState } from 'react';\nimport { ArrayInput, SimpleFormIterator, TextInput } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useReferenceInputStyles = makeStyles({\n  form: {\n    display: 'flex'\n  },\n  input: {\n    paddingRight: '20px'\n  }\n});\n\nconst useHideInputStyles = makeStyles({\n  root: {\n    display: 'none'\n  }\n});\n\nconst ReificationArrayInput = props => {\n  const { reificationClass, children, ...otherProps } = props;\n  const flexFormClasses = useReferenceInputStyles();\n  const hideInputStyles = useHideInputStyles();\n\n  return (\n    <ArrayInput {...otherProps}>\n      <SimpleFormIterator classes={{ form: flexFormClasses.form }}>\n        {React.Children.map(props.children, (child, i) => {\n          return React.cloneElement(child, {\n            className: flexFormClasses.input\n          });\n        })}\n        <TextInput className={hideInputStyles.root} source=\"type\" initialValue={reificationClass} />\n      </SimpleFormIterator>\n    </ArrayInput>\n  );\n};\n\nexport default ReificationArrayInput;\n","// Return the first server matching with the baseUrl\nconst getServerKeyFromUri = (uri, dataServers) => {\n  return Object.keys(dataServers).find(key => {\n    console.log('get server key', uri, dataServers[key]);\n    return uri.startsWith(dataServers[key].baseUrl);\n  });\n};\n\nexport default getServerKeyFromUri;\n","import jsonld from 'jsonld';\nimport getServerKeyFromUri from '../utils/getServerKeyFromUri';\n\nconst getOneMethod = config => async (resourceId, params) => {\n  const { dataServers, resources, httpClient, jsonContext } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) throw new Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  const serverKey = getServerKeyFromUri(params.id, dataServers);\n\n  let { json: data } = await httpClient(params.id, {\n    noToken: !serverKey || dataServers[serverKey].authServer !== true\n  });\n  data.id = data.id || data['@id'];\n\n  // We compact only if the context is different between the frontend and the middleware\n  // TODO deep compare if the context is an object\n  if (data['@context'] !== jsonContext) {\n    data = await jsonld.compact(data, jsonContext);\n  }\n\n  // Transform single value into array if forceArray is set\n  if (dataModel.list?.forceArray) {\n    for (const forceArrayItem of dataModel.list?.forceArray) {\n      if (data[forceArrayItem] && !Array.isArray(data[forceArrayItem])) {\n        data[forceArrayItem] = [data[forceArrayItem]];\n      }\n    }\n  }\n\n  return { data: data };\n};\n\nexport default getOneMethod;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n","import urlJoin from 'url-join';\n\nconst findContainersWithTypes = (types, servers, dataServers) => {\n  let containers = {};\n  let existingContainers = [];\n  Object.keys(dataServers).forEach(key1 => {\n    Object.keys(dataServers[key1].containers).forEach(key2 => {\n      if (!servers || (Array.isArray(servers) ? servers.includes(key2) : servers === key2)) {\n        Object.keys(dataServers[key1].containers[key2]).forEach(type => {\n          if (types.includes(type)) {\n            dataServers[key1].containers[key2][type].map(path => {\n              const containerUri = urlJoin(dataServers[key2].baseUrl, path);\n\n              // Avoid returning the same container several times\n              if (!existingContainers.includes(containerUri)) {\n                existingContainers.push(containerUri);\n\n                if (!containers[key1]) containers[key1] = [];\n                containers[key1].push(containerUri);\n              }\n            });\n          }\n        });\n      }\n    });\n  });\n  return containers;\n};\n\nexport default findContainersWithTypes;\n","import jsonld from \"jsonld\";\n\nexport const isType = (type, resource) => {\n  const resourceType = resource.type || resource['@type'];\n  return Array.isArray(resourceType) ? resourceType.includes(type) : resourceType === type;\n};\n\nconst fetchContainers = async (containers, resourceId, params, config) => {\n  const { dataServers, httpClient, jsonContext } = config;\n\n  // Transform in an containerUri:serverKey object\n  const containersServers = Object.keys(containers).reduce((acc, serverKey) => ({ ...acc, ...Object.fromEntries(containers[serverKey].map(containerUri => [containerUri, serverKey]))}), {});\n\n  const fetchPromises = Object.keys(containersServers).map(containerUri =>\n    httpClient(containerUri, {\n      noToken: !containersServers[containerUri] || dataServers[containersServers[containerUri]].authServer !== true\n    })\n      .then(({ json }) => {\n        // If container's context is different, compact it to have an uniform result\n        // TODO deep compare if the context is an object\n        if (json['@context'] !== jsonContext) {\n          return jsonld.compact(json, jsonContext);\n        } else {\n          return json;\n        }\n      } )\n      .then(json => {\n        if (isType('ldp:Container', json)) {\n          return json['ldp:contains'];\n        } else {\n          throw new Error(containerUri + ' is not a LDP container');\n        }\n      })\n  );\n\n  // Fetch simultaneously all containers\n  let results = await Promise.all(fetchPromises);\n\n  // Merge all results in one array\n  results = [].concat.apply(...results);\n\n  if (results.length === 0) {\n    return { data: [], total: 0 };\n  } else {\n    let returnData = results.map(item => {\n      item.id = item.id || item['@id'];\n      return item;\n    });\n\n    // Apply filter to results\n    if (params.filter) {\n      // Remove search params from filter\n      if (params.filter.q) {\n        delete params.filter.q;\n      }\n      if (Object.keys(params.filter).length > 0) {\n        returnData = returnData.filter(resource =>\n          Object.entries(params.filter).some(([k, v]) =>\n            Array.isArray(resource[k]) ? resource[k].includes(v) : resource[k] === v\n          )\n        );\n      }\n    }\n\n    if (params.sort) {\n      returnData = returnData.sort((a, b) => {\n        if (a[params.sort.field] && b[params.sort.field]) {\n          if (params.sort.order === 'ASC') {\n            return a[params.sort.field].localeCompare(b[params.sort.field]);\n          } else {\n            return b[params.sort.field].localeCompare(a[params.sort.field]);\n          }\n        } else {\n          return true;\n        }\n      });\n    }\n    if (params.pagination) {\n      returnData = returnData.slice(\n        (params.pagination.page - 1) * params.pagination.perPage,\n        params.pagination.page * params.pagination.perPage\n      );\n    }\n\n    return { data: returnData, total: results.length };\n  }\n};\n\nexport default fetchContainers;\n","const getEmbedFrame = paths => {\n  let embedFrame = {},\n    predicates;\n  if (paths) {\n    for (let path of paths) {\n      if (path.includes('/')) {\n        predicates = path.split('/').reverse();\n      } else {\n        predicates = [path];\n      }\n      embedFrame = {\n        ...embedFrame,\n        ...predicates.reduce(\n          (accumulator, predicate) => ({\n            [predicate]: {\n              '@embed': '@last',\n              ...accumulator\n            }\n          }),\n          {}\n        )\n      };\n    }\n    return embedFrame;\n  }\n};\n\nexport default getEmbedFrame;\n","// Return an object in the form of predicate => parentPredicate\nconst flattenPredicate = (accumulator, predicate, parent = 'root') => {\n  if (predicate.includes('/')) {\n    const matches = predicate.split(/\\/(.+)/);\n    accumulator[matches[0]] = parent;\n    flattenPredicate(accumulator, matches[1], matches[0]);\n  } else {\n    accumulator[predicate] = parent;\n  }\n  return accumulator;\n};\n\n// Transform ontology:predicate to OntologyPredicate in order to use it as a variable name\nconst generateSparqlVarName = predicate =>\n  predicate\n    .split(':')\n    .map(s => s[0].toUpperCase() + s.slice(1))\n    .join('');\n\nconst buildDereferenceQuery = predicates => {\n  let queries = [];\n\n  if (predicates) {\n    const flattenedPredicates = predicates.reduce((acc, predicate) => flattenPredicate(acc, predicate), {});\n\n    for (const [predicate, parent] of Object.entries(flattenedPredicates)) {\n      const varName = generateSparqlVarName(predicate);\n      const parentVarName = parent === 'root' ? '1' : generateSparqlVarName(parent);\n\n      // Group queries by parent, so that we can group WHERE triples in the same OPTIONAL tag\n      const groupKey = parent === 'root' ? predicate : parent;\n      if (!queries[groupKey]) queries[groupKey] = [];\n\n      queries[groupKey].push(`\n        ?s${parentVarName} ${predicate} ?s${varName} .\n        ?s${varName} ?p${varName} ?o${varName} .\n      `);\n    }\n  }\n\n  return {\n    construct: Object.values(queries)\n      .map(groupedQueries => Object.values(groupedQueries).join('\\n'))\n      .join('\\n'),\n    where: Object.values(queries)\n      .map(groupedQueries => `OPTIONAL { ${Object.values(groupedQueries).join('\\n')} }`)\n      .join('\\n')\n  };\n};\n\nexport default buildDereferenceQuery;\n","import buildDereferenceQuery from './buildDereferenceQuery';\nimport getRdfPrefixes from './getRdfPrefixes';\n\nconst buildSparqlQuery = ({ containers, params: { filter }, dereference, ontologies }) => {\n  let whereQuery = '';\n\n  if (filter) {\n    if (filter.q && filter.q.length > 0) {\n      whereQuery += `\n      {\n        SELECT ?s1\n        WHERE {\n          ?s1 ?p1 ?o1 .\n          FILTER regex(lcase(str(?o1)), \"${filter.q.toLowerCase()}\")\n          FILTER NOT EXISTS {?s1 a ?o1}\n        }\n      }\n      `;\n      delete filter.q;\n    }\n    Object.keys(filter).forEach(predicate => {\n      if (filter[predicate]) {\n        const object = filter[predicate].startsWith('http') ? `<${filter[predicate]}>` : filter[predicate];\n        whereQuery += `?s1 ${predicate} ${object} .`;\n      }\n    });\n  }\n\n  const dereferenceQuery = buildDereferenceQuery(dereference);\n\n  return `\n    ${getRdfPrefixes(ontologies)}\n    CONSTRUCT {\n      ?s1 ?p2 ?o2 .\n      ${dereferenceQuery.construct}\n    }\n    WHERE {\n      ?containerUri ldp:contains ?s1 .\n      FILTER( ?containerUri IN (${containers.map(container => `<${container}>`).join(', ')}) ) .\n      FILTER( (isIRI(?s1)) ) .\n      ${whereQuery}\n      ${dereferenceQuery.where}\n      ?s1 ?p2 ?o2 .\n    }\n  `;\n};\n\nexport default buildSparqlQuery;\n","const getRdfPrefixes = ontologies => {\n  return ontologies.map(ontology => `PREFIX ${ontology.prefix}: <${ontology.url}>`).join('\\n');\n};\n\nexport default getRdfPrefixes;\n","import getEmbedFrame from \"./getEmbedFrame\";\nimport buildSparqlQuery from \"./buildSparqlQuery\";\nimport jsonld from \"jsonld\";\n\nconst fetchSparqlEndpoints = async (containers, resourceId, params, config) => {\n  const { dataServers, resources, httpClient, jsonContext, ontologies } = config;\n  const dataModel = resources[resourceId];\n\n  const frame = {\n    '@context': jsonContext,\n    '@type': dataModel.types,\n    // Embed only what we explicitly asked to dereference\n    // Otherwise we may have same-type resources embedded in other resources\n    '@embed': '@never',\n    ...getEmbedFrame(dataModel.list?.dereference)\n  };\n\n  const sparqlQueryPromises = Object.keys(containers).map(serverKey =>\n    new Promise((resolve, reject) => {\n      const sparqlQuery = buildSparqlQuery({\n        containers: containers[serverKey],\n        params: {...params, filter: {...dataModel.list?.filter, ...params.filter}},\n        dereference: dataModel.list?.dereference,\n        ontologies\n      });\n\n      httpClient(dataServers[serverKey].sparqlEndpoint, {\n        method: 'POST',\n        body: sparqlQuery,\n        noToken: dataServers[serverKey].authServer !== true\n      })\n        .then(({json}) => {\n          // omitGraph option force results to be in a @graph, even if we have a single result\n          return jsonld.frame(json, frame, {omitGraph: false});\n        })\n        .then(compactJson => {\n          resolve(compactJson['@graph'] || []);\n        })\n        .catch(e => reject(e));\n    })\n  );\n\n  // Run simultaneous SPARQL queries\n  let results = await Promise.all(sparqlQueryPromises);\n\n  // Merge all results in one array\n  results = [].concat.apply(...results);\n\n  if (results.length === 0) {\n    return { data: [], total: 0 };\n  } else {\n    // Add id in addition to @id, as this is what React-Admin expects\n    let returnData = results.map(item => {\n      item.id = item.id || item['@id'];\n      return item;\n    });\n\n    // TODO sort and paginate the results in the SPARQL query to improve performances\n    if (params.sort) {\n      returnData = returnData.sort((a, b) => {\n        if (a[params.sort.field] && b[params.sort.field]) {\n          if (params.sort.order === 'ASC') {\n            return a[params.sort.field].localeCompare(b[params.sort.field]);\n          } else {\n            return b[params.sort.field].localeCompare(a[params.sort.field]);\n          }\n        } else {\n          return true;\n        }\n      });\n    }\n    if (params.pagination) {\n      returnData = returnData.slice(\n        (params.pagination.page - 1) * params.pagination.perPage,\n        params.pagination.page * params.pagination.perPage\n      );\n    }\n\n    return { data: returnData, total: results.length };\n  }\n};\n\nexport default fetchSparqlEndpoints;\n","import findContainersWithTypes from \"../utils/findContainersWithTypes\";\nimport fetchContainers from '../utils/fetchContainers';\nimport fetchSparqlEndpoints from \"../utils/fetchSparqlEndpoints\";\n\nconst getListMethod = config => async (resourceId, params) => {\n  let { dataServers, resources } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  let containers;\n  if( dataModel.list?.containers && dataModel.list?.containers.length > 0 ) {\n    // If containers are set explicitly, use them\n    containers = dataModel.list?.containers;\n  } else {\n    containers = findContainersWithTypes(dataModel.types, dataModel.list?.servers, dataServers);\n  }\n\n  if (dataModel.list?.fetchContainer) {\n    return fetchContainers(containers, resourceId, params, config);\n  } else {\n    return fetchSparqlEndpoints(containers, resourceId, params, config);\n  }\n};\n\nexport default getListMethod;\n","import getOne from './getOne';\n\nconst getManyMethod = config => async (resourceId, params) => {\n  const { returnFailedResources } = config;\n\n  let returnData = [];\n\n  for (let id of params.ids) {\n    id = typeof id === 'object' ? id['@id'] : id;\n\n    try {\n      const data = await getOne(config)(resourceId, { id });\n      returnData.push(data);\n    } catch (e) {\n      // Catch if one resource fails to load\n      // Otherwise no references will be show if only one is missing\n      // See https://github.com/marmelab/react-admin/issues/5190\n      if (returnFailedResources) {\n        // Return only the ID of the resource\n        returnData.push({ id });\n      } else {\n        // Do nothing. The resource will not appear in the results.\n      }\n    }\n  }\n\n  return { data: returnData };\n};\n\nexport default getManyMethod;\n","import getList from './getList';\n\nconst getManyReferenceMethod = config => async (resourceId, params) => {\n  params.filter = { ...params.filter, [params.target]: params.id };\n  delete params.target;\n  return await getList(config)(params);\n};\n\nexport default getManyReferenceMethod;\n","import createSlug from 'speakingurl';\n\nexport const getSlugWithExtension = fileName => {\n  let fileExtension = '';\n  let splitFileName = fileName.split('.');\n  if (splitFileName.length > 1) {\n    fileExtension = splitFileName.pop();\n    fileName = splitFileName.join('.');\n  }\n  return createSlug(fileName, { lang: 'fr' }) + '.' + fileExtension;\n};\n\nexport const isFile = o => o && o.rawFile && o.rawFile instanceof File;\n\nconst uploadFile = async (rawFile, config) => {\n  const response = await config.httpClient(config.uploadsContainerUri, {\n    method: 'POST',\n    body: rawFile,\n    headers: new Headers({\n      // We must sluggify the file name, because we can't use non-ASCII characters in the header\n      // However we keep the extension apart (if it exists) so that it is not replaced with a -\n      // TODO let the middleware guess the extension based on the content type\n      Slug: getSlugWithExtension(rawFile.name),\n      'Content-Type': rawFile.type\n    })\n  });\n\n  if (response.status === 201) {\n    return response.headers.get('Location');\n  }\n};\n\n/*\n * Look for raw files in the record data.\n * If there are any, upload them and replace the file by its URL.\n */\nconst uploadAllFiles = async (record, config) => {\n  if (!config.uploadsContainerUri) throw new Error('No uploadsContainerUri defined for the data provider');\n\n  for (let property in record) {\n    if (record.hasOwnProperty(property)) {\n      if (Array.isArray(record[property])) {\n        for (let i = 0; i < record[property].length; i++) {\n          if (isFile(record[property][i])) {\n            record[property][i] = await uploadFile(record[property][i].rawFile, config);\n          }\n        }\n      } else {\n        if (isFile(record[property])) {\n          record[property] = await uploadFile(record[property].rawFile, config);\n        }\n      }\n    }\n  }\n  return record;\n};\n\nexport default uploadAllFiles;\n","import uploadAllFiles from '../utils/uploadAllFiles';\nimport getOne from './getOne';\nimport findContainersWithTypes from \"../utils/findContainersWithTypes\";\nimport getServerKeyFromUri from \"../utils/getServerKeyFromUri\";\n\nconst createMethod = config => async (resourceId, params) => {\n  const { dataServers, resources, httpClient, jsonContext } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  const headers = new Headers();\n\n  if (dataModel.fieldsMapping?.title) {\n    headers.set(\n      'Slug',\n      params.data[dataModel.fieldsMapping?.title]\n    );\n  }\n\n  let containerUri, serverKey;\n  if( dataModel.create?.container ) {\n    containerUri = dataModel.create?.container;\n    serverKey = getServerKeyFromUri(containerUri, dataServers);\n  } else {\n    serverKey = dataModel.create?.server || Object.keys(config.dataServers).find(key => config.dataServers[key].default === true);\n    if( !serverKey ) throw new Error(\"You must define a server for the creation, or a container, or a default server\");\n\n    const containers = findContainersWithTypes(dataModel.types, [serverKey], dataServers);\n    // Extract the containerUri from the results (and ensure there is only one)\n    const serverKeys = Object.keys(containers);\n\n    if( !serverKeys || serverKeys.length === 0 ) throw new Error(`No container with types ${JSON.stringify(dataModel.types)} found on server ${serverKey}`)\n    if( serverKeys.length > 1 || containers[serverKeys[0]].length > 1 ) throw new Error(`More than one container detected with types ${JSON.stringify(dataModel.types)} on server ${serverKey}`);\n    containerUri = containers[serverKeys[0]][0];\n  }\n\n  // Upload files, if there are any\n  // params.data = await uploadAllFiles(params.data, config);\n\n  const { headers: responseHeaders } = await httpClient(containerUri, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      '@context': jsonContext,\n      '@type': dataModel.types,\n      ...params.data\n    }),\n    noToken: dataServers[serverKey].authServer !== true\n  });\n\n  // Retrieve newly-created resource\n  const resourceUri = responseHeaders.get('Location');\n  return await getOne(config)(resourceId, { id: resourceUri });\n};\n\nexport default createMethod;\n","import uploadAllFiles from '../utils/uploadAllFiles';\nimport getServerKeyFromUri from \"../utils/getServerKeyFromUri\";\n\nconst updateMethod = config => async (resourceId, params) => {\n  const { dataServers, httpClient, jsonContext } = config;\n  const serverKey = getServerKeyFromUri(params.id, dataServers);\n\n  // Upload files, if there are any\n  params.data = await uploadAllFiles(params.data, config);\n\n  await httpClient(params.id, {\n    method: 'PUT',\n    body: JSON.stringify({\n      '@context': jsonContext,\n      ...params.data\n    }),\n    noToken: !serverKey || dataServers[serverKey].authServer !== true\n  });\n\n  return { data: params.data };\n};\n\nexport default updateMethod;\n","import getServerKeyFromUri from \"../utils/getServerKeyFromUri\";\n\nconst deleteMethod = config => async (resourceId, params) => {\n  const { dataServers, httpClient } = config;\n  const serverKey = getServerKeyFromUri(params.id, dataServers);\n\n  await httpClient(params.id, {\n    method: 'DELETE',\n    noToken: !serverKey || dataServers[serverKey].authServer !== true\n  });\n\n  return { data: { id: params.id } };\n};\n\nexport default deleteMethod;\n","const deleteManyMethod = config => async (resourceId, params) => {\n  const { httpClient } = config;\n  let ids = [];\n\n  for (let id of params.ids) {\n    try {\n      await httpClient(id, {\n        method: 'DELETE'\n      });\n      ids.push(id);\n    } catch (e) {\n      // Do nothing if we fail to delete a resource\n    }\n  }\n\n  return { data: ids };\n};\n\nexport default deleteManyMethod;\n","function e(e){this.message=e}e.prototype=new Error,e.prototype.name=\"InvalidCharacterError\";var r=\"undefined\"!=typeof window&&window.atob&&window.atob.bind(window)||function(r){var t=String(r).replace(/=+$/,\"\");if(t.length%4==1)throw new e(\"'atob' failed: The string to be decoded is not correctly encoded.\");for(var n,o,a=0,i=0,c=\"\";o=t.charAt(i++);~o&&(n=a%4?64*n+o:o,a++%4)?c+=String.fromCharCode(255&n>>(-2*a&6)):0)o=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(o);return c};function t(e){var t=e.replace(/-/g,\"+\").replace(/_/g,\"/\");switch(t.length%4){case 0:break;case 2:t+=\"==\";break;case 3:t+=\"=\";break;default:throw\"Illegal base64url string!\"}try{return function(e){return decodeURIComponent(r(e).replace(/(.)/g,(function(e,r){var t=r.charCodeAt(0).toString(16).toUpperCase();return t.length<2&&(t=\"0\"+t),\"%\"+t})))}(t)}catch(e){return r(t)}}function n(e){this.message=e}function o(e,r){if(\"string\"!=typeof e)throw new n(\"Invalid token specified\");var o=!0===(r=r||{}).header?0:1;try{return JSON.parse(t(e.split(\".\")[o]))}catch(e){throw new n(\"Invalid token specified: \"+e.message)}}n.prototype=new Error,n.prototype.name=\"InvalidTokenError\";export default o;export{n as InvalidTokenError};\n//# sourceMappingURL=jwt-decode.esm.js.map\n","import jwtDecode from 'jwt-decode';\n\nconst getContainerFromUri = str => str.match(new RegExp(`(.*)/.*`))[1];\n\nconst fetchPodConfig = async config => {\n  const podKey = Object.keys(config.dataServers).find(key => config.dataServers[key].pod === true);\n\n  // If we have a POD in our server\n  if (podKey) {\n    const token = localStorage.getItem('token');\n\n    // If the user is logged in\n    if (token) {\n      const { webId } = jwtDecode(token);\n\n      // TODO find POD URI and SPARQL endpoint from user profile\n      const podUri = getContainerFromUri(webId);\n\n      // Fill the config provided to the data provider\n      config.dataServers[podKey].name = 'My Pod';\n      config.dataServers[podKey].baseUrl = podUri;\n      config.dataServers[podKey].sparqlEndpoint = podUri + '/sparql';\n    }\n  }\n};\n\nexport default fetchPodConfig;\n","const fetchVoidEndpoints = async config => {\n  const fetchPromises = Object.values(config.dataServers)\n    .filter(server => server.pod !== true)\n    .map(server =>\n      config\n        .httpClient(new URL('/.well-known/void', server.baseUrl))\n        .then(result => ({ data: result.json }))\n        .catch(e => {\n          if (e.status === 404) {\n            return { error: e };\n          } else {\n            throw e;\n          }\n        })\n    );\n\n  const results = await Promise.all(fetchPromises);\n\n  for (let result of results) {\n    // Ignore unfetchable endpoints\n    if (result.data) {\n      // TODO modify config.dataServers based on the VOID configs returned\n    }\n  }\n};\n\nexport default fetchVoidEndpoints;\n","import React from 'react';\nimport { DateTimeInput as RaDateTimeInput } from 'react-admin';\n\n/**\n * @deprecated Use the component from the @semapps/date-components instead\n */\nconst DateTimeInput = props => (\n  <RaDateTimeInput {...props} format={value => value && value.replace(' ', 'T').replace('Z', '')} />\n);\n\nexport default DateTimeInput;\n","import React from 'react';\nimport { useQueryWithStore } from 'react-admin';\nimport { default as FilterHandler } from './FilterHandler';\n\n/*\n * @example Label used in examples\n *  const Label = ({label, ...otherProps})=>{\n *     return <h2>{label}</h2>\n *  }\n *\n * @example show header for each group with group property thanks to groupHeader\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupHeader={({group,...otherProps}) => <Label {...otherProps} label={group['pair:label']}></Label> }\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example call chhildren with label thanks to groupLabel\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example conditional show of group if no data in source. Conditionale groupHeader is not possible because GroupedArrayField define group before filter ; need use chhildren.\n * const ConditionalSourceDefinedHandler = ({record,source,children,...otherProps})=>{\n *   if (record?.[source] && (!Array.isArray(record[source])||record[source].length>0)){\n *     return  React.Children.map(children, (child, i) => {\n *         return React.cloneElement(child, {...otherProps,record,source});\n *       })\n *   }else{\n *     return <></>\n *   }\n * }\n *\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *  <ConditionalSourceDefinedHandler>\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n *  </ConditionalSourceDefinedHandler>\n * </GroupedReferenceHandler>\n *\n *\n */\nconst GroupedReferenceHandler = ({\n  children,\n  groupReference,\n  groupLabel,\n  groupHeader,\n  filterProperty,\n  ...otherProps\n}) => {\n  const { data } = useQueryWithStore({\n    type: 'getList',\n    resource: groupReference,\n    payload: {}\n  });\n\n  return (\n    <>\n      {data?.map((data, index) => {\n        let filter = {};\n        filter[filterProperty] = data.id;\n        return (\n          <>\n            {groupHeader && groupHeader({ ...otherProps, group: data })}\n            <FilterHandler {...otherProps} filter={filter} label={data[groupLabel]}>\n              {children}\n            </FilterHandler>\n          </>\n        );\n      })}\n    </>\n  );\n};\n\nexport default GroupedReferenceHandler;\n","import React from 'react';\nimport { ImageField as RaImageField } from 'react-admin';\n\nconst ImageField = ({ record, source, ...otherProps }) => {\n  // For the display, we need to have the URI in a src property\n  if (typeof record === 'string') record = { [source]: record };\n  return <RaImageField record={record} source={source} {...otherProps} />;\n};\n\nexport default ImageField;\n","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n","import getOneMethod from './methods/getOne';\nimport getListMethod from './methods/getList';\nimport getManyMethod from './methods/getMany';\nimport getManyReferenceMethod from './methods/getManyReference';\nimport createMethod from './methods/create';\nimport updateMethod from './methods/update';\nimport deleteMethod from './methods/delete';\nimport deleteManyMethod from './methods/deleteMany';\nimport fetchPodConfig from './utils/fetchPodConfig';\nimport fetchVoidEndpoints from './utils/fetchVoidEndpoints';\n\nconst dataProvider = config => {\n  // TODO verify all data provider config + data models\n\n  if (!config.jsonContext) config.jsonContext = Object.fromEntries(config.ontologies.map(o => [o.prefix, o.url]));\n  if (!config.returnFailedResources) config.returnFailedResources = false;\n\n  const fetchPodConfigPromise = fetchPodConfig(config);\n  const fetchVoidEndpointsPromise = fetchVoidEndpoints(config);\n\n  const waitForVoidEndpoints = method => async (...arg) => {\n    await fetchPodConfigPromise;\n    await fetchVoidEndpointsPromise; // Return immediately if promise is fulfilled\n    return await method(...arg);\n  };\n\n  return {\n    getList: waitForVoidEndpoints(getListMethod(config)),\n    getOne: waitForVoidEndpoints(getOneMethod(config)),\n    getMany: waitForVoidEndpoints(getManyMethod(config)),\n    getManyReference: waitForVoidEndpoints(getManyReferenceMethod(config)),\n    create: waitForVoidEndpoints(createMethod(config)),\n    update: waitForVoidEndpoints(updateMethod(config)),\n    updateMany: () => {\n      throw new Error('updateMany is not implemented yet');\n    },\n    delete: waitForVoidEndpoints(deleteMethod(config)),\n    deleteMany: waitForVoidEndpoints(deleteManyMethod(config))\n  };\n};\n\nexport default dataProvider;\n","import { fetchUtils } from 'react-admin';\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) options.headers = new Headers();\n\n  switch (options.method) {\n    case 'POST':\n    case 'PATCH':\n    case 'PUT':\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      if (!options.headers.has('Content-Type')) options.headers.set('Content-Type', 'application/ld+json');\n      break;\n\n    case 'DELETE':\n      break;\n\n    case 'GET':\n    default:\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      break;\n  }\n\n  if (!options.noToken) {\n    const token = localStorage.getItem('token');\n    if (token) options.headers.set('Authorization', `Bearer ${token}`);\n  }\n\n  return fetchUtils.fetchJson(url, options);\n};\n\nexport default httpClient;\n"],"names":["ReferenceArrayField","record","source","otherProps","Array","isArray","map","i","id","React","RaReferenceArrayField","defaultProps","addLabel","ReferenceField","_typeof","RaReferenceField","FilterHandler","children","filter","useState","filtered","setFiltered","useEffect","filteredData","r","eq","key","value","includes","newRecord","length","undefined","Children","child","cloneElement","ReferenceArrayInput","props","resource","useResourceContext","RaReferenceArrayInput","format","v","useReferenceInputStyles","makeStyles","form","display","input","paddingRight","useHideInputStyles","root","getServerKeyFromUri","uri","dataServers","Object","keys","find","console","log","startsWith","baseUrl","getOneMethod","config","resourceId","params","resources","httpClient","jsonContext","dataModel","Error","serverKey","noToken","authServer","data","json","jsonld","compact","list","_dataModel$list","forceArray","_dataModel$list2","forceArrayItem","context","definition","this","normalize","strArray","resultArray","TypeError","match","first","shift","replace","component","push","str","join","parts","split","arguments","slice","call","module","exports","findContainersWithTypes","types","servers","containers","existingContainers","forEach","key1","key2","type","path","containerUri","urlJoin","fetchContainers","containersServers","reduce","acc","fromEntries","fetchPromises","then","resourceType","Promise","all","results","concat","apply","total","returnData","item","q","entries","some","k","sort","a","b","field","order","localeCompare","pagination","page","perPage","getEmbedFrame","paths","predicates","embedFrame","reverse","accumulator","predicate","generateSparqlVarName","s","toUpperCase","buildSparqlQuery","dereference","ontologies","whereQuery","toLowerCase","object","dereferenceQuery","queries","flattenedPredicates","flattenPredicate","parent","matches","varName","parentVarName","groupKey","construct","values","groupedQueries","where","buildDereferenceQuery","ontology","prefix","url","getRdfPrefixes","container","fetchSparqlEndpoints","frame","sparqlQueryPromises","resolve","reject","sparqlQuery","_dataModel$list3","sparqlEndpoint","method","body","omitGraph","compactJson","e","getListMethod","_dataModel$list4","_dataModel$list5","fetchContainer","getManyMethod","returnFailedResources","ids","getOne","getManyReferenceMethod","target","getList","isFile","o","rawFile","File","uploadFile","uploadsContainerUri","headers","Headers","Slug","fileName","name","fileExtension","splitFileName","pop","createSlug","lang","response","status","get","uploadAllFiles","property","hasOwnProperty","createMethod","fieldsMapping","_dataModel$fieldsMapp","title","set","_dataModel$fieldsMapp2","create","_dataModel$create","_dataModel$create2","server","serverKeys","JSON","stringify","responseHeaders","resourceUri","updateMethod","deleteMethod","deleteManyMethod","message","prototype","window","atob","bind","t","String","n","c","charAt","fromCharCode","indexOf","decodeURIComponent","charCodeAt","toString","header","parse","fetchPodConfig","podKey","pod","token","localStorage","getItem","jwtDecode","webId","podUri","RegExp","fetchVoidEndpoints","URL","result","error","RaDateTimeInput","groupReference","groupLabel","groupHeader","filterProperty","useQueryWithStore","payload","index","group","label","RaImageField","RaReferenceInput","reificationClass","flexFormClasses","hideInputStyles","ArrayInput","SimpleFormIterator","classes","className","TextInput","initialValue","fetchPodConfigPromise","fetchVoidEndpointsPromise","waitForVoidEndpoints","getMany","getManyReference","update","updateMany","deleteMany","options","has","fetchUtils","fetchJson"],"mappings":"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"}