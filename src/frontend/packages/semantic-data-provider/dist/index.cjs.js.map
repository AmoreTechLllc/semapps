{"version":3,"file":"index.cjs.js","sources":["../src/fields/ReferenceArrayField.js","../src/fields/ReferenceField.js","../src/dataHandling/FilterHandler.js","../src/inputs/ReferenceArrayInput.js","../src/inputs/ReificationArrayInput.js","../src/dataProvider/utils/getServerKeyFromType.js","../src/dataProvider/utils/getServerKeyFromUri.js","../src/dataProvider/utils/fetchResource.js","../src/dataProvider/methods/getOne.js","../src/dataProvider/utils/uploadAllFiles.js","../src/dataProvider/utils/findContainersWithTypes.js","../src/dataProvider/methods/create.js","../src/dataProvider/methods/delete.js","../src/dataProvider/methods/deleteMany.js","../src/dataProvider/methods/getCreateContainer.js","../src/dataProvider/utils/fetchContainers.js","../src/dataProvider/utils/getEmbedFrame.js","../src/dataProvider/utils/buildDereferenceQuery.js","../src/dataProvider/utils/buildSparqlQuery.js","../src/dataProvider/utils/getRdfPrefixes.js","../src/dataProvider/utils/fetchSparqlEndpoints.js","../src/dataProvider/methods/getList.js","../src/dataProvider/methods/getMany.js","../src/dataProvider/methods/getManyReference.js","../src/dataProvider/methods/update.js","../src/dataProvider/utils/fetchUserConfig.js","../src/dataProvider/utils/fetchVoidEndpoints.js","../src/inputs/DateTimeInput.js","../src/dataHandling/GroupedReferenceHandler.js","../src/fields/ImageField.js","../src/inputs/ReferenceInput.js","../src/dataProvider/dataProvider.js","../src/httpClient.js","../src/hooks/useCreateContainer.js"],"sourcesContent":["import React from 'react';\nimport { ReferenceArrayField as RaReferenceArrayField } from 'react-admin';\n\nconst ReferenceArrayField = ({ record, source, ...otherProps }) => {\n  if (record?.[source]) {\n    if (!Array.isArray(record[source])) {\n      record[source] = [record[source]];\n    }\n    record[source] = record[source].map(i => i['@id'] || i.id || i);\n  }\n  return <RaReferenceArrayField record={record} source={source} {...otherProps} />;\n};\n\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceArrayField;\n","import React from 'react';\nimport { ReferenceField as RaReferenceField } from 'react-admin';\n\nconst ReferenceField = ({ record, source, ...otherProps }) => {\n  if (record[source]) {\n    if (typeof record[source] === 'object') {\n      record[source] = record[source]['@id'] || record[source].id;\n    }\n  }\n  return <RaReferenceField record={record} source={source} {...otherProps} />;\n};\n\nReferenceField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceField;\n","import React, { useState, useEffect } from 'react';\n\n/**\n * @example\n * <Show>\n *   <FilterHandler\n *     source=\"property\" // ex pair:organizationOfMembership\n *     filter={{\n *       'propertyToFilter':'value'\n *     }} // ex {{'pair:membershipRole':'http://localhost:3000/membership-roles/role-1'}}\n *     >\n *     <SingleFieldList>\n *    </SingleFieldList>\n *   </FilterHandler>\n * </Show>\n */\n\nconst FilterHandler = ({ children, record, filter, source, ...otherProps }) => {\n  const [filtered, setFiltered] = useState();\n  useEffect(() => {\n    if (record && source && Array.isArray(record?.[source])) {\n      const filteredData = record?.[source].filter(r => {\n        let eq = true;\n        for (const key in filter) {\n          const value = r[key];\n          if (Array.isArray(value)) {\n            if (!value.includes(filter[key])) {\n              eq = false;\n            }\n          } else {\n            if (value !== filter[key]) {\n              eq = false;\n            }\n          }\n        }\n        return eq;\n      });\n      let newRecord = {\n        ...record\n      };\n      //undefined setted if no data to obtain no render in RightLabel or equivalent\n      newRecord[source] = filteredData.length > 0 ? filteredData : undefined;\n      setFiltered(newRecord);\n    }\n  }, [record, source, filter]);\n\n  return (\n    <>\n      {React.Children.map(children, (child, i) => {\n        return React.cloneElement(child, {\n          ...otherProps,\n          record: filtered,\n          addLabel: true,\n          source\n        });\n      })}\n    </>\n  );\n};\nexport default FilterHandler;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // if the linked field value is not an array, turns it into an array.\n        // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n        // and the ReferenceArrayInput component only accept arrays\n        if (!Array.isArray(value)) value = [value];\n        // If a format prop was defined, apply it to the array\n        if (props.format) value = props.format(value);\n        // If the values are objects with @id field, turn it to a simple string\n        return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n      }}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;\n","import React, { useEffect, useState } from 'react';\nimport { ArrayInput, SimpleFormIterator, TextInput } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useReferenceInputStyles = makeStyles({\n  form: {\n    display: 'flex'\n  },\n  input: {\n    paddingRight: '20px'\n  }\n});\n\nconst useHideInputStyles = makeStyles({\n  root: {\n    display: 'none'\n  }\n});\n\nconst ReificationArrayInput = props => {\n  const { reificationClass, children, ...otherProps } = props;\n  const flexFormClasses = useReferenceInputStyles();\n  const hideInputStyles = useHideInputStyles();\n\n  return (\n    <ArrayInput {...otherProps}>\n      <SimpleFormIterator classes={{ form: flexFormClasses.form }}>\n        {React.Children.map(props.children, (child, i) => {\n          return React.cloneElement(child, {\n            className: flexFormClasses.input\n          });\n        })}\n        <TextInput className={hideInputStyles.root} source=\"type\" initialValue={reificationClass} />\n      </SimpleFormIterator>\n    </ArrayInput>\n  );\n};\n\nexport default ReificationArrayInput;\n","const getServerKeyFromType = (type, dataServers) => {\n  return Object.keys(dataServers).find(key => {\n    return dataServers[key][type];\n  });\n};\n\nexport default getServerKeyFromType;\n","// Return the first server matching with the baseUrl\nconst getServerKeyFromUri = (uri, dataServers) => {\n  return Object.keys(dataServers).find(key => {\n    return uri.startsWith(dataServers[key].baseUrl);\n  });\n};\n\nexport default getServerKeyFromUri;\n","import getServerKeyFromType from './getServerKeyFromType';\nimport getServerKeyFromUri from './getServerKeyFromUri';\nimport jsonld from 'jsonld';\n\nconst fetchResource = async (resourceUri, config) => {\n  const { dataServers, httpClient, jsonContext } = config;\n\n  const authServerKey = getServerKeyFromType('authServer', dataServers);\n  const serverKey = getServerKeyFromUri(resourceUri, dataServers);\n\n  // Fetch through proxy server if it is available\n  let { json: data } =\n    serverKey !== authServerKey && dataServers[authServerKey]?.proxyUrl && dataServers[serverKey]?.noProxy !== true\n      ? await httpClient(dataServers[authServerKey].proxyUrl, {\n          method: 'POST',\n          headers: new Headers({ 'Content-Type': 'application/x-www-form-urlencoded' }),\n          body: new URLSearchParams({ id: resourceUri })\n        })\n      : await httpClient(resourceUri, {\n          noToken: serverKey !== authServerKey\n        });\n\n  data.id = data.id || data['@id'];\n\n  // We compact only if the context is different between the frontend and the middleware\n  // TODO deep compare if the context is an object\n  if (data['@context'] !== jsonContext) {\n    data = await jsonld.compact(data, jsonContext);\n  }\n\n  return data;\n};\n\nexport default fetchResource;\n","import fetchResource from '../utils/fetchResource';\n\nconst getOneMethod = config => async (resourceId, params) => {\n  const { resources } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) throw new Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  const data = await fetchResource(params.id, config);\n\n  // Transform single value into array if forceArray is set\n  if (dataModel.list?.forceArray) {\n    for (const forceArrayItem of dataModel.list?.forceArray) {\n      if (data[forceArrayItem] && !Array.isArray(data[forceArrayItem])) {\n        data[forceArrayItem] = [data[forceArrayItem]];\n      }\n    }\n  }\n\n  if (dataModel.list?.dereference) {\n    for (const dereferenceItem of dataModel.list?.dereference) {\n      if (\n        data[dereferenceItem] &&\n        typeof data[dereferenceItem] === 'string' &&\n        data[dereferenceItem].startsWith('http')\n      ) {\n        try {\n          const dataToEmbed = await fetchResource(data[dereferenceItem], config);\n          delete dataToEmbed['@context'];\n          data[dereferenceItem] = dataToEmbed;\n        } catch (e) {\n          // Ignore errors (this may happen if user does not have rights to see the resource)\n        }\n      }\n    }\n  }\n\n  return { data: data };\n};\n\nexport default getOneMethod;\n","import createSlug from 'speakingurl';\nimport urlJoin from 'url-join';\n\nexport const getSlugWithExtension = fileName => {\n  let fileExtension = '';\n  let splitFileName = fileName.split('.');\n  if (splitFileName.length > 1) {\n    fileExtension = splitFileName.pop();\n    fileName = splitFileName.join('.');\n  }\n  return createSlug(fileName, { lang: 'fr' }) + '.' + fileExtension;\n};\n\nexport const isFile = o => o && o.rawFile && o.rawFile instanceof File;\n\nconst getUploadsContainerUri = config => {\n  const serverKey = Object.keys(config.dataServers).find(key => config.dataServers[key].uploadsContainer);\n  if (serverKey) {\n    return urlJoin(config.dataServers[serverKey].baseUrl, config.dataServers[serverKey].uploadsContainer);\n  }\n};\n\nconst uploadFile = async (rawFile, config) => {\n  const uploadsContainerUri = getUploadsContainerUri(config);\n  if (!uploadsContainerUri) throw new Error(\"You must define an uploadsContainer in one of the server's configuration\");\n\n  const response = await config.httpClient(uploadsContainerUri, {\n    method: 'POST',\n    body: rawFile,\n    headers: new Headers({\n      // We must sluggify the file name, because we can't use non-ASCII characters in the header\n      // However we keep the extension apart (if it exists) so that it is not replaced with a -\n      // TODO let the middleware guess the extension based on the content type\n      Slug: getSlugWithExtension(rawFile.name),\n      'Content-Type': rawFile.type\n    })\n  });\n\n  if (response.status === 201) {\n    return response.headers.get('Location');\n  }\n};\n\n/*\n * Look for raw files in the record data.\n * If there are any, upload them and replace the file by its URL.\n */\nconst uploadAllFiles = async (record, config) => {\n  for (let property in record) {\n    if (record.hasOwnProperty(property)) {\n      if (Array.isArray(record[property])) {\n        for (let i = 0; i < record[property].length; i++) {\n          if (isFile(record[property][i])) {\n            record[property][i] = await uploadFile(record[property][i].rawFile, config);\n          }\n        }\n      } else {\n        if (isFile(record[property])) {\n          record[property] = await uploadFile(record[property].rawFile, config);\n        }\n      }\n    }\n  }\n  return record;\n};\n\nexport default uploadAllFiles;\n","import urlJoin from 'url-join';\n\nconst findContainersWithTypes = (types, servers, dataServers) => {\n  let containers = {};\n  let existingContainers = [];\n  Object.keys(dataServers).forEach(key1 => {\n    Object.keys(dataServers[key1].containers).forEach(key2 => {\n      if (!servers || (Array.isArray(servers) ? servers.includes(key2) : servers === key2)) {\n        Object.keys(dataServers[key1].containers[key2]).forEach(type => {\n          if (types.includes(type)) {\n            dataServers[key1].containers[key2][type].map(path => {\n              const containerUri = urlJoin(dataServers[key2].baseUrl, path);\n\n              // Avoid returning the same container several times\n              if (!existingContainers.includes(containerUri)) {\n                existingContainers.push(containerUri);\n\n                if (!containers[key1]) containers[key1] = [];\n                containers[key1].push(containerUri);\n              }\n            });\n          }\n        });\n      }\n    });\n  });\n  return containers;\n};\n\nexport default findContainersWithTypes;\n","import getOne from './getOne';\nimport uploadAllFiles from '../utils/uploadAllFiles';\nimport findContainersWithTypes from '../utils/findContainersWithTypes';\nimport getServerKeyFromUri from '../utils/getServerKeyFromUri';\n\nconst createMethod = config => async (resourceId, params) => {\n  const { dataServers, resources, httpClient, jsonContext } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  const headers = new Headers();\n\n  if (dataModel.fieldsMapping?.title) {\n    headers.set('Slug', params.data[dataModel.fieldsMapping?.title]);\n  }\n\n  let containerUri, serverKey;\n  if (dataModel.create?.container) {\n    containerUri = dataModel.create?.container;\n    serverKey = getServerKeyFromUri(containerUri, dataServers);\n  } else {\n    serverKey =\n      dataModel.create?.server || Object.keys(config.dataServers).find(key => config.dataServers[key].default === true);\n    if (!serverKey) throw new Error('You must define a server for the creation, or a container, or a default server');\n\n    const containers = findContainersWithTypes(dataModel.types, [serverKey], dataServers);\n    // Extract the containerUri from the results (and ensure there is only one)\n    const serverKeys = Object.keys(containers);\n\n    if (!serverKeys || serverKeys.length === 0)\n      throw new Error(`No container with types ${JSON.stringify(dataModel.types)} found on server ${serverKey}`);\n    if (serverKeys.length > 1 || containers[serverKeys[0]].length > 1)\n      throw new Error(\n        `More than one container detected with types ${JSON.stringify(dataModel.types)} on server ${serverKey}`\n      );\n    containerUri = containers[serverKeys[0]][0];\n  }\n\n  // Upload files, if there are any\n  params.data = await uploadAllFiles(params.data, config);\n\n  const { headers: responseHeaders } = await httpClient(containerUri, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      '@context': jsonContext,\n      '@type': dataModel.types,\n      ...params.data\n    }),\n    noToken: dataServers[serverKey].authServer !== true\n  });\n\n  // Retrieve newly-created resource\n  const resourceUri = responseHeaders.get('Location');\n  return await getOne(config)(resourceId, { id: resourceUri });\n};\n\nexport default createMethod;\n","import getServerKeyFromUri from '../utils/getServerKeyFromUri';\n\nconst deleteMethod = config => async (resourceId, params) => {\n  const { dataServers, httpClient } = config;\n  const serverKey = getServerKeyFromUri(params.id, dataServers);\n\n  await httpClient(params.id, {\n    method: 'DELETE',\n    noToken: !serverKey || dataServers[serverKey].authServer !== true\n  });\n\n  return { data: { id: params.id } };\n};\n\nexport default deleteMethod;\n","const deleteManyMethod = config => async (resourceId, params) => {\n  const { httpClient } = config;\n  let ids = [];\n\n  for (let id of params.ids) {\n    try {\n      await httpClient(id, {\n        method: 'DELETE'\n      });\n      ids.push(id);\n    } catch (e) {\n      // Do nothing if we fail to delete a resource\n    }\n  }\n\n  return { data: ids };\n};\n\nexport default deleteManyMethod;\n","import urlJoin from 'url-join';\nimport getServerKeyFromType from '../utils/getServerKeyFromType';\n\nconst findCreateContainerWithTypes = (types, createServerKey, dataServers) => {\n  let containers = [];\n  Object.keys(dataServers[createServerKey].containers[createServerKey]).forEach(type => {\n    if (types.includes(type)) {\n      dataServers[createServerKey].containers[createServerKey][type].map(path => {\n        const containerUri = urlJoin(dataServers[createServerKey].baseUrl, path);\n        if (!containers.includes(containerUri)) {\n          containers.push(containerUri);\n        }\n      });\n    }\n  });\n\n  if (containers.length === 0) {\n    throw new Error(\n      `No container found matching with types ${JSON.stringify(\n        types\n      )}. You can set explicitely the create.container property of the resource.`\n    );\n  } else if (containers.length > 1) {\n    throw new Error(\n      `More than one container found matching with types ${JSON.stringify(\n        types\n      )}. You must set the create.server or create.container property for the resource.`\n    );\n  }\n\n  return containers[0];\n};\n\nconst getCreateContainer = config => resourceId => {\n  let { dataServers, resources } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) throw new Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  if (dataModel.create?.container) {\n    return dataModel.create?.container;\n  } else if (dataModel.create?.server) {\n    return findCreateContainerWithTypes(dataModel.types, dataModel.create?.server, dataServers);\n  } else {\n    const defaultServerKey = getServerKeyFromType('default', dataServers);\n    return findCreateContainerWithTypes(dataModel.types, defaultServerKey, dataServers);\n  }\n};\n\nexport default getCreateContainer;\n","import jsonld from 'jsonld';\n\nexport const isType = (type, resource) => {\n  const resourceType = resource.type || resource['@type'];\n  return Array.isArray(resourceType) ? resourceType.includes(type) : resourceType === type;\n};\n\nconst fetchContainers = async (containers, resourceId, params, config) => {\n  const { dataServers, httpClient, jsonContext } = config;\n\n  // Transform in an containerUri:serverKey object\n  const containersServers = Object.keys(containers).reduce(\n    (acc, serverKey) => ({\n      ...acc,\n      ...Object.fromEntries(containers[serverKey].map(containerUri => [containerUri, serverKey]))\n    }),\n    {}\n  );\n\n  const fetchPromises = Object.keys(containersServers).map(containerUri =>\n    httpClient(containerUri, {\n      noToken: !containersServers[containerUri] || dataServers[containersServers[containerUri]].authServer !== true\n    })\n      .then(({ json }) => {\n        // If container's context is different, compact it to have an uniform result\n        // TODO deep compare if the context is an object\n        if (json['@context'] !== jsonContext) {\n          return jsonld.compact(json, jsonContext);\n        } else {\n          return json;\n        }\n      })\n      .then(json => {\n        if (isType('ldp:Container', json)) {\n          return json['ldp:contains'];\n        } else {\n          throw new Error(containerUri + ' is not a LDP container');\n        }\n      })\n  );\n\n  // Fetch simultaneously all containers\n  let results = await Promise.all(fetchPromises);\n\n  if (results.length === 0) {\n    return { data: [], total: 0 };\n  } else {\n    // Merge all results in one array\n    results = [].concat.apply(...results);\n\n    let returnData = results.map(item => {\n      item.id = item.id || item['@id'];\n      return item;\n    });\n\n    // Apply filter to results\n    if (params.filter) {\n      // For SPARQL queries, we use \"a\" to filter types, but in containers it must be \"type\"\n      if (params.filter.a) {\n        params.filter.type = params.filter.a;\n        delete params.filter.a;\n      }\n\n      // Remove search params from filter\n      if (params.filter.q) {\n        delete params.filter.q;\n      }\n      if (Object.keys(params.filter).length > 0) {\n        returnData = returnData.filter(resource =>\n          Object.entries(params.filter).some(([k, v]) =>\n            Array.isArray(resource[k]) ? resource[k].includes(v) : resource[k] === v\n          )\n        );\n      }\n    }\n\n    if (params.sort) {\n      returnData = returnData.sort((a, b) => {\n        if (a[params.sort.field] && b[params.sort.field]) {\n          if (params.sort.order === 'ASC') {\n            return a[params.sort.field].localeCompare(b[params.sort.field]);\n          } else {\n            return b[params.sort.field].localeCompare(a[params.sort.field]);\n          }\n        } else {\n          return true;\n        }\n      });\n    }\n    if (params.pagination) {\n      returnData = returnData.slice(\n        (params.pagination.page - 1) * params.pagination.perPage,\n        params.pagination.page * params.pagination.perPage\n      );\n    }\n\n    return { data: returnData, total: results.length };\n  }\n};\n\nexport default fetchContainers;\n","const getEmbedFrame = paths => {\n  let embedFrame = {},\n    predicates;\n  if (paths) {\n    for (let path of paths) {\n      if (path.includes('/')) {\n        predicates = path.split('/').reverse();\n      } else {\n        predicates = [path];\n      }\n      embedFrame = {\n        ...embedFrame,\n        ...predicates.reduce(\n          (accumulator, predicate) => ({\n            [predicate]: {\n              '@embed': '@last',\n              ...accumulator\n            }\n          }),\n          {}\n        )\n      };\n    }\n    return embedFrame;\n  }\n};\n\nexport default getEmbedFrame;\n","import crypto from 'crypto';\n\n// Transform ['ont:predicate1/ont:predicate2'] to ['ont:predicate1', 'ont:predicate1/ont:predicate2']\nconst extractNodes = predicates => {\n  let nodes = [];\n  if (predicates) {\n    for (let predicate of predicates) {\n      if (predicate.includes('/')) {\n        const nodeNames = predicate.split('/');\n        for (let i = 1; i <= nodeNames.length; i++) {\n          nodes.push(nodeNames.slice(0, i).join('/'));\n        }\n      } else {\n        nodes.push(predicate);\n      }\n    }\n  }\n  return nodes;\n};\n\nconst generateSparqlVarName = node =>\n  crypto\n    .createHash('md5')\n    .update(node)\n    .digest('hex');\n\nconst getParentNode = node => node.includes('/') && node.split('/')[0];\n\nconst getPredicate = node => (node.includes('/') ? node.split('/')[1] : node);\n\nconst buildOptionalQuery = (queries, parentNode = false) =>\n  queries\n    .filter(q => q.parentNode === parentNode)\n    .map(\n      q => `\n      OPTIONAL { \n        ${q.query}\n        ${q.filter}\n        ${buildOptionalQuery(queries, q.node)}\n      }\n    `\n    )\n    .join('\\n');\n\nconst buildDereferenceQuery = predicates => {\n  let queries = [];\n  const nodes = extractNodes(predicates);\n\n  if (nodes) {\n    for (let node of nodes) {\n      const parentNode = getParentNode(node);\n      const predicate = getPredicate(node);\n      const varName = generateSparqlVarName(node);\n      const parentVarName = parentNode ? generateSparqlVarName(parentNode) : '1';\n\n      queries.push({\n        node,\n        parentNode,\n        query: `?s${parentVarName} ${predicate} ?s${varName} .\\n?s${varName} ?p${varName} ?o${varName} .`,\n        filter: '' // `FILTER(isBLANK(?s${varName})) .`\n      });\n    }\n\n    return {\n      construct: queries.map(q => q.query).join('\\n'),\n      where: buildOptionalQuery(queries)\n    };\n  } else {\n    return {\n      construct: '',\n      where: ''\n    };\n  }\n};\n\nexport default buildDereferenceQuery;\n","import buildDereferenceQuery from './buildDereferenceQuery';\nimport getRdfPrefixes from './getRdfPrefixes';\n\nconst buildSparqlQuery = ({ containers, params: { filter }, dereference, ontologies }) => {\n  let searchWhereQuery = '',\n    filterWhereQuery = '';\n\n  if (filter) {\n    if (filter.q && filter.q.length > 0) {\n      searchWhereQuery += `\n      {\n        SELECT ?s1\n        WHERE {\n          ?s1 ?p1 ?o1 .\n          FILTER regex(lcase(str(?o1)), \"${filter.q.toLowerCase()}\")\n          FILTER NOT EXISTS {?s1 a ?o1}\n        }\n      }\n      `;\n      delete filter.q;\n    }\n    Object.keys(filter).forEach(predicate => {\n      if (filter[predicate]) {\n        const object = filter[predicate].startsWith('http') ? `<${filter[predicate]}>` : filter[predicate];\n        filterWhereQuery += `?s1 ${predicate} ${object} .`;\n      }\n    });\n  }\n\n  const dereferenceQuery = buildDereferenceQuery(dereference);\n\n  return `\n    ${getRdfPrefixes(ontologies)}\n    CONSTRUCT {\n      ?s1 ?p2 ?o2 .\n      ${dereferenceQuery.construct}\n    }\n    WHERE {\n      ${filterWhereQuery}\n      ?containerUri ldp:contains ?s1 .\n      FILTER( ?containerUri IN (${containers.map(container => `<${container}>`).join(', ')}) ) .\n      FILTER( (isIRI(?s1)) ) .\n      ${searchWhereQuery}\n      ${dereferenceQuery.where}\n      ?s1 ?p2 ?o2 .\n    }\n  `;\n};\n\nexport default buildSparqlQuery;\n","const getRdfPrefixes = ontologies => {\n  return ontologies.map(ontology => `PREFIX ${ontology.prefix}: <${ontology.url}>`).join('\\n');\n};\n\nexport default getRdfPrefixes;\n","import getEmbedFrame from './getEmbedFrame';\nimport buildSparqlQuery from './buildSparqlQuery';\nimport jsonld from 'jsonld';\n\nconst fetchSparqlEndpoints = async (containers, resourceId, params, config) => {\n  const { dataServers, resources, httpClient, jsonContext, ontologies } = config;\n  const dataModel = resources[resourceId];\n\n  const frame = {\n    '@context': jsonContext,\n    '@type': dataModel.types,\n    // Embed only what we explicitly asked to dereference\n    // Otherwise we may have same-type resources embedded in other resources\n    '@embed': '@never',\n    ...getEmbedFrame(dataModel.list?.dereference)\n  };\n\n  const sparqlQueryPromises = Object.keys(containers).map(\n    serverKey =>\n      new Promise((resolve, reject) => {\n        const sparqlQuery = buildSparqlQuery({\n          containers: containers[serverKey],\n          params: { ...params, filter: { ...dataModel.list?.filter, ...params.filter } },\n          dereference: dataModel.list?.dereference,\n          ontologies\n        });\n\n        httpClient(dataServers[serverKey].sparqlEndpoint, {\n          method: 'POST',\n          body: sparqlQuery,\n          noToken: dataServers[serverKey].authServer !== true\n        })\n          .then(({ json }) => {\n            // omitGraph option force results to be in a @graph, even if we have a single result\n            return jsonld.frame(json, frame, { omitGraph: false });\n          })\n          .then(compactJson => {\n            resolve(compactJson['@graph'] || []);\n          })\n          .catch(e => reject(e));\n      })\n  );\n\n  // Run simultaneous SPARQL queries\n  let results = await Promise.all(sparqlQueryPromises);\n\n  if (results.length === 0) {\n    return { data: [], total: 0 };\n  } else {\n    // Merge all results in one array\n    results = [].concat.apply(...results);\n\n    // Add id in addition to @id, as this is what React-Admin expects\n    let returnData = results.map(item => {\n      item.id = item.id || item['@id'];\n      return item;\n    });\n\n    // TODO sort and paginate the results in the SPARQL query to improve performances\n    if (params.sort) {\n      returnData = returnData.sort((a, b) => {\n        if (a[params.sort.field] && b[params.sort.field]) {\n          if (params.sort.order === 'ASC') {\n            return a[params.sort.field].localeCompare(b[params.sort.field]);\n          } else {\n            return b[params.sort.field].localeCompare(a[params.sort.field]);\n          }\n        } else {\n          return true;\n        }\n      });\n    }\n    if (params.pagination) {\n      returnData = returnData.slice(\n        (params.pagination.page - 1) * params.pagination.perPage,\n        params.pagination.page * params.pagination.perPage\n      );\n    }\n\n    return { data: returnData, total: results.length };\n  }\n};\n\nexport default fetchSparqlEndpoints;\n","import findContainersWithTypes from '../utils/findContainersWithTypes';\nimport fetchContainers from '../utils/fetchContainers';\nimport fetchSparqlEndpoints from '../utils/fetchSparqlEndpoints';\n\nconst getListMethod = config => async (resourceId, params = {}) => {\n  let { dataServers, resources } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) throw new Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  let containers;\n  if (dataModel.list?.containers && dataModel.list?.containers.length > 0) {\n    // If containers are set explicitly, use them\n    containers = dataModel.list?.containers;\n  } else {\n    containers = findContainersWithTypes(dataModel.types, dataModel.list?.servers, dataServers);\n  }\n\n  if (dataModel.list?.fetchContainer) {\n    return fetchContainers(containers, resourceId, params, config);\n  } else {\n    return fetchSparqlEndpoints(containers, resourceId, params, config);\n  }\n};\n\nexport default getListMethod;\n","import getOne from './getOne';\n\nconst getManyMethod = config => async (resourceId, params) => {\n  const { returnFailedResources } = config;\n\n  let returnData = [];\n\n  for (let id of params.ids) {\n    id = typeof id === 'object' ? id['@id'] : id;\n\n    try {\n      const { data } = await getOne(config)(resourceId, { id });\n      returnData.push(data);\n    } catch (e) {\n      // Catch if one resource fails to load\n      // Otherwise no references will be show if only one is missing\n      // See https://github.com/marmelab/react-admin/issues/5190\n      if (returnFailedResources) {\n        // Return only the ID of the resource\n        returnData.push({ id });\n      } else {\n        // Do nothing. The resource will not appear in the results.\n      }\n    }\n  }\n\n  return { data: returnData };\n};\n\nexport default getManyMethod;\n","import getList from './getList';\n\nconst getManyReferenceMethod = config => async (resourceId, params) => {\n  params.filter = { ...params.filter, [params.target]: params.id };\n  delete params.target;\n  return await getList(config)(params);\n};\n\nexport default getManyReferenceMethod;\n","import uploadAllFiles from '../utils/uploadAllFiles';\nimport getServerKeyFromUri from '../utils/getServerKeyFromUri';\n\nconst updateMethod = config => async (resourceId, params) => {\n  const { dataServers, httpClient, jsonContext } = config;\n  const serverKey = getServerKeyFromUri(params.id, dataServers);\n\n  // Upload files, if there are any\n  params.data = await uploadAllFiles(params.data, config);\n\n  await httpClient(params.id, {\n    method: 'PUT',\n    body: JSON.stringify({\n      '@context': jsonContext,\n      ...params.data\n    }),\n    noToken: !serverKey || dataServers[serverKey].authServer !== true\n  });\n\n  return { data: params.data };\n};\n\nexport default updateMethod;\n","import jwtDecode from 'jwt-decode';\nimport getServerKeyFromType from './getServerKeyFromType';\nimport urlJoin from 'url-join';\n\nconst getContainerFromUri = str => str.match(new RegExp(`(.*)/.*`))[1];\n\nconst fetchUserConfig = async config => {\n  const { dataServers, httpClient } = config;\n  const token = localStorage.getItem('token');\n  const podKey = getServerKeyFromType('pod', dataServers);\n  const authServerKey = getServerKeyFromType('authServer', dataServers);\n\n  // If the user is logged in\n  if (token) {\n    const { webId } = jwtDecode(token);\n    const { json: userData } = await httpClient(webId);\n\n    // If we have a POD server\n    if (podKey) {\n      // Fill the config provided to the data provider\n      // We must modify the config object directly\n      config.dataServers[podKey].name = 'My Pod';\n      config.dataServers[podKey].baseUrl = urlJoin(webId, 'data'); // TODO find POD URI from user profile\n      config.dataServers[podKey].sparqlEndpoint =\n        userData.endpoints?.['void:sparqlEndpoint'] || urlJoin(webId, 'sparql');\n    }\n\n    if (authServerKey) {\n      // Fill the config provided to the data provider\n      // We must modify the config object directly\n      config.dataServers[authServerKey].proxyUrl = userData.endpoints?.proxyUrl;\n    }\n  } else {\n    if (podKey) {\n      // If the user is not logged in, ignore the POD server\n      delete config.dataServers[podKey];\n    }\n  }\n};\n\nexport default fetchUserConfig;\n","const fetchVoidEndpoints = async config => {\n  const fetchPromises = Object.values(config.dataServers)\n    .filter(server => server.pod !== true)\n    .map(server =>\n      config\n        .httpClient(new URL('/.well-known/void', server.baseUrl))\n        .then(result => ({ data: result.json }))\n        .catch(e => {\n          if (e.status === 404) {\n            return { error: e };\n          } else {\n            throw e;\n          }\n        })\n    );\n\n  try {\n    const results = await Promise.all(fetchPromises);\n\n    for (let result of results) {\n      // Ignore unfetchable endpoints\n      if (result.data) {\n        // TODO modify config.dataServers based on the VOID configs returned\n      }\n    }\n  } catch (e) {\n    // no block methods if no VOID\n  }\n};\n\nexport default fetchVoidEndpoints;\n","import React from 'react';\nimport { DateTimeInput as RaDateTimeInput } from 'react-admin';\n\n/**\n * @deprecated Use the component from the @semapps/date-components instead\n */\nconst DateTimeInput = props => (\n  <RaDateTimeInput {...props} format={value => value && value.replace(' ', 'T').replace('Z', '')} />\n);\n\nexport default DateTimeInput;\n","import React from 'react';\nimport { useQueryWithStore } from 'react-admin';\nimport { default as FilterHandler } from './FilterHandler';\n\n/*\n * @example Label used in examples\n *  const Label = ({label, ...otherProps})=>{\n *     return <h2>{label}</h2>\n *  }\n *\n * @example show header for each group with group property thanks to groupHeader\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupHeader={({group,...otherProps}) => <Label {...otherProps} label={group['pair:label']}></Label> }\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example call chhildren with label thanks to groupLabel\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example conditional show of group if no data in source. Conditionale groupHeader is not possible because GroupedArrayField define group before filter ; need use chhildren.\n * const ConditionalSourceDefinedHandler = ({record,source,children,...otherProps})=>{\n *   if (record?.[source] && (!Array.isArray(record[source])||record[source].length>0)){\n *     return  React.Children.map(children, (child, i) => {\n *         return React.cloneElement(child, {...otherProps,record,source});\n *       })\n *   }else{\n *     return <></>\n *   }\n * }\n *\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *  <ConditionalSourceDefinedHandler>\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n *  </ConditionalSourceDefinedHandler>\n * </GroupedReferenceHandler>\n *\n *\n */\nconst GroupedReferenceHandler = ({\n  children,\n  groupReference,\n  groupLabel,\n  groupHeader,\n  filterProperty,\n  ...otherProps\n}) => {\n  const { data } = useQueryWithStore({\n    type: 'getList',\n    resource: groupReference,\n    payload: {}\n  });\n\n  return (\n    <>\n      {data?.map((data, index) => {\n        let filter = {};\n        filter[filterProperty] = data.id;\n        return (\n          <>\n            {groupHeader && groupHeader({ ...otherProps, group: data })}\n            <FilterHandler {...otherProps} filter={filter} label={data[groupLabel]}>\n              {children}\n            </FilterHandler>\n          </>\n        );\n      })}\n    </>\n  );\n};\n\nexport default GroupedReferenceHandler;\n","import React from 'react';\nimport { ImageField as RaImageField } from 'react-admin';\n\nconst ImageField = ({ record, source, ...otherProps }) => {\n  // For the display, we need to have the URI in a src property\n  if (typeof record === 'string') record = { [source]: record };\n  return <RaImageField record={record} source={source} {...otherProps} />;\n};\n\nexport default ImageField;\n","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n","import createMethod from './methods/create';\nimport deleteMethod from './methods/delete';\nimport deleteManyMethod from './methods/deleteMany';\nimport getCreateContainerMethod from './methods/getCreateContainer';\nimport getListMethod from './methods/getList';\nimport getManyMethod from './methods/getMany';\nimport getManyReferenceMethod from './methods/getManyReference';\nimport getOneMethod from './methods/getOne';\nimport updateMethod from './methods/update';\nimport fetchUserConfig from './utils/fetchUserConfig';\nimport fetchVoidEndpoints from './utils/fetchVoidEndpoints';\nimport getServerKeyFromType from './utils/getServerKeyFromType';\n\nconst dataProvider = config => {\n  // TODO verify all data provider config + data models\n  if (!getServerKeyFromType('default', config.dataServers))\n    throw new Error('You must define a default server in your dataServers config');\n\n  if (!config.jsonContext) config.jsonContext = Object.fromEntries(config.ontologies.map(o => [o.prefix, o.url]));\n  if (!config.returnFailedResources) config.returnFailedResources = false;\n\n  const fetchUserConfigPromise = fetchUserConfig(config);\n  const fetchVoidEndpointsPromise = fetchVoidEndpoints(config);\n\n  const waitForVoidEndpoints = method => async (...arg) => {\n    await fetchUserConfigPromise;\n    await fetchVoidEndpointsPromise; // Return immediately if promise is fulfilled\n    return await method(...arg);\n  };\n\n  return {\n    getList: waitForVoidEndpoints(getListMethod(config)),\n    getOne: waitForVoidEndpoints(getOneMethod(config)),\n    getMany: waitForVoidEndpoints(getManyMethod(config)),\n    getManyReference: waitForVoidEndpoints(getManyReferenceMethod(config)),\n    create: waitForVoidEndpoints(createMethod(config)),\n    update: waitForVoidEndpoints(updateMethod(config)),\n    updateMany: () => {\n      throw new Error('updateMany is not implemented yet');\n    },\n    delete: waitForVoidEndpoints(deleteMethod(config)),\n    deleteMany: waitForVoidEndpoints(deleteManyMethod(config)),\n    getCreateContainer: waitForVoidEndpoints(getCreateContainerMethod(config))\n  };\n};\n\nexport default dataProvider;\n","import { fetchUtils } from 'react-admin';\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) options.headers = new Headers();\n\n  switch (options.method) {\n    case 'POST':\n    case 'PATCH':\n    case 'PUT':\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      if (!options.headers.has('Content-Type')) options.headers.set('Content-Type', 'application/ld+json');\n      break;\n\n    case 'DELETE':\n      break;\n\n    case 'GET':\n    default:\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      break;\n  }\n\n  if (!options.noToken) {\n    const token = localStorage.getItem('token');\n    if (token) options.headers.set('Authorization', `Bearer ${token}`);\n  }\n\n  return fetchUtils.fetchJson(url, options);\n};\n\nexport default httpClient;\n","import { useContext, useState, useEffect } from 'react';\nimport { DataProviderContext } from 'react-admin';\n\nconst useCreateContainer = resourceId => {\n  // Get the raw data provider, since useDataProvider returns a wrapper\n  const dataProvider = useContext(DataProviderContext);\n  const [createContainer, setCreateContainer] = useState();\n\n  useEffect(() => {\n    if (resourceId) {\n      dataProvider.getCreateContainer(resourceId).then(containerUri => setCreateContainer(containerUri));\n    }\n  }, [resourceId]);\n\n  return createContainer;\n};\n\nexport default useCreateContainer;\n"],"names":["ReferenceArrayField","record","source","otherProps","Array","isArray","map","i","id","React","RaReferenceArrayField","defaultProps","addLabel","ReferenceField","_typeof","RaReferenceField","FilterHandler","children","filter","useState","filtered","setFiltered","useEffect","filteredData","r","eq","key","value","includes","newRecord","length","undefined","Children","child","cloneElement","ReferenceArrayInput","props","resource","useResourceContext","RaReferenceArrayInput","format","v","useReferenceInputStyles","makeStyles","form","display","input","paddingRight","useHideInputStyles","root","getServerKeyFromType","type","dataServers","Object","keys","find","getServerKeyFromUri","uri","startsWith","baseUrl","fetchResource","resourceUri","config","httpClient","jsonContext","authServerKey","serverKey","_dataServers$authServ","proxyUrl","noProxy","method","headers","Headers","body","URLSearchParams","noToken","data","json","jsonld","compact","getOneMethod","resourceId","params","resources","dataModel","Error","list","_dataModel$list","forceArray","_dataModel$list2","forceArrayItem","_dataModel$list3","dereference","_dataModel$list4","dereferenceItem","dataToEmbed","isFile","o","rawFile","File","getUploadsContainerUri","uploadsContainer","urlJoin","uploadFile","uploadsContainerUri","Slug","fileName","name","fileExtension","splitFileName","split","pop","join","createSlug","lang","response","status","get","uploadAllFiles","property","hasOwnProperty","findContainersWithTypes","types","servers","containers","existingContainers","forEach","key1","key2","path","containerUri","push","createMethod","fieldsMapping","_dataModel$fieldsMapp","title","set","_dataModel$fieldsMapp2","create","_dataModel$create","container","_dataModel$create2","server","serverKeys","JSON","stringify","authServer","responseHeaders","getOne","deleteMethod","deleteManyMethod","ids","findCreateContainerWithTypes","createServerKey","getCreateContainer","_dataModel$create3","_dataModel$create4","defaultServerKey","fetchContainers","containersServers","reduce","acc","fromEntries","fetchPromises","then","resourceType","Promise","all","results","total","concat","apply","returnData","item","a","q","entries","some","k","sort","b","field","order","localeCompare","pagination","slice","page","perPage","getEmbedFrame","paths","predicates","embedFrame","reverse","accumulator","predicate","generateSparqlVarName","node","crypto","createHash","update","digest","getParentNode","getPredicate","buildOptionalQuery","queries","parentNode","query","buildDereferenceQuery","nodes","nodeNames","extractNodes","varName","parentVarName","construct","where","buildSparqlQuery","ontologies","searchWhereQuery","filterWhereQuery","toLowerCase","object","dereferenceQuery","ontology","prefix","url","getRdfPrefixes","fetchSparqlEndpoints","frame","sparqlQueryPromises","resolve","reject","sparqlQuery","sparqlEndpoint","omitGraph","compactJson","e","getListMethod","_dataModel$list5","fetchContainer","getManyMethod","returnFailedResources","getManyReferenceMethod","target","getList","updateMethod","fetchUserConfig","token","localStorage","getItem","podKey","jwtDecode","webId","userData","endpoints","_userData$endpoints2","fetchVoidEndpoints","values","pod","URL","result","error","RaDateTimeInput","replace","groupReference","groupLabel","groupHeader","filterProperty","useQueryWithStore","payload","index","group","label","RaImageField","RaReferenceInput","reificationClass","flexFormClasses","hideInputStyles","ArrayInput","SimpleFormIterator","classes","className","TextInput","initialValue","fetchUserConfigPromise","fetchVoidEndpointsPromise","waitForVoidEndpoints","getMany","getManyReference","updateMany","deleteMany","getCreateContainerMethod","options","has","fetchUtils","fetchJson","dataProvider","useContext","DataProviderContext","createContainer","setCreateContainer"],"mappings":"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"}