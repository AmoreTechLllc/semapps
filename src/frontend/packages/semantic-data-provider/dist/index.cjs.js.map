{"version":3,"file":"index.cjs.js","sources":["../src/fields/ReferenceArrayField.js","../src/fields/ReferenceField.js","../src/fields/FilteredArrayField.js","../src/fields/GroupedArrayField.js","../src/inputs/ReferenceArrayInput.js","../src/inputs/ReificationArrayInput.js","../src/buildDereferenceQuery.js","../src/buildSparqlQuery.js","../src/dataProvider.js","../src/inputs/DateTimeInput.js","../src/fields/ImageField.js","../src/inputs/ReferenceInput.js","../src/httpClient.js"],"sourcesContent":["import React from 'react';\nimport { ReferenceArrayField as RaReferenceArrayField } from 'react-admin';\n\nconst ReferenceArrayField = ({ record, source, ...otherProps }) => {\n  if (record?.[source]) {\n    if (!Array.isArray(record[source])) {\n      record[source] = [record[source]];\n    }\n    record[source] = record[source].map(i => i['@id'] || i.id || i);\n  }\n  return <RaReferenceArrayField record={record} source={source} {...otherProps} />;\n};\n\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceArrayField;\n","import React from 'react';\nimport { ReferenceField as RaReferenceField } from 'react-admin';\n\nconst ReferenceField = ({ record, source, ...otherProps }) => {\n  if (record[source]) {\n    if (typeof record[source] === 'object') {\n      record[source] = record[source]['@id'] || record[source].id;\n    }\n  }\n  return <RaReferenceField record={record} source={source} {...otherProps} />;\n};\n\nReferenceField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceField;\n","import React, { useState, useEffect } from 'react';\nimport { ArrayField } from 'react-admin';\n\n/**\n * @example\n * <Show>\n *   <FilteredArrayField\n *     source=\"pair:organizationOfMembership\"\n *     filter={{\n *       'pair:membershipRole':'http://localhost:3000/membership-roles/role-1'\n *     }}\n *     >\n *     <SingleFieldList>\n *    </SingleFieldList>\n *   </FilteredArrayField>\n * </Show>\n */\n\nconst FilteredArrayField = ({ children, record, filter, source, ...otherProps }) => {\n  const [filtered, setFiltered] = useState();\n  useEffect(() => {\n    if (record && source && Array.isArray(record[source])) {\n      const filteredData = record[source].filter(r => {\n        let eq = true;\n        for (const key in filter) {\n          const value = r[key];\n          if (Array.isArray(value)) {\n            if (!value.includes(filter[key])) {\n              eq = false;\n            }\n          } else {\n            if (value !== filter[key]) {\n              eq = false;\n            }\n          }\n        }\n        return eq;\n      });\n      let newRecord = {\n        ...record\n      };\n      newRecord[source] = filteredData;\n      setFiltered(newRecord);\n    }\n  }, [record, source, filter]);\n\n  return (\n    <ArrayField record={filtered} source={source} {...otherProps}>\n      {children}\n    </ArrayField>\n  );\n};\n\nFilteredArrayField.defaultProps = {\n  addLabel: true\n};\n\nexport default FilteredArrayField;\n","import React, { useState, useEffect, createElement } from 'react';\nimport { ArrayField, useDataProvider, useResourceContext } from 'react-admin';\nimport { default as FilteredArrayField } from './FilteredArrayField';\nimport { Typography, Box } from '@material-ui/core';\n\n/**\n * @example 1 : simple group label\n * <GroupedArrayField\n *   source=\"property\"\n *   groupReference=\"RAresource\"\n *   groupLabel=\"property of RAresource display\"\n *   groupVariant=\"Typography MaterialUI variant\"\n *   filterProperty=\"property of source filtered by groupReference\"\n * >\n *   <SingleFieldList>\n *   </SingleFieldList>\n * </GroupedArrayField>\n */\n\n/**\n * @example 2 : custom group label\n * <GroupedArrayField\n *   source=\"property\"\n *   groupReference=\"RAresource\"\n *   groupComponent={({record, ...otherProps })=>\n *     <RightLabel label={record['property of RAresource display']}/>\n *   }\n *   filterProperty=\"property of source filtered by groupReference\"\n * >\n *   <SingleFieldList>\n *   </SingleFieldList>\n * </GroupedArrayField>\n */\n\nconst GroupedArrayField = ({\n  children,\n  groupReference,\n  groupLabel,\n  filterProperty,\n  groupComponent,\n  groupVariant,\n  ...otherProps\n}) => {\n  const dataProvider = useDataProvider();\n  const [groups, setGroups] = useState();\n\n  useEffect(() => {\n    if (!groups) {\n      dataProvider.getResources().then(resources => {\n        const resource = resources.data[groupReference];\n        dataProvider\n          .getList(groupReference, { '@id': resource.containerUri })\n          .then(groups => {\n            setGroups(groups.data);\n          })\n          .catch(e => {\n            setGroups([]);\n          });\n      });\n    }\n  }, [groups]);\n\n  return (\n    <>\n      {groups?.map((group, index) => {\n        let filter = {};\n        filter[filterProperty] = group.id;\n        return (\n          <Box key={index}>\n            {groupComponent && groupComponent(group)\n            // createElement(groupComponent,{record:group})\n            }\n            {!groupComponent && (\n              <Typography variant={groupVariant} align=\"left\" noWrap>\n                {group[groupLabel]}\n              </Typography>\n            )}\n\n            <FilteredArrayField {...otherProps} filter={filter}>\n              {children}\n            </FilteredArrayField>\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n\nGroupedArrayField.defaultProps = {\n  addLabel: true\n};\n\nexport default GroupedArrayField;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // if the linked field value is not an array, turns it into an array.\n        // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n        // and the ReferenceArrayInput component only accept arrays\n        if (!Array.isArray(value)) value = [value];\n        // If a format prop was defined, apply it to the array\n        if (props.format) value = props.format(value);\n        // If the values are objects with @id field, turn it to a simple string\n        return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n      }}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;\n","import React, { useEffect, useState } from 'react';\nimport { ArrayInput, SimpleFormIterator, TextInput } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useReferenceInputStyles = makeStyles({\n  form: {\n    display: 'flex'\n  },\n  input: {\n    paddingRight: '20px'\n  }\n});\n\nconst useHideInputStyles = makeStyles({\n  root: {\n    display: 'none'\n  }\n});\n\nconst ReificationArrayInput = props => {\n  const { reificationClass, children, ...otherProps } = props;\n  const flexFormClasses = useReferenceInputStyles();\n  const hideInputStyles = useHideInputStyles();\n\n  return (\n    <ArrayInput {...otherProps}>\n      <SimpleFormIterator classes={{ form: flexFormClasses.form }}>\n        {React.Children.map(props.children, (child, i) => {\n          return React.cloneElement(child, {\n            className: flexFormClasses.input\n          });\n        })}\n        <TextInput className={hideInputStyles.root} source=\"type\" initialValue={reificationClass} />\n      </SimpleFormIterator>\n    </ArrayInput>\n  );\n};\n\nexport default ReificationArrayInput;\n","// Return an object in the form of predicate => parentPredicate\nconst flattenPredicate = (accumulator, predicate, parent = 'root') => {\n  if (predicate.includes('/')) {\n    const matches = predicate.split(/\\/(.+)/);\n    accumulator[matches[0]] = parent;\n    flattenPredicate(accumulator, matches[1], matches[0]);\n  } else {\n    accumulator[predicate] = parent;\n  }\n  return accumulator;\n};\n\n// Transform ontology:predicate to OntologyPredicate in order to use it as a variable name\nconst generateSparqlVarName = predicate =>\n  predicate\n    .split(':')\n    .map(s => s[0].toUpperCase() + s.slice(1))\n    .join('');\n\nconst buildDereferenceQuery = predicates => {\n  let queries = [];\n\n  if (predicates) {\n    const flattenedPredicates = predicates.reduce((acc, predicate) => flattenPredicate(acc, predicate), {});\n\n    for (const [predicate, parent] of Object.entries(flattenedPredicates)) {\n      const varName = generateSparqlVarName(predicate);\n      const parentVarName = parent === 'root' ? '1' : generateSparqlVarName(parent);\n\n      // Group queries by parent, so that we can group WHERE triples in the same OPTIONAL tag\n      const groupKey = parent === 'root' ? predicate : parent;\n      if (!queries[groupKey]) queries[groupKey] = [];\n\n      queries[groupKey].push(`\n        ?s${parentVarName} ${predicate} ?s${varName} .\n        ?s${varName} ?p${varName} ?o${varName} .\n      `);\n    }\n  }\n\n  return {\n    construct: Object.values(queries)\n      .map(groupedQueries => Object.values(groupedQueries).join('\\n'))\n      .join('\\n'),\n    where: Object.values(queries)\n      .map(groupedQueries => `OPTIONAL { ${Object.values(groupedQueries).join('\\n')} }`)\n      .join('\\n')\n  };\n};\n\nexport default buildDereferenceQuery;\n","import buildDereferenceQuery from './buildDereferenceQuery';\n\nconst getPrefixRdf = ontologies => {\n  return ontologies.map(ontology => `PREFIX ${ontology.prefix}: <${ontology.url}>`).join('\\n');\n};\n\nconst buildSparqlQuery = ({ types, params: { pagination, sort, filter }, dereference, ontologies }) => {\n  let whereQuery = '';\n\n  if (filter) {\n    if (filter.q && filter.q.length > 0) {\n      whereQuery += `\n      {\n        SELECT ?s1\n        WHERE {\n          ?s1 ?p1 ?o1 .\n          FILTER regex(lcase(str(?o1)), \"${filter.q.toLowerCase()}\")\n          FILTER NOT EXISTS {?s1 a ?o1}\n        }\n      }\n      `;\n      delete filter.q;\n    }\n    Object.keys(filter).forEach(predicate => {\n      const object = filter[predicate].startsWith('http') ? `<${filter[predicate]}>` : filter[predicate];\n      whereQuery += `?s1 ${predicate} ${object} .`;\n    });\n  }\n\n  const dereferenceQuery = buildDereferenceQuery(dereference);\n\n  return `\n    ${getPrefixRdf(ontologies)}\n    CONSTRUCT {\n      ?s1 ?p2 ?o2 .\n      ${dereferenceQuery.construct}\n    }\n    WHERE {\n      ?s1 a ?type .\n      FILTER( ?type IN (${types.join(', ')}) ) .\n      FILTER( (isIRI(?s1)) ) .\n      ${whereQuery}\n      ${dereferenceQuery.where}\n      ?s1 ?p2 ?o2 .\n    }\n    # TODO try to make pagination work in SPARQL as this doesn't work.\n    # LIMIT ${pagination.perPage}\n    # OFFSET ${(pagination.page - 1) * pagination.perPage}\n  `;\n};\n\nexport default buildSparqlQuery;\n","import jsonld from 'jsonld';\nimport buildSparqlQuery from './buildSparqlQuery';\nconst createSlug = require('speakingurl');\n\nconst buildJsonContext = ontologies => {\n  let pattern = {};\n  ontologies.forEach(ontology => (pattern[ontology.prefix] = ontology.url));\n  return pattern;\n};\n\nconst isFile = o => o && o.rawFile && o.rawFile instanceof File;\n\nconst getSlugWithExtension = fileName => {\n  let fileExtension = '';\n  let splitFileName = fileName.split('.');\n  if (splitFileName.length > 1) {\n    fileExtension = splitFileName.pop();\n    fileName = splitFileName.join('.');\n  }\n  return createSlug(fileName, { lang: 'fr' }) + '.' + fileExtension;\n};\n\nconst isType = (type, resource) => {\n  const resourceType = resource.type || resource['@type'];\n  return Array.isArray(resourceType) ? resourceType.includes(type) : resourceType === type;\n};\n\nconst dataProvider = ({ sparqlEndpoint, httpClient, resources, ontologies, jsonContext, uploadsContainerUri }) => {\n  const uploadFile = async rawFile => {\n    if (!uploadsContainerUri) throw new Error('No uploadsContainerUri defined for the data provider');\n\n    const response = await httpClient(uploadsContainerUri, {\n      method: 'POST',\n      body: rawFile,\n      headers: new Headers({\n        // We must sluggify the file name, because we can't use non-ASCII characters in the header\n        // However we keep the extension apart (if it exists) so that it is not replaced with a -\n        // TODO let the middleware guess the extension based on the content type\n        Slug: getSlugWithExtension(rawFile.name),\n        'Content-Type': rawFile.type\n      })\n    });\n\n    if (response.status === 201) {\n      return response.headers.get('Location');\n    }\n  };\n\n  /*\n   * Look for raw files in the resource data.\n   * If there are any, upload them and replace the file by its URL.\n   */\n  const uploadAllFiles = async resource => {\n    for (let property in resource) {\n      if (resource.hasOwnProperty(property)) {\n        if (Array.isArray(resource[property])) {\n          for (let i = 0; i < resource[property].length; i++) {\n            if (isFile(resource[property][i])) {\n              resource[property][i] = await uploadFile(resource[property][i].rawFile);\n            }\n          }\n        } else {\n          if (isFile(resource[property])) {\n            resource[property] = await uploadFile(resource[property].rawFile);\n          }\n        }\n      }\n    }\n    return resource;\n  };\n\n  return {\n    getResources: async (resourceId, params) => {\n      return { data: resources };\n    },\n    getList: async (resourceId, params) => {\n      if (!resources[resourceId]) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n      if (params.id || params['@id'] || !resources[resourceId].types) {\n        const url = params.id || params['@id'] || resources[resourceId].containerUri;\n        let { json } = await httpClient(url);\n\n        if (isType('ldp:Container', json)) {\n          /*\n           * LDP Container\n           */\n          let returnData = json['ldp:contains'].map(item => {\n            item.id = item.id || item['@id'];\n            return item;\n          });\n\n          // Apply filter to results\n          if (params.filter) {\n            // Remove search params from filter\n            if (params.filter.q) {\n              delete params.filter.q;\n            }\n            if (Object.keys(params.filter).length > 0) {\n              returnData = returnData.filter(resource =>\n                Object.entries(params.filter).some(([k, v]) =>\n                  Array.isArray(resource[k]) ? resource[k].includes(v) : resource[k] === v\n                )\n              );\n            }\n          }\n\n          if (params.pagination) {\n            returnData = returnData.slice(\n              (params.pagination.page - 1) * params.pagination.perPage,\n              params.pagination.page * params.pagination.perPage\n            );\n          }\n\n          return { data: returnData, total: json['ldp:contains'].length };\n        } else {\n          /*\n           * ActivityPub collection\n           */\n\n          // If the collection is split amongst several pages, get the first page\n          if (json.first) {\n            const result = await httpClient(json.first);\n            json = result.json;\n          }\n\n          const listProperty = ['as:orderedItems', 'orderedItems', 'as:items', 'items'].find(p => json[p]);\n          if (!listProperty) throw new Error('Unknown list type');\n\n          // TODO fetch several pages depending on params.pagination\n\n          let returnData = json[listProperty].map(item => {\n            item.id = item.id || item['@id'];\n            return item;\n          });\n\n          return { data: returnData, total: json.totalItems };\n        }\n      } else {\n        /*\n         * Do a SPARQL search\n         */\n        const sparqlQuery = buildSparqlQuery({\n          types: resources[resourceId].types,\n          params: { ...params, filter: { ...resources[resourceId].filter, ...params.filter } },\n          dereference: resources[resourceId].dereference,\n          ontologies\n        });\n\n        const { json } = await httpClient(sparqlEndpoint, {\n          method: 'POST',\n          body: sparqlQuery\n        });\n\n        const compactJson = await jsonld.frame(json, {\n          '@context': jsonContext || buildJsonContext(ontologies),\n          '@type': resources[resourceId].types\n        });\n\n        if (Object.keys(compactJson).length === 1) {\n          // If we have only the context, it means there is no match\n          return { data: [], total: 0 };\n        } else if (!compactJson['@graph']) {\n          // If we have several fields but no @graph, there is a single match\n          compactJson.id = compactJson.id || compactJson['@id'];\n          return { data: [compactJson], total: 1 };\n        } else {\n          const returnData = compactJson['@graph']\n            .map(item => {\n              item.id = item.id || item['@id'];\n              return item;\n            })\n            .sort((a, b) => {\n              if (params.sort && a[params.sort.field] && b[params.sort.field]) {\n                if (params.sort.order === 'DESC') {\n                  return a[params.sort.field].localeCompare(b[params.sort.field]);\n                } else {\n                  return b[params.sort.field].localeCompare(a[params.sort.field]);\n                }\n              } else {\n                return true;\n              }\n            })\n            .slice(\n              (params.pagination.page - 1) * params.pagination.perPage,\n              params.pagination.page * params.pagination.perPage\n            );\n\n          return { data: returnData, total: compactJson['@graph'].length };\n        }\n      }\n    },\n    getOne: async (resourceId, params) => {\n      if (!resources[resourceId]) {\n        Error(`Resource ${resourceId} is not mapped in resources file`);\n      }\n      const dataModel = resources[resourceId];\n\n      let { json } = await httpClient(params.id);\n      json.id = json.id || json['@id'];\n      // TODO compact only if remote context is different from local context\n      const compactJson = await jsonld.compact(json, jsonContext || buildJsonContext(ontologies));\n      // transform single value into array concidering forceArray predicates\n      if (dataModel.forceArray) {\n        for (const forceArrayItem of dataModel.forceArray) {\n          if (compactJson[forceArrayItem] && !Array.isArray(compactJson[forceArrayItem])) {\n            compactJson[forceArrayItem] = [compactJson[forceArrayItem]];\n          }\n        }\n      }\n      return { data: compactJson };\n    },\n    getMany: async (resourceId, params) => {\n      let returnData = [];\n\n      for (let id of params.ids) {\n        id = typeof id === 'object' ? id['@id'] : id;\n\n        try {\n          let { json } = await httpClient(id);\n          json.id = json.id || json['@id'];\n          returnData.push(json);\n        } catch (e) {\n          // Do nothing if one resource fails to load\n          // Otherwise no references will be show if only one is missing\n          // See https://github.com/marmelab/react-admin/issues/5190\n        }\n      }\n\n      return { data: returnData };\n    },\n    getManyReference: (resourceId, params) => {\n      throw new Error('getManyReference is not implemented yet');\n    },\n    create: async (resourceId, params) => {\n      if (!resources[resourceId]) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n      const { slugField, containerUri, types } = resources[resourceId];\n      const headers = new Headers();\n\n      if (slugField) {\n        headers.set(\n          'Slug',\n          Array.isArray(slugField) ? slugField.map(f => params.data[f]).join(' ') : params.data[slugField]\n        );\n      }\n\n      // Upload files, if there are any\n      params.data = await uploadAllFiles(params.data);\n\n      const { headers: responseHeaders } = await httpClient(containerUri, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          '@context': jsonContext || buildJsonContext(ontologies),\n          '@type': types,\n          ...params.data\n        })\n      });\n\n      // Retrieve newly-created resource\n      const resourceUri = responseHeaders.get('Location');\n      let { json } = await httpClient(resourceUri);\n      json.id = json.id || json['@id'];\n      return { data: json };\n    },\n    update: async (resourceId, params) => {\n      // Upload files, if there are any\n      params.data = await uploadAllFiles(params.data);\n      await httpClient(params.id, {\n        method: 'PUT',\n        body: JSON.stringify({\n          '@context': jsonContext || buildJsonContext(ontologies),\n          ...params.data\n        })\n      });\n\n      return { data: params.data };\n    },\n\n    updateMany: (resourceId, params) => {\n      throw new Error('updateMany is not implemented yet');\n    },\n    delete: async (resourceId, params) => {\n      await httpClient(params.id, {\n        method: 'DELETE'\n      });\n\n      return { data: { id: params.id } };\n    },\n    deleteMany: (resourceId, params) => {\n      throw new Error('deleteMany is not implemented yet');\n    }\n  };\n};\n\nexport default dataProvider;\n","import React from 'react';\nimport { DateTimeInput as RaDateTimeInput } from 'react-admin';\n\nconst DateTimeInput = props => (\n  <RaDateTimeInput {...props} format={value => value && value.replace(' ', 'T').replace('Z', '')} />\n);\n\nexport default DateTimeInput;\n","import React from 'react';\nimport { ImageField as RaImageField } from 'react-admin';\n\nconst ImageField = ({ record, source, ...otherProps }) => {\n  // For the display, we need to have the URI in a src property\n  if (typeof record === 'string') record = { [source]: record };\n  return <RaImageField record={record} source={source} {...otherProps} />;\n};\n\nexport default ImageField;\n","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n","import { fetchUtils } from 'react-admin';\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) options.headers = new Headers();\n\n  switch (options.method) {\n    case 'POST':\n    case 'PATCH':\n    case 'PUT':\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      if (!options.headers.has('Content-Type')) options.headers.set('Content-Type', 'application/ld+json');\n      break;\n\n    case 'DELETE':\n      break;\n\n    case 'GET':\n    default:\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      break;\n  }\n\n  const token = localStorage.getItem('token');\n  if (token) options.headers.set('Authorization', `Bearer ${token}`);\n\n  return fetchUtils.fetchJson(url, options);\n};\n\nexport default httpClient;\n"],"names":["ReferenceArrayField","record","source","otherProps","Array","isArray","map","i","id","React","RaReferenceArrayField","defaultProps","addLabel","ReferenceField","_typeof","RaReferenceField","FilteredArrayField","children","filter","useState","filtered","setFiltered","useEffect","filteredData","r","eq","key","value","includes","newRecord","ArrayField","GroupedArrayField","groupReference","groupLabel","filterProperty","groupComponent","groupVariant","dataProvider","useDataProvider","groups","setGroups","getResources","then","resources","resource","data","getList","containerUri","e","group","index","Box","Typography","variant","align","noWrap","ReferenceArrayInput","props","useResourceContext","RaReferenceArrayInput","format","v","useReferenceInputStyles","makeStyles","form","display","input","paddingRight","useHideInputStyles","root","generateSparqlVarName","predicate","split","s","toUpperCase","slice","join","buildSparqlQuery","types","params","pagination","sort","dereference","ontologies","whereQuery","q","length","toLowerCase","Object","keys","forEach","object","startsWith","dereferenceQuery","predicates","queries","flattenedPredicates","reduce","acc","flattenPredicate","accumulator","parent","matches","entries","varName","parentVarName","groupKey","push","construct","values","groupedQueries","where","buildDereferenceQuery","ontology","prefix","url","getPrefixRdf","perPage","page","createSlug","require","buildJsonContext","pattern","isFile","o","rawFile","File","RaDateTimeInput","replace","RaImageField","RaReferenceInput","reificationClass","flexFormClasses","hideInputStyles","ArrayInput","SimpleFormIterator","classes","Children","child","cloneElement","className","TextInput","initialValue","sparqlEndpoint","httpClient","jsonContext","uploadsContainerUri","uploadFile","Error","method","body","headers","Headers","Slug","fileName","name","fileExtension","splitFileName","pop","lang","type","response","status","get","uploadAllFiles","property","hasOwnProperty","resourceId","json","resourceType","returnData","item","some","k","total","first","result","listProperty","find","p","totalItems","sparqlQuery","jsonld","frame","compactJson","a","b","field","order","localeCompare","getOne","dataModel","compact","forceArray","forceArrayItem","getMany","ids","getManyReference","create","slugField","set","f","JSON","stringify","responseHeaders","resourceUri","update","updateMany","deleteMany","options","has","token","localStorage","getItem","fetchUtils","fetchJson"],"mappings":"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"}