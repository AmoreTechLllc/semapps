{"version":3,"file":"index.cjs.js","sources":["../src/fields/ReferenceArrayField.js","../src/fields/ReferenceField.js","../src/dataHandling/FilterHandler.js","../src/inputs/ReferenceArrayInput.js","../src/inputs/ReificationArrayInput.js","../src/dataProvider/utils/getServerKeyFromType.js","../src/dataProvider/utils/getServerKeyFromUri.js","../src/dataProvider/utils/fetchResource.js","../src/dataProvider/methods/getOne.js","../node_modules/url-join/lib/url-join.js","../src/dataProvider/utils/uploadAllFiles.js","../src/dataProvider/utils/findContainersWithTypes.js","../src/dataProvider/methods/create.js","../src/dataProvider/methods/delete.js","../src/dataProvider/methods/deleteMany.js","../src/dataProvider/methods/getCreateContainer.js","../src/dataProvider/utils/fetchContainers.js","../src/dataProvider/utils/getEmbedFrame.js","../src/dataProvider/utils/buildDereferenceQuery.js","../src/dataProvider/utils/buildSparqlQuery.js","../src/dataProvider/utils/getRdfPrefixes.js","../src/dataProvider/utils/fetchSparqlEndpoints.js","../src/dataProvider/methods/getList.js","../src/dataProvider/methods/getMany.js","../src/dataProvider/methods/getManyReference.js","../src/dataProvider/methods/update.js","../node_modules/jwt-decode/build/jwt-decode.esm.js","../src/dataProvider/utils/fetchUserConfig.js","../src/dataProvider/utils/fetchVoidEndpoints.js","../src/inputs/DateTimeInput.js","../src/dataHandling/GroupedReferenceHandler.js","../src/fields/ImageField.js","../src/inputs/ReferenceInput.js","../src/dataProvider/dataProvider.js","../src/httpClient.js","../src/hooks/useCreateContainer.js"],"sourcesContent":["import React from 'react';\nimport { ReferenceArrayField as RaReferenceArrayField } from 'react-admin';\n\nconst ReferenceArrayField = ({ record, source, ...otherProps }) => {\n  if (record?.[source]) {\n    if (!Array.isArray(record[source])) {\n      record[source] = [record[source]];\n    }\n    record[source] = record[source].map(i => i['@id'] || i.id || i);\n  }\n  return <RaReferenceArrayField record={record} source={source} {...otherProps} />;\n};\n\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceArrayField;\n","import React from 'react';\nimport { ReferenceField as RaReferenceField } from 'react-admin';\n\nconst ReferenceField = ({ record, source, ...otherProps }) => {\n  if (record[source]) {\n    if (typeof record[source] === 'object') {\n      record[source] = record[source]['@id'] || record[source].id;\n    }\n  }\n  return <RaReferenceField record={record} source={source} {...otherProps} />;\n};\n\nReferenceField.defaultProps = {\n  addLabel: true\n};\n\nexport default ReferenceField;\n","import React, { useState, useEffect } from 'react';\n\n/**\n * @example\n * <Show>\n *   <FilterHandler\n *     source=\"property\" // ex pair:organizationOfMembership\n *     filter={{\n *       'propertyToFilter':'value'\n *     }} // ex {{'pair:membershipRole':'http://localhost:3000/membership-roles/role-1'}}\n *     >\n *     <SingleFieldList>\n *    </SingleFieldList>\n *   </FilterHandler>\n * </Show>\n */\n\nconst FilterHandler = ({ children, record, filter, source, ...otherProps }) => {\n  const [filtered, setFiltered] = useState();\n  useEffect(() => {\n    if (record && source && Array.isArray(record?.[source])) {\n      const filteredData = record?.[source].filter(r => {\n        let eq = true;\n        for (const key in filter) {\n          const value = r[key];\n          if (Array.isArray(value)) {\n            if (!value.includes(filter[key])) {\n              eq = false;\n            }\n          } else {\n            if (value !== filter[key]) {\n              eq = false;\n            }\n          }\n        }\n        return eq;\n      });\n      let newRecord = {\n        ...record\n      };\n      //undefined setted if no data to obtain no render in RightLabel or equivalent\n      newRecord[source] = filteredData.length > 0 ? filteredData : undefined;\n      setFiltered(newRecord);\n    }\n  }, [record, source, filter]);\n\n  return (\n    <>\n      {React.Children.map(children, (child, i) => {\n        return React.cloneElement(child, {\n          ...otherProps,\n          record: filtered,\n          addLabel: true,\n          source\n        });\n      })}\n    </>\n  );\n};\nexport default FilterHandler;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // if the linked field value is not an array, turns it into an array.\n        // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n        // and the ReferenceArrayInput component only accept arrays\n        if (!Array.isArray(value)) value = [value];\n        // If a format prop was defined, apply it to the array\n        if (props.format) value = props.format(value);\n        // If the values are objects with @id field, turn it to a simple string\n        return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n      }}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;\n","import React, { useEffect, useState } from 'react';\nimport { ArrayInput, SimpleFormIterator, TextInput } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useReferenceInputStyles = makeStyles({\n  form: {\n    display: 'flex'\n  },\n  input: {\n    paddingRight: '20px'\n  }\n});\n\nconst useHideInputStyles = makeStyles({\n  root: {\n    display: 'none'\n  }\n});\n\nconst ReificationArrayInput = props => {\n  const { reificationClass, children, ...otherProps } = props;\n  const flexFormClasses = useReferenceInputStyles();\n  const hideInputStyles = useHideInputStyles();\n\n  return (\n    <ArrayInput {...otherProps}>\n      <SimpleFormIterator classes={{ form: flexFormClasses.form }}>\n        {React.Children.map(props.children, (child, i) => {\n          return React.cloneElement(child, {\n            className: flexFormClasses.input\n          });\n        })}\n        <TextInput className={hideInputStyles.root} source=\"type\" initialValue={reificationClass} />\n      </SimpleFormIterator>\n    </ArrayInput>\n  );\n};\n\nexport default ReificationArrayInput;\n","const getServerKeyFromType = (type, dataServers) => {\n  return Object.keys(dataServers).find(key => {\n    return dataServers[key][type];\n  });\n};\n\nexport default getServerKeyFromType;\n","// Return the first server matching with the baseUrl\nconst getServerKeyFromUri = (uri, dataServers) => {\n  return Object.keys(dataServers).find(key => {\n    return uri.startsWith(dataServers[key].baseUrl);\n  });\n};\n\nexport default getServerKeyFromUri;\n","import getServerKeyFromType from './getServerKeyFromType';\nimport getServerKeyFromUri from './getServerKeyFromUri';\nimport jsonld from 'jsonld';\n\nconst fetchResource = async (resourceUri, config) => {\n  const { dataServers, httpClient, jsonContext } = config;\n\n  const authServerKey = getServerKeyFromType('authServer', dataServers);\n  const serverKey = getServerKeyFromUri(resourceUri, dataServers);\n\n  // Fetch through proxy server if it is available\n  let { json: data } =\n    serverKey !== authServerKey && dataServers[authServerKey]?.proxyUrl\n      ? await httpClient(dataServers[authServerKey].proxyUrl, {\n          method: 'POST',\n          headers: new Headers({ 'Content-Type': 'application/x-www-form-urlencoded' }),\n          body: new URLSearchParams({ id: resourceUri })\n        })\n      : await httpClient(resourceUri, {\n          noToken: serverKey !== authServerKey\n        });\n\n  data.id = data.id || data['@id'];\n\n  // We compact only if the context is different between the frontend and the middleware\n  // TODO deep compare if the context is an object\n  if (data['@context'] !== jsonContext) {\n    data = await jsonld.compact(data, jsonContext);\n  }\n\n  return data;\n};\n\nexport default fetchResource;\n","import fetchResource from '../utils/fetchResource';\n\nconst getOneMethod = config => async (resourceId, params) => {\n  const { resources } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) throw new Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  const data = await fetchResource(params.id, config);\n\n  // Transform single value into array if forceArray is set\n  if (dataModel.list?.forceArray) {\n    for (const forceArrayItem of dataModel.list?.forceArray) {\n      if (data[forceArrayItem] && !Array.isArray(data[forceArrayItem])) {\n        data[forceArrayItem] = [data[forceArrayItem]];\n      }\n    }\n  }\n\n  if (dataModel.list?.dereference) {\n    for (const dereferenceItem of dataModel.list?.dereference) {\n      if (\n        data[dereferenceItem] &&\n        typeof data[dereferenceItem] === 'string' &&\n        data[dereferenceItem].startsWith('http')\n      ) {\n        try {\n          const dataToEmbed = await fetchResource(data[dereferenceItem], config);\n          delete dataToEmbed['@context'];\n          data[dereferenceItem] = dataToEmbed;\n        } catch (e) {\n          // Ignore errors (this may happen if user does not have rights to see the resource)\n        }\n      }\n    }\n  }\n\n  return { data: data };\n};\n\nexport default getOneMethod;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n","import createSlug from 'speakingurl';\nimport urlJoin from 'url-join';\n\nexport const getSlugWithExtension = fileName => {\n  let fileExtension = '';\n  let splitFileName = fileName.split('.');\n  if (splitFileName.length > 1) {\n    fileExtension = splitFileName.pop();\n    fileName = splitFileName.join('.');\n  }\n  return createSlug(fileName, { lang: 'fr' }) + '.' + fileExtension;\n};\n\nexport const isFile = o => o && o.rawFile && o.rawFile instanceof File;\n\nconst getUploadsContainerUri = config => {\n  const serverKey = Object.keys(config.dataServers).find(key => config.dataServers[key].uploadsContainer);\n  if (serverKey) {\n    return urlJoin(config.dataServers[serverKey].baseUrl, config.dataServers[serverKey].uploadsContainer);\n  }\n};\n\nconst uploadFile = async (rawFile, config) => {\n  const uploadsContainerUri = getUploadsContainerUri(config);\n  if (!uploadsContainerUri) throw new Error(\"You must define an uploadsContainer in one of the server's configuration\");\n\n  const response = await config.httpClient(uploadsContainerUri, {\n    method: 'POST',\n    body: rawFile,\n    headers: new Headers({\n      // We must sluggify the file name, because we can't use non-ASCII characters in the header\n      // However we keep the extension apart (if it exists) so that it is not replaced with a -\n      // TODO let the middleware guess the extension based on the content type\n      Slug: getSlugWithExtension(rawFile.name),\n      'Content-Type': rawFile.type\n    })\n  });\n\n  if (response.status === 201) {\n    return response.headers.get('Location');\n  }\n};\n\n/*\n * Look for raw files in the record data.\n * If there are any, upload them and replace the file by its URL.\n */\nconst uploadAllFiles = async (record, config) => {\n  for (let property in record) {\n    if (record.hasOwnProperty(property)) {\n      if (Array.isArray(record[property])) {\n        for (let i = 0; i < record[property].length; i++) {\n          if (isFile(record[property][i])) {\n            record[property][i] = await uploadFile(record[property][i].rawFile, config);\n          }\n        }\n      } else {\n        if (isFile(record[property])) {\n          record[property] = await uploadFile(record[property].rawFile, config);\n        }\n      }\n    }\n  }\n  return record;\n};\n\nexport default uploadAllFiles;\n","import urlJoin from 'url-join';\n\nconst findContainersWithTypes = (types, servers, dataServers) => {\n  let containers = {};\n  let existingContainers = [];\n  Object.keys(dataServers).forEach(key1 => {\n    Object.keys(dataServers[key1].containers).forEach(key2 => {\n      if (!servers || (Array.isArray(servers) ? servers.includes(key2) : servers === key2)) {\n        Object.keys(dataServers[key1].containers[key2]).forEach(type => {\n          if (types.includes(type)) {\n            dataServers[key1].containers[key2][type].map(path => {\n              const containerUri = urlJoin(dataServers[key2].baseUrl, path);\n\n              // Avoid returning the same container several times\n              if (!existingContainers.includes(containerUri)) {\n                existingContainers.push(containerUri);\n\n                if (!containers[key1]) containers[key1] = [];\n                containers[key1].push(containerUri);\n              }\n            });\n          }\n        });\n      }\n    });\n  });\n  return containers;\n};\n\nexport default findContainersWithTypes;\n","import getOne from './getOne';\nimport uploadAllFiles from '../utils/uploadAllFiles';\nimport findContainersWithTypes from '../utils/findContainersWithTypes';\nimport getServerKeyFromUri from '../utils/getServerKeyFromUri';\n\nconst createMethod = config => async (resourceId, params) => {\n  const { dataServers, resources, httpClient, jsonContext } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  const headers = new Headers();\n\n  if (dataModel.fieldsMapping?.title) {\n    headers.set('Slug', params.data[dataModel.fieldsMapping?.title]);\n  }\n\n  let containerUri, serverKey;\n  if (dataModel.create?.container) {\n    containerUri = dataModel.create?.container;\n    serverKey = getServerKeyFromUri(containerUri, dataServers);\n  } else {\n    serverKey =\n      dataModel.create?.server || Object.keys(config.dataServers).find(key => config.dataServers[key].default === true);\n    if (!serverKey) throw new Error('You must define a server for the creation, or a container, or a default server');\n\n    const containers = findContainersWithTypes(dataModel.types, [serverKey], dataServers);\n    // Extract the containerUri from the results (and ensure there is only one)\n    const serverKeys = Object.keys(containers);\n\n    if (!serverKeys || serverKeys.length === 0)\n      throw new Error(`No container with types ${JSON.stringify(dataModel.types)} found on server ${serverKey}`);\n    if (serverKeys.length > 1 || containers[serverKeys[0]].length > 1)\n      throw new Error(\n        `More than one container detected with types ${JSON.stringify(dataModel.types)} on server ${serverKey}`\n      );\n    containerUri = containers[serverKeys[0]][0];\n  }\n\n  // Upload files, if there are any\n  params.data = await uploadAllFiles(params.data, config);\n\n  const { headers: responseHeaders } = await httpClient(containerUri, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      '@context': jsonContext,\n      '@type': dataModel.types,\n      ...params.data\n    }),\n    noToken: dataServers[serverKey].authServer !== true\n  });\n\n  // Retrieve newly-created resource\n  const resourceUri = responseHeaders.get('Location');\n  return await getOne(config)(resourceId, { id: resourceUri });\n};\n\nexport default createMethod;\n","import getServerKeyFromUri from '../utils/getServerKeyFromUri';\n\nconst deleteMethod = config => async (resourceId, params) => {\n  const { dataServers, httpClient } = config;\n  const serverKey = getServerKeyFromUri(params.id, dataServers);\n\n  await httpClient(params.id, {\n    method: 'DELETE',\n    noToken: !serverKey || dataServers[serverKey].authServer !== true\n  });\n\n  return { data: { id: params.id } };\n};\n\nexport default deleteMethod;\n","const deleteManyMethod = config => async (resourceId, params) => {\n  const { httpClient } = config;\n  let ids = [];\n\n  for (let id of params.ids) {\n    try {\n      await httpClient(id, {\n        method: 'DELETE'\n      });\n      ids.push(id);\n    } catch (e) {\n      // Do nothing if we fail to delete a resource\n    }\n  }\n\n  return { data: ids };\n};\n\nexport default deleteManyMethod;\n","import urlJoin from 'url-join';\nimport getServerKeyFromType from '../utils/getServerKeyFromType';\n\nconst findCreateContainerWithTypes = (types, createServerKey, dataServers) => {\n  let containers = [];\n  Object.keys(dataServers[createServerKey].containers[createServerKey]).forEach(type => {\n    if (types.includes(type)) {\n      dataServers[createServerKey].containers[createServerKey][type].map(path => {\n        const containerUri = urlJoin(dataServers[createServerKey].baseUrl, path);\n        if (!containers.includes(containerUri)) {\n          containers.push(containerUri);\n        }\n      });\n    }\n  });\n\n  if (containers.length === 0) {\n    throw new Error(\n      `No container found matching with types ${JSON.stringify(\n        types\n      )}. You can set explicitely the create.container property of the resource.`\n    );\n  } else if (containers.length > 1) {\n    throw new Error(\n      `More than one container found matching with types ${JSON.stringify(\n        types\n      )}. You must set the create.server or create.container property for the resource.`\n    );\n  }\n\n  return containers[0];\n};\n\nconst getCreateContainer = config => resourceId => {\n  let { dataServers, resources } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) throw new Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  if (dataModel.create?.container) {\n    return dataModel.create?.container;\n  } else if (dataModel.create?.server) {\n    return findCreateContainerWithTypes(dataModel.types, dataModel.create?.server, dataServers);\n  } else {\n    const defaultServerKey = getServerKeyFromType('default', dataServers);\n    return findCreateContainerWithTypes(dataModel.types, defaultServerKey, dataServers);\n  }\n};\n\nexport default getCreateContainer;\n","import jsonld from 'jsonld';\n\nexport const isType = (type, resource) => {\n  const resourceType = resource.type || resource['@type'];\n  return Array.isArray(resourceType) ? resourceType.includes(type) : resourceType === type;\n};\n\nconst fetchContainers = async (containers, resourceId, params, config) => {\n  const { dataServers, httpClient, jsonContext } = config;\n\n  // Transform in an containerUri:serverKey object\n  const containersServers = Object.keys(containers).reduce(\n    (acc, serverKey) => ({\n      ...acc,\n      ...Object.fromEntries(containers[serverKey].map(containerUri => [containerUri, serverKey]))\n    }),\n    {}\n  );\n\n  const fetchPromises = Object.keys(containersServers).map(containerUri =>\n    httpClient(containerUri, {\n      noToken: !containersServers[containerUri] || dataServers[containersServers[containerUri]].authServer !== true\n    })\n      .then(({ json }) => {\n        // If container's context is different, compact it to have an uniform result\n        // TODO deep compare if the context is an object\n        if (json['@context'] !== jsonContext) {\n          return jsonld.compact(json, jsonContext);\n        } else {\n          return json;\n        }\n      })\n      .then(json => {\n        if (isType('ldp:Container', json)) {\n          return json['ldp:contains'];\n        } else {\n          throw new Error(containerUri + ' is not a LDP container');\n        }\n      })\n  );\n\n  // Fetch simultaneously all containers\n  let results = await Promise.all(fetchPromises);\n\n  if (results.length === 0) {\n    return { data: [], total: 0 };\n  } else {\n    // Merge all results in one array\n    results = [].concat.apply(...results);\n\n    let returnData = results.map(item => {\n      item.id = item.id || item['@id'];\n      return item;\n    });\n\n    // Apply filter to results\n    if (params.filter) {\n      // For SPARQL queries, we use \"a\" to filter types, but in containers it must be \"type\"\n      if (params.filter.a) {\n        params.filter.type = params.filter.a;\n        delete params.filter.a;\n      }\n\n      // Remove search params from filter\n      if (params.filter.q) {\n        delete params.filter.q;\n      }\n      if (Object.keys(params.filter).length > 0) {\n        returnData = returnData.filter(resource =>\n          Object.entries(params.filter).some(([k, v]) =>\n            Array.isArray(resource[k]) ? resource[k].includes(v) : resource[k] === v\n          )\n        );\n      }\n    }\n\n    if (params.sort) {\n      returnData = returnData.sort((a, b) => {\n        if (a[params.sort.field] && b[params.sort.field]) {\n          if (params.sort.order === 'ASC') {\n            return a[params.sort.field].localeCompare(b[params.sort.field]);\n          } else {\n            return b[params.sort.field].localeCompare(a[params.sort.field]);\n          }\n        } else {\n          return true;\n        }\n      });\n    }\n    if (params.pagination) {\n      returnData = returnData.slice(\n        (params.pagination.page - 1) * params.pagination.perPage,\n        params.pagination.page * params.pagination.perPage\n      );\n    }\n\n    return { data: returnData, total: results.length };\n  }\n};\n\nexport default fetchContainers;\n","const getEmbedFrame = paths => {\n  let embedFrame = {},\n    predicates;\n  if (paths) {\n    for (let path of paths) {\n      if (path.includes('/')) {\n        predicates = path.split('/').reverse();\n      } else {\n        predicates = [path];\n      }\n      embedFrame = {\n        ...embedFrame,\n        ...predicates.reduce(\n          (accumulator, predicate) => ({\n            [predicate]: {\n              '@embed': '@last',\n              ...accumulator\n            }\n          }),\n          {}\n        )\n      };\n    }\n    return embedFrame;\n  }\n};\n\nexport default getEmbedFrame;\n","import crypto from 'crypto';\n\n// Transform ['ont:predicate1/ont:predicate2'] to ['ont:predicate1', 'ont:predicate1/ont:predicate2']\nconst extractNodes = predicates => {\n  let nodes = [];\n  if (predicates) {\n    for (let predicate of predicates) {\n      if (predicate.includes('/')) {\n        const nodeNames = predicate.split('/');\n        for (let i = 1; i <= nodeNames.length; i++) {\n          nodes.push(nodeNames.slice(0, i).join('/'));\n        }\n      } else {\n        nodes.push(predicate);\n      }\n    }\n  }\n  return nodes;\n};\n\nconst generateSparqlVarName = node =>\n  crypto\n    .createHash('md5')\n    .update(node)\n    .digest('hex');\n\nconst getParentNode = node => node.includes('/') && node.split('/')[0];\n\nconst getPredicate = node => (node.includes('/') ? node.split('/')[1] : node);\n\nconst buildOptionalQuery = (queries, parentNode = false) =>\n  queries\n    .filter(q => q.parentNode === parentNode)\n    .map(\n      q => `\n      OPTIONAL { \n        ${q.query}\n        ${q.filter}\n        ${buildOptionalQuery(queries, q.node)}\n      }\n    `\n    )\n    .join('\\n');\n\nconst buildDereferenceQuery = predicates => {\n  let queries = [];\n  const nodes = extractNodes(predicates);\n\n  if (nodes) {\n    for (let node of nodes) {\n      const parentNode = getParentNode(node);\n      const predicate = getPredicate(node);\n      const varName = generateSparqlVarName(node);\n      const parentVarName = parentNode ? generateSparqlVarName(parentNode) : '1';\n\n      queries.push({\n        node,\n        parentNode,\n        query: `?s${parentVarName} ${predicate} ?s${varName} .\\n?s${varName} ?p${varName} ?o${varName} .`,\n        filter: '' // `FILTER(isBLANK(?s${varName})) .`\n      });\n    }\n\n    return {\n      construct: queries.map(q => q.query).join('\\n'),\n      where: buildOptionalQuery(queries)\n    };\n  } else {\n    return {\n      construct: '',\n      where: ''\n    };\n  }\n};\n\nexport default buildDereferenceQuery;\n","import buildDereferenceQuery from './buildDereferenceQuery';\nimport getRdfPrefixes from './getRdfPrefixes';\n\nconst buildSparqlQuery = ({ containers, params: { filter }, dereference, ontologies }) => {\n  let searchWhereQuery = '', filterWhereQuery = '';\n\n  if (filter) {\n    if (filter.q && filter.q.length > 0) {\n      searchWhereQuery += `\n      {\n        SELECT ?s1\n        WHERE {\n          ?s1 ?p1 ?o1 .\n          FILTER regex(lcase(str(?o1)), \"${filter.q.toLowerCase()}\")\n          FILTER NOT EXISTS {?s1 a ?o1}\n        }\n      }\n      `;\n      delete filter.q;\n    }\n    Object.keys(filter).forEach(predicate => {\n      if (filter[predicate]) {\n        const object = filter[predicate].startsWith('http') ? `<${filter[predicate]}>` : filter[predicate];\n        filterWhereQuery += `?s1 ${predicate} ${object} .`;\n      }\n    });\n  }\n\n\n  const dereferenceQuery = buildDereferenceQuery(dereference);\n\n  return `\n    ${getRdfPrefixes(ontologies)}\n    CONSTRUCT {\n      ?s1 ?p2 ?o2 .\n      ${dereferenceQuery.construct}\n    }\n    WHERE {\n      ${filterWhereQuery}\n      ?containerUri ldp:contains ?s1 .\n      FILTER( ?containerUri IN (${containers.map(container => `<${container}>`).join(', ')}) ) .\n      FILTER( (isIRI(?s1)) ) .\n      ${searchWhereQuery}\n      ${dereferenceQuery.where}\n      ?s1 ?p2 ?o2 .\n    }\n  `;\n};\n\nexport default buildSparqlQuery;\n","const getRdfPrefixes = ontologies => {\n  return ontologies.map(ontology => `PREFIX ${ontology.prefix}: <${ontology.url}>`).join('\\n');\n};\n\nexport default getRdfPrefixes;\n","import getEmbedFrame from './getEmbedFrame';\nimport buildSparqlQuery from './buildSparqlQuery';\nimport jsonld from 'jsonld';\n\nconst fetchSparqlEndpoints = async (containers, resourceId, params, config) => {\n  const { dataServers, resources, httpClient, jsonContext, ontologies } = config;\n  const dataModel = resources[resourceId];\n\n  const frame = {\n    '@context': jsonContext,\n    '@type': dataModel.types,\n    // Embed only what we explicitly asked to dereference\n    // Otherwise we may have same-type resources embedded in other resources\n    '@embed': '@never',\n    ...getEmbedFrame(dataModel.list?.dereference)\n  };\n\n  const sparqlQueryPromises = Object.keys(containers).map(\n    serverKey =>\n      new Promise((resolve, reject) => {\n        const sparqlQuery = buildSparqlQuery({\n          containers: containers[serverKey],\n          params: { ...params, filter: { ...dataModel.list?.filter, ...params.filter } },\n          dereference: dataModel.list?.dereference,\n          ontologies\n        });\n\n        httpClient(dataServers[serverKey].sparqlEndpoint, {\n          method: 'POST',\n          body: sparqlQuery,\n          noToken: dataServers[serverKey].authServer !== true\n        })\n          .then(({ json }) => {\n            // omitGraph option force results to be in a @graph, even if we have a single result\n            return jsonld.frame(json, frame, { omitGraph: false });\n          })\n          .then(compactJson => {\n            resolve(compactJson['@graph'] || []);\n          })\n          .catch(e => reject(e));\n      })\n  );\n\n  // Run simultaneous SPARQL queries\n  let results = await Promise.all(sparqlQueryPromises);\n\n  if (results.length === 0) {\n    return { data: [], total: 0 };\n  } else {\n    // Merge all results in one array\n    results = [].concat.apply(...results);\n\n    // Add id in addition to @id, as this is what React-Admin expects\n    let returnData = results.map(item => {\n      item.id = item.id || item['@id'];\n      return item;\n    });\n\n    // TODO sort and paginate the results in the SPARQL query to improve performances\n    if (params.sort) {\n      returnData = returnData.sort((a, b) => {\n        if (a[params.sort.field] && b[params.sort.field]) {\n          if (params.sort.order === 'ASC') {\n            return a[params.sort.field].localeCompare(b[params.sort.field]);\n          } else {\n            return b[params.sort.field].localeCompare(a[params.sort.field]);\n          }\n        } else {\n          return true;\n        }\n      });\n    }\n    if (params.pagination) {\n      returnData = returnData.slice(\n        (params.pagination.page - 1) * params.pagination.perPage,\n        params.pagination.page * params.pagination.perPage\n      );\n    }\n\n    return { data: returnData, total: results.length };\n  }\n};\n\nexport default fetchSparqlEndpoints;\n","import findContainersWithTypes from '../utils/findContainersWithTypes';\nimport fetchContainers from '../utils/fetchContainers';\nimport fetchSparqlEndpoints from '../utils/fetchSparqlEndpoints';\n\nconst getListMethod = config => async (resourceId, params = {}) => {\n  let { dataServers, resources } = config;\n  const dataModel = resources[resourceId];\n\n  if (!dataModel) throw new Error(`Resource ${resourceId} is not mapped in resources file`);\n\n  let containers;\n  if (dataModel.list?.containers && dataModel.list?.containers.length > 0) {\n    // If containers are set explicitly, use them\n    containers = dataModel.list?.containers;\n  } else {\n    containers = findContainersWithTypes(dataModel.types, dataModel.list?.servers, dataServers);\n  }\n\n  if (dataModel.list?.fetchContainer) {\n    return fetchContainers(containers, resourceId, params, config);\n  } else {\n    return fetchSparqlEndpoints(containers, resourceId, params, config);\n  }\n};\n\nexport default getListMethod;\n","import getOne from './getOne';\n\nconst getManyMethod = config => async (resourceId, params) => {\n  const { returnFailedResources } = config;\n\n  let returnData = [];\n\n  for (let id of params.ids) {\n    id = typeof id === 'object' ? id['@id'] : id;\n\n    try {\n      const { data } = await getOne(config)(resourceId, { id });\n      returnData.push(data);\n    } catch (e) {\n      // Catch if one resource fails to load\n      // Otherwise no references will be show if only one is missing\n      // See https://github.com/marmelab/react-admin/issues/5190\n      if (returnFailedResources) {\n        // Return only the ID of the resource\n        returnData.push({ id });\n      } else {\n        // Do nothing. The resource will not appear in the results.\n      }\n    }\n  }\n\n  return { data: returnData };\n};\n\nexport default getManyMethod;\n","import getList from './getList';\n\nconst getManyReferenceMethod = config => async (resourceId, params) => {\n  params.filter = { ...params.filter, [params.target]: params.id };\n  delete params.target;\n  return await getList(config)(params);\n};\n\nexport default getManyReferenceMethod;\n","import uploadAllFiles from '../utils/uploadAllFiles';\nimport getServerKeyFromUri from '../utils/getServerKeyFromUri';\n\nconst updateMethod = config => async (resourceId, params) => {\n  const { dataServers, httpClient, jsonContext } = config;\n  const serverKey = getServerKeyFromUri(params.id, dataServers);\n\n  // Upload files, if there are any\n  params.data = await uploadAllFiles(params.data, config);\n\n  await httpClient(params.id, {\n    method: 'PUT',\n    body: JSON.stringify({\n      '@context': jsonContext,\n      ...params.data\n    }),\n    noToken: !serverKey || dataServers[serverKey].authServer !== true\n  });\n\n  return { data: params.data };\n};\n\nexport default updateMethod;\n","function e(e){this.message=e}e.prototype=new Error,e.prototype.name=\"InvalidCharacterError\";var r=\"undefined\"!=typeof window&&window.atob&&window.atob.bind(window)||function(r){var t=String(r).replace(/=+$/,\"\");if(t.length%4==1)throw new e(\"'atob' failed: The string to be decoded is not correctly encoded.\");for(var n,o,a=0,i=0,c=\"\";o=t.charAt(i++);~o&&(n=a%4?64*n+o:o,a++%4)?c+=String.fromCharCode(255&n>>(-2*a&6)):0)o=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(o);return c};function t(e){var t=e.replace(/-/g,\"+\").replace(/_/g,\"/\");switch(t.length%4){case 0:break;case 2:t+=\"==\";break;case 3:t+=\"=\";break;default:throw\"Illegal base64url string!\"}try{return function(e){return decodeURIComponent(r(e).replace(/(.)/g,(function(e,r){var t=r.charCodeAt(0).toString(16).toUpperCase();return t.length<2&&(t=\"0\"+t),\"%\"+t})))}(t)}catch(e){return r(t)}}function n(e){this.message=e}function o(e,r){if(\"string\"!=typeof e)throw new n(\"Invalid token specified\");var o=!0===(r=r||{}).header?0:1;try{return JSON.parse(t(e.split(\".\")[o]))}catch(e){throw new n(\"Invalid token specified: \"+e.message)}}n.prototype=new Error,n.prototype.name=\"InvalidTokenError\";export default o;export{n as InvalidTokenError};\n//# sourceMappingURL=jwt-decode.esm.js.map\n","import jwtDecode from 'jwt-decode';\nimport getServerKeyFromType from './getServerKeyFromType';\nimport urlJoin from 'url-join';\n\nconst getContainerFromUri = str => str.match(new RegExp(`(.*)/.*`))[1];\n\nconst fetchUserConfig = async config => {\n  const { dataServers, httpClient } = config;\n  const token = localStorage.getItem('token');\n  const podKey = getServerKeyFromType('pod', dataServers);\n  const authServerKey = getServerKeyFromType('authServer', dataServers);\n\n  // If the user is logged in\n  if (token) {\n    const { webId } = jwtDecode(token);\n    const { json: userData } = await httpClient(webId);\n\n    // If we have a POD server\n    if (podKey) {\n      // Fill the config provided to the data provider\n      // We must modify the config object directly\n      config.dataServers[podKey].name = 'My Pod';\n      config.dataServers[podKey].baseUrl = urlJoin(webId, 'data'); // TODO find POD URI from user profile\n      config.dataServers[podKey].sparqlEndpoint =\n        userData.endpoints?.['void:sparqlEndpoint'] || urlJoin(webId, 'sparql');\n    }\n\n    if (authServerKey) {\n      // Fill the config provided to the data provider\n      // We must modify the config object directly\n      config.dataServers[authServerKey].proxyUrl = userData.endpoints?.proxyUrl;\n    }\n  } else {\n    if (podKey) {\n      // If the user is not logged in, ignore the POD server\n      delete config.dataServers[podKey];\n    }\n  }\n};\n\nexport default fetchUserConfig;\n","const fetchVoidEndpoints = async config => {\n  const fetchPromises = Object.values(config.dataServers)\n    .filter(server => server.pod !== true)\n    .map(server =>\n      config\n        .httpClient(new URL('/.well-known/void', server.baseUrl))\n        .then(result => ({ data: result.json }))\n        .catch(e => {\n          if (e.status === 404) {\n            return { error: e };\n          } else {\n            throw e;\n          }\n        })\n    );\n\n  const results = await Promise.all(fetchPromises);\n\n  for (let result of results) {\n    // Ignore unfetchable endpoints\n    if (result.data) {\n      // TODO modify config.dataServers based on the VOID configs returned\n    }\n  }\n};\n\nexport default fetchVoidEndpoints;\n","import React from 'react';\nimport { DateTimeInput as RaDateTimeInput } from 'react-admin';\n\n/**\n * @deprecated Use the component from the @semapps/date-components instead\n */\nconst DateTimeInput = props => (\n  <RaDateTimeInput {...props} format={value => value && value.replace(' ', 'T').replace('Z', '')} />\n);\n\nexport default DateTimeInput;\n","import React from 'react';\nimport { useQueryWithStore } from 'react-admin';\nimport { default as FilterHandler } from './FilterHandler';\n\n/*\n * @example Label used in examples\n *  const Label = ({label, ...otherProps})=>{\n *     return <h2>{label}</h2>\n *  }\n *\n * @example show header for each group with group property thanks to groupHeader\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupHeader={({group,...otherProps}) => <Label {...otherProps} label={group['pair:label']}></Label> }\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example call chhildren with label thanks to groupLabel\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n * </GroupedReferenceHandler>\n *\n * @example conditional show of group if no data in source. Conditionale groupHeader is not possible because GroupedArrayField define group before filter ; need use chhildren.\n * const ConditionalSourceDefinedHandler = ({record,source,children,...otherProps})=>{\n *   if (record?.[source] && (!Array.isArray(record[source])||record[source].length>0)){\n *     return  React.Children.map(children, (child, i) => {\n *         return React.cloneElement(child, {...otherProps,record,source});\n *       })\n *   }else{\n *     return <></>\n *   }\n * }\n *\n * <GroupedReferenceHandler\n *   source=\"property\" // predicat of main record to show / ex pair:organizationOfMembership\n *   groupReference=\"RAresource\" // React-Admin resource reference. this is the \"group by\" ressource. / ex MembershipRole\n *   groupLabel=\"property of RAresource display\" // property of React-Admin resource to display. children call whith props \"label\" filled by groupLabel property of groupReference\n *   filterProperty=\"property of source filtered by groupReference\"\n *   addLabel={false}\n * >\n *  <ConditionalSourceDefinedHandler>\n *   <Label>\n *   <ArrayField source=\"property\"> // same props as GroupedArrayField source\n *    <GridList>\n *    </GridList>\n *   </ArrayField>\n *  </ConditionalSourceDefinedHandler>\n * </GroupedReferenceHandler>\n *\n *\n */\nconst GroupedReferenceHandler = ({\n  children,\n  groupReference,\n  groupLabel,\n  groupHeader,\n  filterProperty,\n  ...otherProps\n}) => {\n  const { data } = useQueryWithStore({\n    type: 'getList',\n    resource: groupReference,\n    payload: {}\n  });\n\n  return (\n    <>\n      {data?.map((data, index) => {\n        let filter = {};\n        filter[filterProperty] = data.id;\n        return (\n          <>\n            {groupHeader && groupHeader({ ...otherProps, group: data })}\n            <FilterHandler {...otherProps} filter={filter} label={data[groupLabel]}>\n              {children}\n            </FilterHandler>\n          </>\n        );\n      })}\n    </>\n  );\n};\n\nexport default GroupedReferenceHandler;\n","import React from 'react';\nimport { ImageField as RaImageField } from 'react-admin';\n\nconst ImageField = ({ record, source, ...otherProps }) => {\n  // For the display, we need to have the URI in a src property\n  if (typeof record === 'string') record = { [source]: record };\n  return <RaImageField record={record} source={source} {...otherProps} />;\n};\n\nexport default ImageField;\n","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n","import createMethod from './methods/create';\nimport deleteMethod from './methods/delete';\nimport deleteManyMethod from './methods/deleteMany';\nimport getCreateContainerMethod from './methods/getCreateContainer';\nimport getListMethod from './methods/getList';\nimport getManyMethod from './methods/getMany';\nimport getManyReferenceMethod from './methods/getManyReference';\nimport getOneMethod from './methods/getOne';\nimport updateMethod from './methods/update';\nimport fetchUserConfig from './utils/fetchUserConfig';\nimport fetchVoidEndpoints from './utils/fetchVoidEndpoints';\nimport getServerKeyFromType from './utils/getServerKeyFromType';\n\nconst dataProvider = config => {\n  // TODO verify all data provider config + data models\n  if (!getServerKeyFromType('default', config.dataServers))\n    throw new Error('You must define a default server in your dataServers config');\n\n  if (!config.jsonContext) config.jsonContext = Object.fromEntries(config.ontologies.map(o => [o.prefix, o.url]));\n  if (!config.returnFailedResources) config.returnFailedResources = false;\n\n  const fetchUserConfigPromise = fetchUserConfig(config);\n  const fetchVoidEndpointsPromise = fetchVoidEndpoints(config);\n\n  const waitForVoidEndpoints = method => async (...arg) => {\n    await fetchUserConfigPromise;\n    await fetchVoidEndpointsPromise; // Return immediately if promise is fulfilled\n    return await method(...arg);\n  };\n\n  return {\n    getList: waitForVoidEndpoints(getListMethod(config)),\n    getOne: waitForVoidEndpoints(getOneMethod(config)),\n    getMany: waitForVoidEndpoints(getManyMethod(config)),\n    getManyReference: waitForVoidEndpoints(getManyReferenceMethod(config)),\n    create: waitForVoidEndpoints(createMethod(config)),\n    update: waitForVoidEndpoints(updateMethod(config)),\n    updateMany: () => {\n      throw new Error('updateMany is not implemented yet');\n    },\n    delete: waitForVoidEndpoints(deleteMethod(config)),\n    deleteMany: waitForVoidEndpoints(deleteManyMethod(config)),\n    getCreateContainer: waitForVoidEndpoints(getCreateContainerMethod(config))\n  };\n};\n\nexport default dataProvider;\n","import { fetchUtils } from 'react-admin';\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) options.headers = new Headers();\n\n  switch (options.method) {\n    case 'POST':\n    case 'PATCH':\n    case 'PUT':\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      if (!options.headers.has('Content-Type')) options.headers.set('Content-Type', 'application/ld+json');\n      break;\n\n    case 'DELETE':\n      break;\n\n    case 'GET':\n    default:\n      if (!options.headers.has('Accept')) options.headers.set('Accept', 'application/ld+json');\n      break;\n  }\n\n  if (!options.noToken) {\n    const token = localStorage.getItem('token');\n    if (token) options.headers.set('Authorization', `Bearer ${token}`);\n  }\n\n  return fetchUtils.fetchJson(url, options);\n};\n\nexport default httpClient;\n","import { useContext, useState, useEffect } from 'react';\nimport { DataProviderContext } from 'react-admin';\n\nconst useCreateContainer = resourceId => {\n  // Get the raw data provider, since useDataProvider returns a wrapper\n  const dataProvider = useContext(DataProviderContext);\n  const [createContainer, setCreateContainer] = useState();\n\n  useEffect(() => {\n    if (resourceId) {\n      dataProvider.getCreateContainer(resourceId).then(containerUri => setCreateContainer(containerUri));\n    }\n  }, [resourceId]);\n\n  return createContainer;\n};\n\nexport default useCreateContainer;\n"],"names":["ReferenceArrayField","record","source","otherProps","Array","isArray","map","i","id","React","RaReferenceArrayField","defaultProps","addLabel","ReferenceField","_typeof","RaReferenceField","FilterHandler","children","filter","useState","filtered","setFiltered","useEffect","filteredData","r","eq","key","value","includes","newRecord","length","undefined","Children","child","cloneElement","ReferenceArrayInput","props","resource","useResourceContext","RaReferenceArrayInput","format","v","useReferenceInputStyles","makeStyles","form","display","input","paddingRight","useHideInputStyles","root","getServerKeyFromType","type","dataServers","Object","keys","find","getServerKeyFromUri","uri","startsWith","baseUrl","fetchResource","resourceUri","config","httpClient","jsonContext","authServerKey","serverKey","_dataServers$authServ","proxyUrl","method","headers","Headers","body","URLSearchParams","noToken","data","json","jsonld","compact","getOneMethod","resourceId","params","resources","dataModel","Error","list","_dataModel$list","forceArray","_dataModel$list2","forceArrayItem","_dataModel$list3","dereference","_dataModel$list4","dereferenceItem","dataToEmbed","context","definition","this","normalize","strArray","resultArray","TypeError","match","first","shift","replace","component","push","str","join","parts","split","arguments","slice","call","module","exports","isFile","o","rawFile","File","getUploadsContainerUri","uploadsContainer","urlJoin","uploadFile","uploadsContainerUri","Slug","fileName","name","fileExtension","splitFileName","pop","createSlug","lang","response","status","get","uploadAllFiles","property","hasOwnProperty","findContainersWithTypes","types","servers","containers","existingContainers","forEach","key1","key2","path","containerUri","createMethod","fieldsMapping","_dataModel$fieldsMapp","title","set","_dataModel$fieldsMapp2","create","_dataModel$create","container","_dataModel$create2","server","serverKeys","JSON","stringify","authServer","responseHeaders","getOne","deleteMethod","deleteManyMethod","ids","findCreateContainerWithTypes","createServerKey","getCreateContainer","_dataModel$create3","_dataModel$create4","defaultServerKey","fetchContainers","containersServers","reduce","acc","fromEntries","fetchPromises","then","resourceType","Promise","all","results","total","concat","apply","returnData","item","a","q","entries","some","k","sort","b","field","order","localeCompare","pagination","page","perPage","getEmbedFrame","paths","predicates","embedFrame","reverse","accumulator","predicate","generateSparqlVarName","node","crypto","createHash","update","digest","getParentNode","getPredicate","buildOptionalQuery","queries","parentNode","query","buildDereferenceQuery","nodes","nodeNames","extractNodes","varName","parentVarName","construct","where","buildSparqlQuery","ontologies","searchWhereQuery","filterWhereQuery","toLowerCase","object","dereferenceQuery","ontology","prefix","url","getRdfPrefixes","fetchSparqlEndpoints","frame","sparqlQueryPromises","resolve","reject","sparqlQuery","sparqlEndpoint","omitGraph","compactJson","e","getListMethod","_dataModel$list5","fetchContainer","getManyMethod","returnFailedResources","getManyReferenceMethod","target","getList","updateMethod","message","prototype","window","atob","bind","t","String","n","c","charAt","fromCharCode","indexOf","decodeURIComponent","charCodeAt","toString","toUpperCase","header","parse","fetchUserConfig","token","localStorage","getItem","podKey","jwtDecode","webId","userData","endpoints","_userData$endpoints2","fetchVoidEndpoints","values","pod","URL","result","error","RaDateTimeInput","groupReference","groupLabel","groupHeader","filterProperty","useQueryWithStore","payload","index","group","label","RaImageField","RaReferenceInput","reificationClass","flexFormClasses","hideInputStyles","ArrayInput","SimpleFormIterator","classes","className","TextInput","initialValue","fetchUserConfigPromise","fetchVoidEndpointsPromise","waitForVoidEndpoints","getMany","getManyReference","updateMany","deleteMany","getCreateContainerMethod","options","has","fetchUtils","fetchJson","dataProvider","useContext","DataProviderContext","createContainer","setCreateContainer"],"mappings":"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"}