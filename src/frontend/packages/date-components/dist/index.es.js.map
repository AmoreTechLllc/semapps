{"version":3,"file":"index.es.js","sources":["../src/utils.js","../src/Picker.js","../src/useFullCalendarProps.js","../src/CalendarList.js","../src/DaysList.js","../src/index.js"],"sourcesContent":["const leftPad = (nb = 2) => value => ('0'.repeat(nb) + value).slice(-nb);\nconst leftPad4 = leftPad(4);\nconst leftPad2 = leftPad(2);\n\n// yyyy-MM-ddThh:mm\nconst dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/;\n\n/**\n * @param {Date} value value to convert\n * @returns {String} A standardized datetime (yyyy-MM-ddThh:mm), to be passed to an <input type=\"datetime-local\" />\n */\nconst convertDateToString = value => {\n  if (!(value instanceof Date) || isNaN(value.getDate())) {\n    return '';\n  }\n\n  const yy = leftPad4(value.getFullYear());\n  const MM = leftPad2(value.getMonth() + 1);\n  const dd = leftPad2(value.getDate());\n  const hh = leftPad2(value.getHours());\n  const mm = leftPad2(value.getMinutes());\n  return `${yy}-${MM}-${dd}T${hh}:${mm}`;\n};\n\n/**\n * Converts a date from the Redux store, with timezone, to a date string\n * without timezone for use in an <input type=\"datetime-local\" />.\n *\n * @param {Date | String} value date string or object\n */\nexport const dateTimeFormatter = value => {\n  // null, undefined and empty string values should not go through convertDateToString\n  // otherwise, it returns undefined and will make the input an uncontrolled one.\n  if (value == null || value === '') {\n    return '';\n  }\n\n  if (value instanceof Date) {\n    return convertDateToString(value);\n  }\n\n  // valid dates should not be converted\n  if (dateTimeRegex.test(value)) {\n    return value;\n  }\n\n  return convertDateToString(new Date(value));\n};\n\n/**\n * Converts a datetime string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {String} value Date string, formatted as yyyy-MM-ddThh:mm\n * @return {Date}\n */\nexport const dateTimeParser = value => (value ? new Date(value) : '');\n","import React, { useCallback } from 'react';\nimport { useInput, useTranslate, FieldTitle, InputHelperText } from 'react-admin';\nimport { IconButton } from '@material-ui/core';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { dateTimeFormatter, dateTimeParser } from './utils';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nconst sanitizeRestProps = ({\n  allowEmpty,\n  alwaysOn,\n  basePath,\n  component,\n  defaultValue,\n  format,\n  formClassName,\n  initialValue,\n  initializeForm,\n  input,\n  isRequired,\n  label,\n  limitChoicesToValue,\n  locale,\n  meta,\n  options,\n  optionText,\n  optionValue,\n  parse,\n  record,\n  resource,\n  source,\n  textAlign,\n  translate,\n  translateChoice,\n  labelTime,\n  ...rest\n}) => rest;\n\nconst Picker = ({\n  PickerComponent,\n  format = dateTimeFormatter,\n  label,\n  options,\n  source,\n  resource,\n  helperText,\n  margin = 'dense',\n  onBlur,\n  onChange,\n  onFocus,\n  parse = dateTimeParser,\n  validate,\n  variant = 'filled',\n  defaultValue,\n  providerOptions: { utils, locale },\n  pickerVariant = 'dialog',\n  stringFormat = 'ISO',\n  allowClear,\n  ...rest\n}) => {\n  const translate = useTranslate();\n  const {\n    id,\n    input,\n    isRequired,\n    meta: { error, touched }\n  } = useInput({\n    format,\n    onBlur,\n    onChange,\n    onFocus,\n    parse,\n    resource,\n    source,\n    validate,\n    /* type: 'datetime-local', */\n    ...rest\n  });\n\n  const handleChange = useCallback(value => {\n    Date.parse(value)\n      ? input.onChange(stringFormat === 'ISO' ? value.toISOString() : value.toString())\n      : input.onChange(null);\n  }, []);\n\n  const handleClear = useCallback(e => {\n    e.stopPropagation();\n    input.onChange(null);\n  }, []);\n\n  return (\n    <MuiPickersUtilsProvider utils={utils || DateFnsUtils} locale={locale}>\n      <PickerComponent\n        id={id}\n        InputLabelProps={{\n          shrink: true\n        }}\n        InputProps={{\n          endAdornment: allowClear ? (\n            <IconButton onClick={handleClear}>\n              <ClearIcon />\n            </IconButton>\n          ) : (\n            undefined\n          )\n        }}\n        label={<FieldTitle label={label} source={source} resource={resource} isRequired={isRequired} />}\n        variant={pickerVariant}\n        inputVariant={variant}\n        margin={margin}\n        error={!!(touched && error)}\n        helperText={<InputHelperText touched={touched} error={error} helperText={helperText} />}\n        clearLabel={translate('ra.action.clear_input_value')}\n        cancelLabel={translate('ra.action.cancel')}\n        {...options}\n        {...sanitizeRestProps(rest)}\n        value={input.value ? new Date(input.value) : null}\n        onChange={handleChange}\n        onBlur={() =>\n          input.onBlur(\n            input.value\n              ? stringFormat === 'ISO'\n                ? new Date(input.value).toISOString()\n                : new Date(input.value).toString()\n              : null\n          )\n        }\n      />\n    </MuiPickersUtilsProvider>\n  );\n};\n\nPicker.defaultProps = {\n  isRequired: false,\n  meta: { touched: false, error: false },\n  options: {},\n  providerOptions: {\n    utils: DateFnsUtils,\n    locale: undefined\n  },\n  // Avoid saving an empty string in the dataset\n  parse: value => (value === '' ? null : value)\n};\n\nexport default Picker;\n","import React, { useMemo, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useListContext, linkToRecord } from 'react-admin';\n\nconst useFullCalendarProps = ({ label, startDate, endDate, linkType }) => {\n  const history = useHistory();\n  const { ids, data, basePath } = useListContext();\n\n  let query = new URLSearchParams(history.location.search);\n\n  // Bypass the link in order to use React-Router\n  const eventClick = useCallback(({ event, jsEvent }) => {\n    jsEvent.preventDefault();\n    history.push(event.url);\n  }, []);\n\n  // Change the query string when month change\n  const datesSet = useCallback(\n    ({ view }) => {\n      query.set('month', view.currentStart.getMonth() + 1);\n      query.set('year', view.currentStart.getFullYear());\n      history.replace({ pathname: history.location.pathname, search: '?' + query.toString() });\n    },\n    [query]\n  );\n\n  const events = useMemo(\n    () =>\n      ids\n        .filter(id => data[id])\n        .map(id => ({\n          id,\n          title: typeof label === 'string' ? data[id][label] : label(data[id]),\n          start: typeof startDate === 'string' ? data[id][startDate] : startDate(data[id]),\n          end: typeof endDate === 'string' ? data[id][endDate] : endDate(data[id]),\n          url: linkToRecord(basePath, id) + '/' + linkType\n        })),\n    [data, ids, basePath]\n  );\n\n  return {\n    initialDate: query.has('month') ? new Date(query.get('year'), query.get('month') - 1) : new Date(),\n    events,\n    datesSet,\n    eventClick\n  };\n};\n\nexport default useFullCalendarProps;\n","import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport { useTheme, makeStyles } from '@material-ui/core';\nimport useFullCalendarProps from './useFullCalendarProps';\n\nconst useGlobalStyles = makeStyles(theme => ({\n  '@global': {\n    '.fc-button': {\n      backgroundColor: theme.palette.primary.main + ' !important',\n      border: 'none !important',\n      opacity: '1 !important'\n    },\n    '.fc-day-today': {\n      backgroundColor: theme.palette.secondary.light + ' !important'\n    },\n    // Overwrite violet color of links\n    'a.fc-daygrid-dot-event': {\n      color: 'black !important'\n    }\n  }\n}));\n\nconst CalendarList = props => {\n  const theme = useTheme();\n  const fullCalendarProps = useFullCalendarProps(props);\n  useGlobalStyles();\n\n  return (\n    <FullCalendar\n      plugins={[dayGridPlugin]}\n      locale={props.locale}\n      initialView=\"dayGridMonth\"\n      eventBackgroundColor={theme.palette.primary.main}\n      {...fullCalendarProps}\n    />\n  );\n};\n\nCalendarList.defaultProps = {\n  linkType: 'edit'\n};\n\nexport default CalendarList;\n","import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport listPlugin from '@fullcalendar/list';\nimport { makeStyles } from '@material-ui/core';\nimport useFullCalendarProps from './useFullCalendarProps';\n\nconst useGlobalStyles = makeStyles(theme => ({\n  '@global': {\n    '.fc-button': {\n      backgroundColor: theme.palette.primary.main + ' !important',\n      border: 'none !important',\n      opacity: '1 !important'\n    }\n  }\n}));\n\nconst DaysList = props => {\n  const fullCalendarProps = useFullCalendarProps(props);\n  useGlobalStyles();\n\n  return <FullCalendar plugins={[listPlugin]} locale={props.locale} initialView=\"listMonth\" {...fullCalendarProps} />;\n};\n\nDaysList.defaultProps = {\n  linkType: 'edit'\n};\n\nexport default DaysList;\n","import React from 'react';\nimport {\n  DatePicker,\n  TimePicker,\n  DateTimePicker,\n  KeyboardDatePicker,\n  KeyboardDateTimePicker,\n  KeyboardTimePicker\n} from '@material-ui/pickers';\nimport Picker from './Picker';\n\nconst DateInput = props => <Picker PickerComponent={DatePicker} {...props} />;\nconst TimeInput = props => <Picker PickerComponent={TimePicker} {...props} />;\nconst DateTimeInput = props => <Picker PickerComponent={DateTimePicker} {...props} />;\nconst KeyboardDateInput = props => <Picker PickerComponent={KeyboardDatePicker} {...props} />;\nconst KeyboardDateTimeInput = props => <Picker PickerComponent={KeyboardDateTimePicker} {...props} />;\nconst KeyboardTimeInput = props => <Picker PickerComponent={KeyboardTimePicker} {...props} />;\n\nexport { DateInput, TimeInput, DateTimeInput, KeyboardDateInput, KeyboardDateTimeInput, KeyboardTimeInput };\n\nexport { default as CalendarList } from './CalendarList';\nexport { default as DaysList } from './DaysList';\nexport { default as useFullCalendarProps } from './useFullCalendarProps';\n"],"names":["leftPad","nb","value","repeat","slice","leftPad4","leftPad2","dateTimeRegex","convertDateToString","Date","isNaN","getDate","yy","getFullYear","MM","getMonth","dd","hh","getHours","mm","getMinutes","dateTimeFormatter","test","dateTimeParser","Picker","PickerComponent","format","label","options","source","resource","helperText","margin","onBlur","onChange","onFocus","parse","validate","variant","defaultValue","providerOptions","utils","locale","pickerVariant","stringFormat","allowClear","rest","translate","useTranslate","useInput","id","input","isRequired","meta","error","touched","handleChange","useCallback","toISOString","toString","handleClear","e","stopPropagation","React","MuiPickersUtilsProvider","DateFnsUtils","InputLabelProps","shrink","InputProps","endAdornment","IconButton","onClick","ClearIcon","undefined","FieldTitle","inputVariant","InputHelperText","clearLabel","cancelLabel","allowEmpty","alwaysOn","basePath","component","formClassName","initialValue","initializeForm","limitChoicesToValue","optionText","optionValue","record","textAlign","translateChoice","labelTime","defaultProps","useFullCalendarProps","startDate","endDate","linkType","history","useHistory","useListContext","ids","data","query","URLSearchParams","location","search","eventClick","event","jsEvent","preventDefault","push","url","datesSet","view","set","currentStart","replace","pathname","events","useMemo","filter","map","title","start","end","linkToRecord","initialDate","has","get","useGlobalStyles","makeStyles","theme","backgroundColor","palette","primary","main","border","opacity","secondary","light","color","CalendarList","props","useTheme","fullCalendarProps","FullCalendar","plugins","dayGridPlugin","initialView","eventBackgroundColor","DaysList","listPlugin","DateInput","DatePicker","TimeInput","TimePicker","DateTimeInput","DateTimePicker","KeyboardDateInput","KeyboardDatePicker","KeyboardDateTimeInput","KeyboardDateTimePicker","KeyboardTimeInput","KeyboardTimePicker"],"mappings":"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"}